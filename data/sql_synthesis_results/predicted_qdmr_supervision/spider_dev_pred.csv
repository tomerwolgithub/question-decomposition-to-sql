example_id,db_id,question,qdmr,sql_gold,sql_ground,denotation_gold,denotation_ground,correct_denotation
SPIDER_dev_0,concert_singer,How many singers do we have?,return singers ;return number of #1,SELECT count(*) FROM singer,SELECT COUNT(singer.singer_id) FROM singer,"[(6,)]","[(6,)]",True
SPIDER_dev_1,concert_singer,What is the total number of singers?,return singers ;return number of #1,SELECT count(*) FROM singer,SELECT COUNT(singer.singer_id) FROM singer,"[(6,)]","[(6,)]",True
SPIDER_dev_10,concert_singer,Show all countries and the number of singers in each country.,"return countries ;return singers in #1 ;return number of #2 for each #1 ;return #1, #3","SELECT country ,  count(*) FROM singer GROUP BY country","SELECT singer.country, COUNT(singer.singer_id) FROM singer WHERE singer.country IN ( SELECT singer.country FROM singer ) GROUP BY singer.country","[('France', 4), ('Netherlands', 1), ('United States', 1)]","[('France', 4), ('Netherlands', 1), ('United States', 1)]",True
SPIDER_dev_100,car_1,What is the name of the different car makers who produced a car in 1970?,return car makers ;return #1 who produced a car in 1970 ;return names of #2,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,"SELECT car_makers.maker FROM car_makers, cars_data, car_names, model_list WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND car_makers.id IN ( SELECT car_makers.id FROM car_makers, cars_data, car_names, model_list WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.year = 1970 )","[('gm',), ('chrysler',), ('amc',), ('ford',), ('citroen',), ('toyota',), ('nissan',), ('volkswagen',), ('peugeaut',), ('saab',), ('bmw',)]","[('gm',), ('gm',), ('chrysler',), ('amc',), ('ford',), ('ford',), ('gm',), ('chrysler',), ('gm',), ('amc',), ('citroen',), ('gm',), ('ford',), ('chrysler',), ('amc',), ('chrysler',), ('chrysler',), ('ford',), ('gm',), ('gm',), ('toyota',), ('chrysler',), ('amc',), ('ford',), ('nissan',), ('volkswagen',), ('peugeaut',), ('volkswagen',), ('saab',), ('bmw',), ('amc',), ('ford',), ('gm',), ('chrysler',), ('nissan',), ('gm',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('chrysler',), ('gm',), ('ford',), ('amc',), ('gm',), ('gm',), ('ford',), ('chrysler',), ('chrysler',), ('ford',), ('gm',), ('amc',), ('gm',), ('gm',), ('ford',), ('ford',), ('peugeaut',), ('toyota',), ('nissan',), ('volkswagen',), ('chrysler',), ('toyota',), ('chrysler',), ('volkswagen',), ('gm',), ('ford',), ('gm',), ('gm',), ('chrysler',), ('ford',), ('amc',), ('ford',), ('gm',), ('gm',), ('chrysler',), ('amc',), ('gm',), ('ford',), ('chrysler',), ('volkswagen',), ('peugeaut',), ('ford',), ('nissan',), ('toyota',), ('chrysler',), ('toyota',), ('gm',), ('amc',), ('gm',), ('ford',), ('chrysler',), ('ford',), ('gm',), ('ford',), ('chrysler',), ('chrysler',), ('gm',), ('amc',), ('chrysler',), ('gm',), ('amc',), ('ford',), ('chrysler',), ('volkswagen',), ('gm',), ('ford',), ('chrysler',), ('gm',), ('amc',), ('toyota',), ('gm',), ('nissan',), ('ford',), ('ford',), ('gm',), ('gm',), ('volkswagen',), ('chrysler',), ('saab',), ('toyota',), ('gm',), ('chrysler',), ('ford',), ('amc',), ('gm',), ('nissan',), ('ford',), ('toyota',), ('gm',), ('gm',), ('amc',), ('chrysler',), ('ford',), ('gm',), ('chrysler',), ('ford',), ('amc',), ('volkswagen',), ('volkswagen',), ('toyota',), ('nissan',), ('chrysler',), ('chrysler',), ('gm',), ('ford',), ('ford',), ('gm',), ('gm',), ('chrysler',), ('ford',), ('gm',), ('gm',), ('amc',), ('chrysler',), ('gm',), ('gm',), ('ford',), ('toyota',), ('ford',), ('amc',), ('gm',), ('toyota',), ('volkswagen',), ('nissan',), ('ford',), ('volkswagen',), ('amc',), ('volkswagen',), ('peugeaut',), ('saab',), ('ford',), ('chrysler',), ('gm',), ('chrysler',), ('amc',), ('ford',), ('chrysler',), ('gm',), ('ford',), ('amc',), ('gm',), ('gm',), ('volkswagen',), ('chrysler',), ('ford',), ('gm',), ('amc',), ('volkswagen',), ('nissan',), ('toyota',), ('ford',), ('chrysler',), ('peugeaut',), ('toyota',), ('gm',), ('gm',), ('ford',), ('chrysler',), ('gm',), ('chrysler',)]",True
SPIDER_dev_1000,singer,How many singers are there?,return singers ;return number of #1,SELECT count(*) FROM singer,SELECT COUNT(singer.singer_id) FROM singer,"[(8,)]","[(8,)]",True
SPIDER_dev_1001,singer,What is the count of singers?,return singers ;return count of #1,SELECT count(*) FROM singer,SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ),"[(8,)]","[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,)]",False
SPIDER_dev_1002,singer,List the name of singers in ascending order of net worth.,return singers ;return names of #1 ;return net worth of #1 ;return #2 sorted by #3 in ascending order,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,SELECT singer.name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ORDER BY singer.net_worth_millions ASC,"[('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]","[('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]",True
SPIDER_dev_1003,singer,What are the names of singers ordered by ascending net worth?,return singers ;return names of #1 ;return net worths of #1 ;return #2 sorted by #3 ascending,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,SELECT singer.name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ORDER BY singer.net_worth_millions ASC,"[('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]","[('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]",True
SPIDER_dev_1004,singer,What are the birth year and citizenship of singers?,"return singers ;return birth years of #1 ;return citizenships of #1 ;return #2, #3","SELECT Birth_Year ,  Citizenship FROM singer","SELECT singer.birth_year, singer.citizenship FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer )","[(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]","[(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]",True
SPIDER_dev_1005,singer,What are the birth years and citizenships of the singers?,"return singers ;return birth years of #1 ;return citizenships of #1 ;return #2, #3","SELECT Birth_Year ,  Citizenship FROM singer","SELECT singer.birth_year, singer.citizenship FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer )","[(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]","[(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]",True
SPIDER_dev_1006,singer,"List the name of singers whose citizenship is not ""France"".",return singers ;return citizenships of #1 ;return #1 where #2 is not france ;return names of #3,"SELECT Name FROM singer WHERE Citizenship != ""France""",SELECT singer.name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND singer.citizenship != 'France' ),"[('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]","[('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]",True
SPIDER_dev_1007,singer,What are the names of the singers who are not French citizens?,return singers ;return #1 who are french citizens ;return #1 besides #2 ;return names of #3,"SELECT Name FROM singer WHERE Citizenship != ""France""",SELECT singer.name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id NOT IN ( SELECT singer.singer_id FROM singer ) ),"[('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]",[],False
SPIDER_dev_1008,singer,Show the name of singers whose birth year is either 1948 or 1949?,return singers ;return birth years of #1 ;return #1 where #2 is 1948 ;return #1 where #2 is 1949 ;return #3 or #4 ;return names of #5,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,SELECT singer.name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND ((singer.birth_year = 1948) OR (singer.birth_year = 1949)) ),"[('Christy Walton',), ('Alice Walton',)]","[('Christy Walton',), ('Alice Walton',)]",True
SPIDER_dev_1009,singer,What are the names of the singers whose birth years are either 1948 or 1949?,return singers ;return birth years of #1 ;return #1 where #2 is 1948 ;return #1 where #2 is 1949 ;return #3 or #4 ;return names of #5,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,SELECT singer.name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND ((singer.birth_year = 1948) OR (singer.birth_year = 1949)) ),"[('Christy Walton',), ('Alice Walton',)]","[('Christy Walton',), ('Alice Walton',)]",True
SPIDER_dev_101,car_1,Find the make and production time of the cars that were produced in the earliest year?,"return cars ;return years #1 were produced ;return #1 where #2 is earliest ;return make of #3 ;return production time of #3 ;return #4, #5","SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","SELECT car_names.make, cars_data.year FROM car_names, cars_data WHERE cars_data.id = car_names.makeid AND cars_data.year IN ( SELECT cars_data.year FROM cars_data WHERE cars_data.year IN ( SELECT cars_data.year FROM cars_data ) ORDER BY cars_data.year ASC LIMIT 1 )","[('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)]","[('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)]",True
SPIDER_dev_1010,singer,What is the name of the singer with the largest net worth?,return singers ;return net worth of #1 ;return #1 where #2 is largest ;return name of #3,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,SELECT singer.name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ORDER BY singer.net_worth_millions DESC LIMIT 1 ),"[('Liliane Bettencourt',)]","[('Liliane Bettencourt',)]",True
SPIDER_dev_1011,singer,What is the name of the singer who is worth the most?,return singers ;return worth of #1 ;return #1 where #2 is highest ;return name of #3,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,SELECT singer.name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ORDER BY singer.net_worth_millions DESC LIMIT 1 ),"[('Liliane Bettencourt',)]","[('Liliane Bettencourt',)]",True
SPIDER_dev_1012,singer,Show different citizenship of singers and the number of singers of each citizenship.,"return singers ;return citizenships of #1 ;return different #2 ;return number of #1 for each #3 ;return #3, #4","SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","SELECT singer.citizenship, COUNT(singer.singer_id) FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) GROUP BY singer.citizenship","[('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]","[('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]",True
SPIDER_dev_1013,singer,"For each citizenship, how many singers are from that country?",return citizenships ;return singers from #1 ;return number of #2 for each #1,"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","SELECT singer.citizenship, COUNT(singer.citizenship) FROM singer WHERE singer.citizenship IN ( SELECT singer.citizenship FROM singer ) GROUP BY singer.citizenship","[('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]","[('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]",True
SPIDER_dev_1014,singer,Please show the most common citizenship of singers.,return singers ;return citizenships of #1 ;return number of #1 for each #2 ;return #2 where #3 is highest,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1,SELECT singer.citizenship FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) GROUP BY singer.citizenship ORDER BY COUNT(singer.singer_id) DESC LIMIT 1,"[('United States',)]","[('United States',)]",True
SPIDER_dev_1015,singer,What is the msot common singer citizenship?,return msot common singer ;return citizenship of #1,select citizenship from singer group by citizenship order by count(*) desc limit 1,SELECT singer.citizenship FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ),"[('United States',)]","[('France',), ('United States',), ('United States',), ('Chile',), ('United States',), ('Australia',), ('Germany',), ('United States',)]",False
SPIDER_dev_1016,singer,Show different citizenships and the maximum net worth of singers of each citizenship.,"return different citizenships ;return singers of #1 ;return net worth of #2 ;return maximum #3 for each #1 ;return #1, #4","SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","SELECT singer.citizenship, MAX(singer.net_worth_millions) FROM singer WHERE singer.singer_id IN ( SELECT DISTINCT singer.singer_id FROM singer WHERE singer.citizenship IN ( SELECT DISTINCT singer.citizenship FROM singer ) ) GROUP BY singer.citizenship","[('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]","[('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]",True
SPIDER_dev_1017,singer,"For each citizenship, what is the maximum net worth?",return citizenships ;return net worths of #1 ;return maximum #2 for each #1,"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","SELECT singer.citizenship, MAX(singer.net_worth_millions) FROM singer WHERE singer.citizenship IN ( SELECT singer.citizenship FROM singer ) GROUP BY singer.citizenship","[('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]","[('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]",True
SPIDER_dev_1018,singer,Show titles of songs and names of singers.,"return songs ;return titles of #1 ;return singers of #1 ;return names of #3 ;return #2, #4","SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","SELECT song.title, singer.name FROM song, singer WHERE song.singer_id = singer.singer_id AND song.song_id IN ( SELECT song.song_id FROM song ) AND singer.singer_id IN ( SELECT singer.singer_id FROM song, singer WHERE song.singer_id = singer.singer_id AND song.song_id IN ( SELECT song.song_id FROM song ) )","[(""Do They Know It's Christmas"", 'Liliane Bettencourt'), (""F**k It (I Don't Want You Back)"", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]","[(""Do They Know It's Christmas"", 'Liliane Bettencourt'), (""F**k It (I Don't Want You Back)"", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]",True
SPIDER_dev_1019,singer,What are the song titles and singer names?,"return songs ;return song titles of #1 ;return singer names of #1 ;return #2, #3","SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","SELECT song.title, singer.name FROM song, singer WHERE song.singer_id = singer.singer_id AND song.song_id IN ( SELECT song.song_id FROM song )","[(""Do They Know It's Christmas"", 'Liliane Bettencourt'), (""F**k It (I Don't Want You Back)"", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]","[(""Do They Know It's Christmas"", 'Liliane Bettencourt'), (""F**k It (I Don't Want You Back)"", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]",True
SPIDER_dev_102,car_1,What is the maker of the carr produced in the earliest year and what year was it?,"return carr ;return year #1 produced ;return #1 where #2 is earliest ;return maker of #3 ;return year #3 was produced in ;return #4, #5","SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","SELECT car_makers.maker, cars_data.year FROM car_makers, cars_data, car_names, model_list WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND model_list.maker = car_makers.id AND cars_data.edispl IN ( SELECT cars_data.edispl FROM cars_data WHERE cars_data.edispl IN ( SELECT cars_data.edispl FROM cars_data ) AND cars_data.year = 'earliest' )","[('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)]",[],False
SPIDER_dev_1020,singer,Show distinct names of singers that have songs with sales more than 300000.,return singers ;return songs of #1 ;return sales of #2 ;return #1 where #3 is higher than 300000 ;return distinct names of #4,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,"SELECT DISTINCT singer.name FROM song, singer WHERE song.singer_id = singer.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM song, singer WHERE song.singer_id = singer.singer_id AND song.song_id IN ( SELECT song.song_id FROM song, singer WHERE singer.singer_id = song.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ) AND song.sales > 300000 )","[('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]","[('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]",True
SPIDER_dev_1021,singer,what are the different names of the singers that have sales more than 300000?,return singers ;return sales of #1 ;return #1 where #2 is higher than 300000 ;return different names of #3,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,"SELECT DISTINCT singer.name FROM song, singer WHERE song.singer_id = singer.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM song, singer WHERE song.singer_id = singer.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND song.sales > 300000 )","[('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]","[('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]",True
SPIDER_dev_1022,singer,Show the names of singers that have more than one song.,return singers ;return songs of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return names of #4,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,"SELECT singer.name FROM song, singer WHERE singer.singer_id = song.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM song, singer WHERE singer.singer_id = song.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM singer ) GROUP BY singer.singer_id HAVING COUNT(song.song_id) > 1 )","[('Christy Walton',), ('Liliane Bettencourt',)]","[('Liliane Bettencourt',), ('Liliane Bettencourt',), ('Christy Walton',), ('Christy Walton',)]",True
SPIDER_dev_1023,singer,What are the names of the singers that have more than one songs?,return singers ;return songs of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return names of #4,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,"SELECT singer.name FROM song, singer WHERE singer.singer_id = song.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM song, singer WHERE singer.singer_id = song.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM singer ) GROUP BY singer.singer_id HAVING COUNT(song.song_id) > 1 )","[('Christy Walton',), ('Liliane Bettencourt',)]","[('Liliane Bettencourt',), ('Liliane Bettencourt',), ('Christy Walton',), ('Christy Walton',)]",True
SPIDER_dev_1024,singer,Show the names of singers and the total sales of their songs.,"return singers ;return names of #1 ;return songs of #1 ;return sales of #3 ;return sum of #4 for each #1 ;return #2, #5","SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","SELECT singer.name, SUM(song.sales) FROM song, singer WHERE singer.singer_id = song.singer_id AND singer.name IN ( SELECT singer.name FROM singer ) AND song.song_id IN ( SELECT song.song_id FROM song, singer WHERE singer.singer_id = song.singer_id AND singer.name IN ( SELECT singer.name FROM singer ) ) GROUP BY singer.name","[('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]","[('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]",True
SPIDER_dev_1025,singer,"For each singer name, what is the total sales for their songs?",return singer names ;return songs of #1 ;return sales of #2 ;return sum of #3 for each #1,"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","SELECT singer.name, SUM(song.sales) FROM song, singer WHERE singer.singer_id = song.singer_id AND song.song_id IN ( SELECT song.song_id FROM song, singer WHERE singer.singer_id = song.singer_id AND singer.name IN ( SELECT singer.name FROM singer ) ) GROUP BY singer.name","[('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]","[('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]",True
SPIDER_dev_1026,singer,List the name of singers that do not have any song.,return singers ;return #1 that have songs ;return #1 besides #2 ;return names of #3,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),"SELECT singer.name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id NOT IN ( SELECT singer.singer_id FROM song, singer WHERE singer.singer_id = song.singer_id ) )","[('Alice Walton',), ('Abigail Johnson',)]","[('Alice Walton',), ('Abigail Johnson',)]",True
SPIDER_dev_1027,singer,What is the sname of every sing that does not have any song?,return sings ;return #1 that do not have songs ;return snames of #2,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),"SELECT singer.name FROM song, singer WHERE song.singer_id = singer.singer_id AND song.song_id IN ( SELECT song.song_id FROM song )","[('Alice Walton',), ('Abigail Johnson',)]","[('Liliane Bettencourt',), ('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',), ('Christy Walton',), ('Gina Rinehart',), ('Jacqueline Mars',), ('Susanne Klatten',)]",False
SPIDER_dev_1028,singer,Show the citizenship shared by singers with birth year before 1945 and after 1955.,return singers ;return birth years of #1 ;return #1 where #2 is before 1945 ;return #1 where #2 is after 1955 ;return #1 of both #3 and #4 ;return citizenships of #5,SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,SELECT DISTINCT singer.citizenship FROM singer WHERE singer.citizenship IN ( SELECT DISTINCT singer.citizenship FROM singer WHERE singer.citizenship IN ( SELECT singer.citizenship FROM singer ) AND singer.birth_year < 1945 AND singer.citizenship IN ( SELECT singer.citizenship FROM singer WHERE singer.citizenship IN ( SELECT singer.citizenship FROM singer ) AND singer.birth_year > 1955 ) ),"[('United States',)]","[('United States',)]",True
SPIDER_dev_1029,singer,What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?,return singers ;return birth years of #1 ;return #1 where #2 is before 1945 ;return #1 where #2 is after 1955 ;return #1 of both #3 and #4 ;return citizenships of #5,SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,SELECT DISTINCT singer.citizenship FROM singer WHERE singer.citizenship IN ( SELECT DISTINCT singer.citizenship FROM singer WHERE singer.citizenship IN ( SELECT singer.citizenship FROM singer ) AND singer.birth_year < 1945 AND singer.citizenship IN ( SELECT singer.citizenship FROM singer WHERE singer.citizenship IN ( SELECT singer.citizenship FROM singer ) AND singer.birth_year > 1955 ) ),"[('United States',)]","[('United States',)]",True
SPIDER_dev_103,car_1,Which distinct car models are the produced after 1980?,return car models ;return #1 produced after 1980 ;return distinct #2,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,"SELECT DISTINCT car_names.model FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.year > 1980","[('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]","[('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]",True
SPIDER_dev_1030,real_estate_properties,How many available features are there in total?,return features ;return #1 that are available ;return number of #2,SELECT count(*) FROM Other_Available_Features,SELECT COUNT(other_available_features.feature_id) FROM other_available_features,"[(3,)]","[(3,)]",True
SPIDER_dev_1031,real_estate_properties,What is the feature type name of feature AirCon?,return features ;return #1 that is aircon ;return feature type name of #2,"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  ""AirCon""","SELECT ref_feature_types.feature_type_name FROM ref_feature_types, other_available_features WHERE other_available_features.feature_type_code = ref_feature_types.feature_type_code AND other_available_features.feature_id IN ( SELECT other_available_features.feature_id FROM other_available_features WHERE other_available_features.feature_name = 'AirCon' )","[('Amenity, eg Pool.',)]","[('Amenity, eg Pool.',)]",True
SPIDER_dev_1032,real_estate_properties,Show the property type descriptions of properties belonging to that code.,return codes ;return properties belonging to #1 ;return property type descriptions of #2,SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code,"SELECT ref_property_types.property_type_description FROM ref_property_types, properties WHERE properties.property_type_code = ref_property_types.property_type_code AND properties.property_name IN ( SELECT properties.property_name FROM properties WHERE properties.property_type_code IN ( SELECT properties.property_type_code FROM properties ) )","[('Apartment, Flat, Condo, etc.',), ('Field, Meadow.',), ('House, Bungalow, etc.',), ('Other, to be determined.',), ('Shop, Retail Outlet.',)]","[('House, Bungalow, etc.',), ('House, Bungalow, etc.',), ('Other, to be determined.',), ('Field, Meadow.',), ('Apartment, Flat, Condo, etc.',), ('Shop, Retail Outlet.',), ('Shop, Retail Outlet.',), ('Apartment, Flat, Condo, etc.',), ('Apartment, Flat, Condo, etc.',), ('Apartment, Flat, Condo, etc.',), ('Other, to be determined.',), ('Apartment, Flat, Condo, etc.',), ('Other, to be determined.',), ('Other, to be determined.',), ('Apartment, Flat, Condo, etc.',)]",True
SPIDER_dev_1033,real_estate_properties,What are the names of properties that are either houses or apartments with more than 1 room?,"return properties ;return #1 that are houses ;return #1 that are apartments ;return rooms of #2 ;return rooms of #3 ;return number of #4 for each #2 ;return #2 where #5 is higher than 1 ;return #2 where #6 is higher than 1 ;return #3, #7 ;return names of #8","SELECT property_name FROM Properties WHERE property_type_code  =  ""House"" UNION SELECT property_name FROM Properties WHERE property_type_code  =  ""Apartment"" AND room_count  >  1",SELECT properties.property_name FROM properties WHERE properties.property_id IN ( SELECT properties.property_id FROM properties WHERE properties.property_id IN ( SELECT properties.property_id FROM properties WHERE properties.property_type_code = 'House' ) AND properties.property_type_code = 'House' GROUP BY properties.property_id HAVING COUNT(properties.room_count) > 1 ),"[('longacre',), ('parc coliseum',), ('parc east',), ('park',), ('renoir',), ('ten tower',), ('the cole',), ('vogue',)]",[],False
SPIDER_dev_104,car_1,What are the different models for the cards produced after 1980?,return cards ;return #1 produced after 1980 ;return different models for #2,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,"SELECT DISTINCT model_list.model FROM car_names, model_list, cars_data WHERE cars_data.id = car_names.makeid AND car_names.model = model_list.model AND cars_data.year IN ( SELECT cars_data.year FROM cars_data WHERE cars_data.year > 1980 )","[('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]","[('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]",True
SPIDER_dev_105,car_1,How many car makers are there in each continents? List the continent name and the count.,"return continents ;return car makers in #1 ;return number of #2 for each #1 ;return names of #1 ;return #4, #3","SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","SELECT continents.continent, COUNT(car_makers.id) FROM countries, car_makers, continents WHERE continents.contid = countries.continent AND countries.countryid = car_makers.country AND continents.continent IN ( SELECT continents.continent FROM continents ) GROUP BY continents.continent","[('america', 4), ('asia', 7), ('europe', 11)]","[('america', 4), ('asia', 7), ('europe', 11)]",True
SPIDER_dev_106,car_1,What is the name of each continent and how many car makers are there in each one?,"return continents ;return names of #1 ;return car makers in #1 ;return number of #3 for each #1 ;return #2, #4","SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","SELECT continents.continent, COUNT(car_makers.id) FROM countries, car_makers, continents WHERE continents.contid = countries.continent AND countries.countryid = car_makers.country AND continents.continent IN ( SELECT continents.continent FROM continents ) GROUP BY continents.continent","[('america', 4), ('asia', 7), ('europe', 11)]","[('america', 4), ('asia', 7), ('europe', 11)]",True
SPIDER_dev_107,car_1,Which of the countries has the most car makers? List the country name.,return countries ;return car makers in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,"SELECT countries.countryname FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries ) GROUP BY countries.countryid ORDER BY COUNT(car_makers.id) DESC LIMIT 1 )","[('japan',)]","[('japan',), ('japan',), ('japan',), ('japan',), ('japan',)]",True
SPIDER_dev_108,car_1,What is the name of the country with the most car makers?,return countries ;return car makers of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,"SELECT countries.countryname FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries ) GROUP BY countries.countryid ORDER BY COUNT(car_makers.id) DESC LIMIT 1 )","[('japan',)]","[('japan',), ('japan',), ('japan',), ('japan',), ('japan',)]",True
SPIDER_dev_109,car_1,How many car models are produced by each maker? List the count and the maker full name.,"return makers ;return car models produced by #1 ;return number of #2 for each #1 ;return full name of #1 ;return #3, #4","select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;","SELECT car_makers.maker, COUNT(car_names.model), car_makers.fullname FROM car_names, model_list, car_makers WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_makers.maker IN ( SELECT car_makers.maker FROM car_makers ) GROUP BY car_makers.maker","[(1, 'American Motor Company'), (2, 'Volkswagen'), (1, 'BMW'), (5, 'General Motors'), (3, 'Ford Motor Company'), (4, 'Chrysler'), (1, 'Citroen'), (2, 'Nissan Motors'), (1, 'Fiat'), (1, 'Honda'), (1, 'Mazda'), (2, 'Daimler Benz'), (1, 'Opel'), (1, 'Peugeaut'), (1, 'Renault'), (1, 'Saab'), (1, 'Subaru'), (2, 'Toyota'), (1, 'Triumph'), (1, 'Volvo'), (1, 'Kia Motors'), (1, 'Hyundai')]","[('amc', 29, 'American Motor Company'), ('bmw', 2, 'BMW'), ('chrysler', 66, 'Chrysler'), ('citroen', 1, 'Citroen'), ('daimler benz', 3, 'Daimler Benz'), ('fiat', 8, 'Fiat'), ('ford', 65, 'Ford Motor Company'), ('gm', 93, 'General Motors'), ('honda', 13, 'Honda'), ('mazda', 12, 'Mazda'), ('nissan', 24, 'Nissan Motors'), ('opel', 4, 'Opel'), ('peugeaut', 8, 'Peugeaut'), ('renault', 5, 'Renault'), ('saab', 5, 'Saab'), ('subaru', 4, 'Subaru'), ('toyota', 26, 'Toyota'), ('triumph', 1, 'Triumph'), ('volkswagen', 29, 'Volkswagen'), ('volvo', 6, 'Volvo')]",False
SPIDER_dev_11,concert_singer,How many singers are from each country?,return countries ;return singers from #1 ;return number of #2 for each #1,"SELECT country ,  count(*) FROM singer GROUP BY country","SELECT singer.country, COUNT(singer.country) FROM singer WHERE singer.country IN ( SELECT singer.country FROM singer ) GROUP BY singer.country","[('France', 4), ('Netherlands', 1), ('United States', 1)]","[('France', 4), ('Netherlands', 1), ('United States', 1)]",True
SPIDER_dev_110,car_1,What is the number of car models that are produced by each maker and what is the id and full name of each maker?,"return makers ;return car models produced by #1 ;return number of #2 for each #1 ;return ids of #1 ;return full names of #1 ;return #3, #4, #5","SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;","SELECT car_makers.maker, COUNT(car_names.model), car_makers.id, car_makers.fullname FROM car_names, model_list, car_makers WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_makers.maker IN ( SELECT car_makers.maker FROM car_makers ) GROUP BY car_makers.maker","[(1, 'American Motor Company', 1), (2, 'Volkswagen', 2), (1, 'BMW', 3), (5, 'General Motors', 4), (3, 'Ford Motor Company', 5), (4, 'Chrysler', 6), (1, 'Citroen', 7), (2, 'Nissan Motors', 8), (1, 'Fiat', 9), (1, 'Honda', 11), (1, 'Mazda', 12), (2, 'Daimler Benz', 13), (1, 'Opel', 14), (1, 'Peugeaut', 15), (1, 'Renault', 16), (1, 'Saab', 17), (1, 'Subaru', 18), (2, 'Toyota', 19), (1, 'Triumph', 20), (1, 'Volvo', 21), (1, 'Kia Motors', 22), (1, 'Hyundai', 23)]","[('amc', 29, 1, 'American Motor Company'), ('bmw', 2, 3, 'BMW'), ('chrysler', 66, 6, 'Chrysler'), ('citroen', 1, 7, 'Citroen'), ('daimler benz', 3, 13, 'Daimler Benz'), ('fiat', 8, 9, 'Fiat'), ('ford', 65, 5, 'Ford Motor Company'), ('gm', 93, 4, 'General Motors'), ('honda', 13, 11, 'Honda'), ('mazda', 12, 12, 'Mazda'), ('nissan', 24, 8, 'Nissan Motors'), ('opel', 4, 14, 'Opel'), ('peugeaut', 8, 15, 'Peugeaut'), ('renault', 5, 16, 'Renault'), ('saab', 5, 17, 'Saab'), ('subaru', 4, 18, 'Subaru'), ('toyota', 26, 19, 'Toyota'), ('triumph', 1, 20, 'Triumph'), ('volkswagen', 29, 2, 'Volkswagen'), ('volvo', 6, 21, 'Volvo')]",False
SPIDER_dev_111,car_1,What is the accelerate of the car make amc hornet sportabout (sw)?,return car make ;return #1 that is amc hornet sportabout (sw ;return accelerate of #2,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"SELECT cars_data.accelerate FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.make IN ( SELECT car_names.make FROM car_names WHERE car_names.make = 'amc hornet sportabout (sw)' )","[(13.5,)]","[(13.5,)]",True
SPIDER_dev_112,car_1,How much does the car accelerate that makes amc hornet sportabout (sw)?,return amc hornet sportabout ( sw ) ;return car that makes #1 ;return how much does #2 accelerate,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"SELECT cars_data.accelerate FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.make IN ( SELECT car_names.make FROM car_names WHERE car_names.make IN ( SELECT car_names.make FROM car_names WHERE car_names.make = 'amc hornet sportabout (sw)' ) )","[(13.5,)]","[(13.5,)]",True
SPIDER_dev_113,car_1,How many car makers are there in france?,return car makers ;return #1 in france ;return number of #2,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"SELECT COUNT(car_makers.id) FROM countries, car_makers WHERE car_makers.country = countries.countryid AND countries.countryname = 'france'","[(3,)]","[(3,)]",True
SPIDER_dev_114,car_1,What is the number of makers of care in France?,return makers of care ;return #1 in france ;return number of #2,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"SELECT COUNT(car_makers.fullname) FROM countries, car_makers WHERE car_makers.country = countries.countryid AND countries.countryname = 'france'","[(3,)]","[(3,)]",True
SPIDER_dev_115,car_1,How many car models are produced in the usa?,return car models ;return #1 produced in the usa ;return number of #2,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,"SELECT COUNT(model_list.model) FROM countries, car_makers, model_list WHERE model_list.maker = car_makers.id AND car_makers.country = countries.countryid AND countries.countryname = 'usa'","[(13,)]","[(13,)]",True
SPIDER_dev_116,car_1,What is the count of the car models produced in the United States?,return car models ;return #1 produced in the united states ;return the count of #2,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,"SELECT countries.countryid FROM countries, car_makers, car_names, model_list WHERE car_names.model = model_list.model AND model_list.maker = car_makers.id AND car_makers.country = countries.countryid AND car_names.model IN ( SELECT car_names.model FROM car_names )","[(13,)]","[(1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (3,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (4,), (1,), (1,), (1,), (4,), (2,), (3,), (2,), (6,), (2,), (1,), (1,), (1,), (1,), (4,), (1,), (4,), (1,), (2,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (2,), (3,), (5,), (4,), (4,), (2,), (1,), (4,), (1,), (2,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (4,), (1,), (1,), (1,), (1,), (6,), (2,), (3,), (3,), (1,), (4,), (4,), (1,), (4,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (2,), (1,), (1,), (1,), (1,), (1,), (4,), (1,), (4,), (4,), (1,), (1,), (5,), (1,), (1,), (5,), (2,), (2,), (6,), (1,), (6,), (4,), (1,), (1,), (1,), (1,), (1,), (4,), (1,), (4,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (2,), (2,), (2,), (4,), (4,), (1,), (5,), (5,), (4,), (4,), (5,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (4,), (1,), (1,), (1,), (4,), (2,), (4,), (1,), (2,), (1,), (2,), (3,), (6,), (6,), (4,), (5,), (2,), (1,), (1,), (3,), (1,), (1,), (1,), (1,), (1,), (1,), (1,)]",False
SPIDER_dev_117,car_1,What is the average miles per gallon(mpg) of the cars with 4 cylinders?,return cars ;return #1 with 4 cylinders ;return miles per gallon(mpg) of #2 ;return average of #3,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,"SELECT AVG(cars_data.mpg) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.cylinders = 4 )","[(28.862318840579714,)]","[(28.862318840579714,)]",True
SPIDER_dev_118,car_1,What is the average miles per gallon of all the cards with 4 cylinders?,return cards ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is 4 ;return miles per gallon of #4 ;return average of #5,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,SELECT AVG(cars_data.year) FROM cars_data WHERE cars_data.year IN ( SELECT cars_data.year FROM cars_data WHERE cars_data.year IN ( SELECT cars_data.year FROM cars_data ) GROUP BY cars_data.year HAVING COUNT(cars_data.cylinders) = 4 ),"[(28.862318840579714,)]","[(None,)]",False
SPIDER_dev_119,car_1,What is the smallest weight of the car produced with 8 cylinders on 1974?,return cars ;return #1 produced with 8 cylinders on 1974 ;return weights of #2 ;return the smallest #3,select min(weight) from cars_data where cylinders  =  8 and year  =  1974,"SELECT MIN(cars_data.weight) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.cylinders = 8 AND cars_data.year = 1974 )","[(4141,)]","[(4141,)]",True
SPIDER_dev_12,concert_singer,List all song names by singers above the average age.,return singers ;return ages of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return song names of #4,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),SELECT singer.song_name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND singer.age > ( SELECT AVG(singer.age) FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ) ),"[('You',), ('Sun',), ('Gentleman',)]","[('You',), ('Sun',), ('Gentleman',)]",True
SPIDER_dev_120,car_1,What is the minimu weight of the car with 8 cylinders produced in 1974?,return cars ;return #1 produced in 1974 ;return cylinders of #2 ;return number of #3 for each #2 ;return #2 where #4 is 8 ;return the weight of #5 ;return the minimu of #6,select min(weight) from cars_data where cylinders  =  8 and year  =  1974,"SELECT countries.countryid FROM countries, car_makers, cars_data, car_names, model_list WHERE car_names.model = model_list.model AND model_list.maker = car_makers.id AND car_makers.country = countries.countryid AND car_names.makeid = cars_data.id AND cars_data.weight IN ( SELECT cars_data.weight FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.year = 1974 ) AND cars_data.year = 1974 GROUP BY car_names.makeid HAVING COUNT(cars_data.cylinders) = 8 ) )","[(4141,)]",[],False
SPIDER_dev_121,car_1,What are all the makers and models?,"return makers ;return models ;return #1, #2","SELECT Maker ,  Model FROM MODEL_LIST;","SELECT model_list.maker, model_list.model FROM model_list","[(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]","[(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]",True
SPIDER_dev_122,car_1,What are the makers and models?,"return makers ;return models ;return #1, #2","SELECT Maker ,  Model FROM MODEL_LIST;","SELECT model_list.maker, model_list.model FROM model_list","[(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]","[(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]",True
SPIDER_dev_123,car_1,What are the countries having at least one car maker? List name and id.,"return countries ;return car makers in #1 ;return number of #2 for each #1 ;return #1 where #3 is at least one ;return names of #4 ;return ids of #4 ;return #5, #6","SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","SELECT countries.countryname, countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries ) GROUP BY countries.countryid HAVING COUNT(car_makers.id) >= 1 )","[('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]","[('usa', 1), ('germany', 2), ('germany', 2), ('usa', 1), ('usa', 1), ('usa', 1), ('france', 3), ('japan', 4), ('italy', 5), ('japan', 4), ('japan', 4), ('germany', 2), ('germany', 2), ('france', 3), ('france', 3), ('sweden', 6), ('japan', 4), ('japan', 4), ('uk', 7), ('sweden', 6), ('korea', 8), ('korea', 8)]",True
SPIDER_dev_124,car_1,What are the names and ids of all countries with at least one car maker?,"return countries ;return car makers in #1 ;return number of #2 for each #1 ;return #1 where #3 is at least one ;return names of #4 ;return ids of #4 ;return #5, #6","SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","SELECT countries.countryname, countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries ) GROUP BY countries.countryid HAVING COUNT(car_makers.id) >= 1 )","[('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]","[('usa', 1), ('germany', 2), ('germany', 2), ('usa', 1), ('usa', 1), ('usa', 1), ('france', 3), ('japan', 4), ('italy', 5), ('japan', 4), ('japan', 4), ('germany', 2), ('germany', 2), ('france', 3), ('france', 3), ('sweden', 6), ('japan', 4), ('japan', 4), ('uk', 7), ('sweden', 6), ('korea', 8), ('korea', 8)]",True
SPIDER_dev_125,car_1,What is the number of the cars with horsepower more than 150?,return cars ;return horsepower of #1 ;return #1 where #2 is higher than 150 ;return number of #3,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE cars_data.id = car_names.makeid AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) AND cars_data.horsepower > 150","[(281,)]","[(281,)]",True
SPIDER_dev_126,car_1,What is the number of cars with a horsepower greater than 150?,return cars ;return horsepower of #1 ;return #1 where #2 is higher than 150 ;return number of #3,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE cars_data.id = car_names.makeid AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) AND cars_data.horsepower > 150","[(281,)]","[(281,)]",True
SPIDER_dev_127,car_1,What is the average weight of cars each year?,return cars ;return weight of #1 ;return average of #2 each year,"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","SELECT AVG(cars_data.weight) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names )","[(3441.3142857142857, 1970), (2960.344827586207, 1971), (3237.714285714286, 1972), (3419.025, 1973), (2877.925925925926, 1974), (3176.8, 1975), (3078.735294117647, 1976), (2997.3571428571427, 1977), (2861.8055555555557, 1978), (3055.344827586207, 1979), (2436.655172413793, 1980), (2532.1666666666665, 1981), (2453.548387096774, 1982)]","[(2979.4137931034484,)]",False
SPIDER_dev_128,car_1,What is the average weight and year for each year?,"return years ;return weights of #1 ;return average of #2 for each #1 ;return year of #1 ;return average of #4 for each #1 ;return #3, #5","SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","SELECT cars_data.year, AVG(cars_data.weight) FROM cars_data WHERE cars_data.year IN ( SELECT cars_data.year FROM cars_data ) GROUP BY cars_data.year","[(3441.3142857142857, 1970), (2960.344827586207, 1971), (3237.714285714286, 1972), (3419.025, 1973), (2877.925925925926, 1974), (3176.8, 1975), (3078.735294117647, 1976), (2997.3571428571427, 1977), (2861.8055555555557, 1978), (3055.344827586207, 1979), (2436.655172413793, 1980), (2532.1666666666665, 1981), (2453.548387096774, 1982)]","[(1970, 3441.3142857142857), (1971, 2960.344827586207), (1972, 3237.714285714286), (1973, 3419.025), (1974, 2877.925925925926), (1975, 3176.8), (1976, 3078.735294117647), (1977, 2997.3571428571427), (1978, 2861.8055555555557), (1979, 3055.344827586207), (1980, 2436.655172413793), (1981, 2532.1666666666665), (1982, 2453.548387096774)]",True
SPIDER_dev_129,car_1,Which countries in europe have at least 3 car manufacturers?,return countries ;return #1 in europe ;return car manufacturers of #2 ;return number of #3 for each #2 ;return #2 where #4 is at least 3,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"SELECT countries.countryname FROM countries, car_makers, continents WHERE countries.countryid = car_makers.country AND countries.continent = continents.contid AND countries.countryname IN ( SELECT countries.countryname FROM countries, continents WHERE countries.continent = continents.contid AND continents.continent = 'europe' ) AND continents.continent = 'europe' GROUP BY countries.countryname HAVING COUNT(car_makers.country) >= 3","[('france',), ('germany',)]","[('france',), ('germany',)]",True
SPIDER_dev_13,concert_singer,What are all the song names by singers who are older than average?,return singers ;return how old are #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return song names of #4,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),SELECT singer.song_name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND singer.age > ( SELECT AVG(singer.age) FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ) ),"[('You',), ('Sun',), ('Gentleman',)]","[('You',), ('Sun',), ('Gentleman',)]",True
SPIDER_dev_130,car_1,What are the names of all European countries with at least 3 manufacturers?,return european countries ;return manufacturers in #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 3 ;return names of #4,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"SELECT countries.countryname FROM countries, continents WHERE continents.contid = countries.continent AND continents.continent IN ( SELECT continents.continent FROM continents WHERE continents.continent IN ( SELECT continents.continent FROM continents WHERE continents.continent = 'europe' ) AND continents.continent = 'europe' GROUP BY continents.continent HAVING COUNT(continents.contid) >= 3 )","[('france',), ('germany',)]",[],False
SPIDER_dev_131,car_1,What is the maximum horsepower and the make of the car models with 3 cylinders?,"return car models ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is 3 ;return horsepower of #4 ;return maximum #5 ;return make of #4 ;return #6, #7","SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","SELECT MAX(cars_data.horsepower), car_names.make FROM car_names, cars_data WHERE cars_data.id = car_names.makeid AND car_names.model IN ( SELECT car_names.model FROM car_names, cars_data WHERE cars_data.id = car_names.makeid AND car_names.model IN ( SELECT car_names.model FROM car_names ) AND cars_data.cylinders = 3 )","[('97', 'mazda rx2 coupe')]","[('97', 'mazda rx2 coupe')]",True
SPIDER_dev_132,car_1,What is the largest amount of horsepower for the models with 3 cylinders and what make is it?,"return models ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is 3 ;return horsepower of #4 ;return the highest #5 for each #4 ;return make of #4 ;return #6, #7","SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","SELECT model_list.model, MAX(cars_data.horsepower), car_names.make FROM car_names, model_list, cars_data WHERE model_list.model = car_names.model AND car_names.makeid = cars_data.id AND model_list.model IN ( SELECT model_list.model FROM car_names, model_list, cars_data WHERE model_list.model = car_names.model AND car_names.makeid = cars_data.id AND model_list.model IN ( SELECT model_list.model FROM model_list ) GROUP BY model_list.model HAVING COUNT(cars_data.cylinders) = 3 ) AND model_list.model IN ( SELECT model_list.model FROM model_list ) GROUP BY model_list.model","[('97', 'mazda rx2 coupe')]",[],False
SPIDER_dev_133,car_1,"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",return models ;return gasoline that #1 saves ;return miles per gallon of #2 ;return #1 where #3 is the highest,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;,"SELECT model_list.model FROM car_names, model_list, cars_data WHERE car_names.makeid = cars_data.id AND model_list.model = car_names.model AND car_names.model IN ( SELECT car_names.model FROM car_names, model_list WHERE model_list.model = car_names.model AND model_list.model IN ( SELECT model_list.model FROM model_list ) ) ORDER BY cars_data.mpg DESC LIMIT 1","[('citroen',)]","[('citroen',)]",True
SPIDER_dev_134,car_1,What is the car wmodel with the highest mpg?,return cars ;return wmodels of #1 ;return mpg of #2 ;return #2 where #3 is highest,select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;,"SELECT car_names.model FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.model IN ( SELECT car_names.model FROM car_names WHERE car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ) AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.mpg DESC LIMIT 1","[('citroen',)]","[('citroen',)]",True
SPIDER_dev_135,car_1,What is the average horsepower of the cars before 1980?,return cars ;return #1 before 1980 ;return horsepower of #2 ;return average of #3,SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;,"SELECT AVG(cars_data.horsepower) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.year < 1980 )","[(111.13291139240506,)]","[(111.13291139240506,)]",True
SPIDER_dev_136,car_1,What is the average horsepower for all cards produced before 1980?,return cards ;return #1 produced before 1980 ;return horsepower of #2 ;return average of #3,select avg(horsepower) from cars_data where year  <  1980;,SELECT AVG(cars_data.horsepower) FROM cars_data WHERE cars_data.year IN ( SELECT cars_data.year FROM cars_data WHERE cars_data.year < 1980 ),"[(111.13291139240506,)]","[(111.13291139240506,)]",True
SPIDER_dev_137,car_1,What is the average edispl of the cars of model volvo?,return cars ;return #1 of model volvo ;return edispl of #2 ;return average of #3,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,"SELECT AVG(cars_data.edispl) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names WHERE car_names.model = 'volvo' )","[(133.5,)]","[(133.5,)]",True
SPIDER_dev_138,car_1,What is the average edispl for all volvos?,return volvos ;return edispl of #1 ;return average of #2,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,"SELECT AVG(cars_data.edispl) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.model IN ( SELECT car_names.model FROM car_names WHERE car_names.model = 'volvo' )","[(133.5,)]","[(133.5,)]",True
SPIDER_dev_139,car_1,What is the maximum accelerate for different number of cylinders?,return cylinders ;return number of #1 ;return accelerate for each #2 ;return maximum #3,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",ERROR,"[(13.5, 3), (24.8, 4), (20.1, 5), (21.0, 6), (22.2, 8)]",ERROR,False
SPIDER_dev_14,concert_singer,Show location and name for all stadiums with a capacity between 5000 and 10000.,"return stadiums ;return capacities of #1 ;return #1 where #2 is at least 5000 ;return #1 where #2 is at most 10000 ;return #1 of both #3 and #4 ;return locations of #5 ;return names of #5 ;return #6, #7","SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","SELECT stadium.location, stadium.name FROM stadium WHERE stadium.stadium_id IN ( SELECT DISTINCT stadium.stadium_id FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) AND stadium.capacity >= 5000 AND stadium.capacity <= 10000 )",[],[],True
SPIDER_dev_140,car_1,What is the maximum accelerate for all the different cylinders?,return cylinders ;return different #1 ;return accelerate of #2 ;return maximum #3 for each #2,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","SELECT cars_data.cylinders, MAX(cars_data.accelerate) FROM cars_data WHERE cars_data.cylinders IN ( SELECT DISTINCT cars_data.cylinders FROM cars_data ) GROUP BY cars_data.cylinders","[(13.5, 3), (24.8, 4), (20.1, 5), (21.0, 6), (22.2, 8)]","[(3, 13.5), (4, 24.8), (5, 20.1), (6, 21.0), (8, 22.2)]",True
SPIDER_dev_141,car_1,Which model has the most version(make) of cars?,return models ;return cars of #1 ;return version(makes of #2 ;return number of #3 for each #1 ;return #1 where #4 is highest,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,"SELECT model_list.model FROM car_names, model_list WHERE model_list.model = car_names.model AND car_names.model IN ( SELECT car_names.model FROM car_names, model_list WHERE model_list.model = car_names.model AND model_list.model IN ( SELECT model_list.model FROM model_list ) ) GROUP BY model_list.model ORDER BY COUNT(car_names.make) DESC LIMIT 1","[('ford',)]","[('ford',)]",True
SPIDER_dev_142,car_1,What model has the most different versions?,return models ;return different versions of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,"SELECT car_names.model FROM car_names, model_list WHERE car_names.model = model_list.model AND car_names.model IN ( SELECT car_names.model FROM car_names ) GROUP BY car_names.model ORDER BY COUNT(model_list.modelid) DESC LIMIT 1","[('ford',)]","[('ford',)]",True
SPIDER_dev_143,car_1,How many cars have more than 4 cylinders?,return cars ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 4 ;return number of #4,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) GROUP BY car_names.makeid HAVING COUNT(cars_data.cylinders) > 4 )","[(195,)]","[(0,)]",False
SPIDER_dev_144,car_1,What is the number of cars with more than 4 cylinders?,return cars ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 4 ;return number of #4,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) GROUP BY car_names.makeid HAVING COUNT(cars_data.cylinders) > 4 )","[(195,)]","[(0,)]",False
SPIDER_dev_145,car_1,how many cars were produced in 1980?,return cars ;return #1 produced in 1980 ;return number of #2,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.year = 1980","[(29,)]","[(29,)]",True
SPIDER_dev_146,car_1,"In 1980, how many cars were made?",return cars ;return #1 in 1980 ;return number of #2,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.year = 1980","[(29,)]","[(29,)]",True
SPIDER_dev_147,car_1,How many car models were produced by the maker with full name American Motor Company?,return makers ;return full names of #1 ;return #1 where #2 is american motor company ;return car models produced by #3 ;return number of #4,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,"SELECT COUNT(DISTINCT car_names.model) FROM car_names, model_list, car_makers WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_makers.maker IN ( SELECT car_makers.maker FROM car_makers WHERE car_makers.maker IN ( SELECT car_makers.maker FROM car_makers ) AND car_makers.fullname = 'American Motor Company' )","[(1,)]","[(1,)]",True
SPIDER_dev_148,car_1,What is the number of car models created by the car maker American Motor Company?,return car models ;return car makers of #1 ;return #1 where #2 is american motor company ;return number of #3,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,"SELECT COUNT(DISTINCT car_names.model) FROM car_names, model_list, car_makers WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.model IN ( SELECT car_names.model FROM car_names ) AND car_makers.fullname = 'American Motor Company'","[(1,)]","[(1,)]",True
SPIDER_dev_149,car_1,Which makers designed more than 3 car models? List full name and the id.,"return makers ;return car models #1 designed ;return number of #2 for each #1 ;return #1 where #3 is higher than 3 ;return full name of #4 ;return id of #4 ;return #5, #6","SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","SELECT car_makers.fullname, car_makers.id FROM model_list, car_makers WHERE car_makers.id = model_list.maker AND car_makers.maker IN ( SELECT car_makers.maker FROM model_list, car_makers WHERE car_makers.id = model_list.maker AND car_makers.maker IN ( SELECT car_makers.maker FROM car_makers ) GROUP BY car_makers.maker HAVING COUNT(model_list.maker) > 3 )","[('General Motors', 4), ('Chrysler', 6)]","[('General Motors', 4), ('General Motors', 4), ('General Motors', 4), ('Chrysler', 6), ('Chrysler', 6), ('General Motors', 4), ('Chrysler', 6), ('General Motors', 4), ('Chrysler', 6)]",True
SPIDER_dev_15,concert_singer,What are the locations and names of all stations with capacity between 5000 and 10000?,"return stations ;return capacities of #1 ;return #1 where #2 is at least 5000 ;return #1 where #2 is at most 10000 ;return #1 of both #3 and #4 ;return locations of #5 ;return names of #5 ;return #6, #7","SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","SELECT stadium.location, stadium.name FROM stadium WHERE stadium.location IN ( SELECT DISTINCT stadium.location FROM stadium WHERE stadium.location IN ( SELECT stadium.location FROM stadium ) AND stadium.capacity >= 5000 AND stadium.capacity <= 10000 )",[],[],True
SPIDER_dev_150,car_1,What are the names and ids of all makers with more than 3 models?,"return makers ;return models of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 3 ;return names of #4 ;return ids of #4 ;return #5, #6","SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","SELECT car_makers.fullname, car_makers.id FROM model_list, car_makers WHERE car_makers.id = model_list.maker AND car_makers.maker IN ( SELECT car_makers.maker FROM model_list, car_makers WHERE car_makers.id = model_list.maker AND car_makers.maker IN ( SELECT car_makers.maker FROM car_makers ) GROUP BY car_makers.maker HAVING COUNT(model_list.model) > 3 )","[('General Motors', 4), ('Chrysler', 6)]","[('General Motors', 4), ('General Motors', 4), ('General Motors', 4), ('Chrysler', 6), ('Chrysler', 6), ('General Motors', 4), ('Chrysler', 6), ('General Motors', 4), ('Chrysler', 6)]",True
SPIDER_dev_151,car_1,Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?,return makers ;return full names of #1 ;return #1 where #2 is general motors ;return #1 weighing more than 3500 ;return #3 or #4 ;return distinctive models produced by #5,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,"SELECT DISTINCT model_list.maker FROM car_makers, cars_data, car_names, model_list WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND car_makers.maker IN ( SELECT car_makers.maker FROM car_makers, cars_data, car_names, model_list WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND ((car_makers.fullname = 'General Motors' AND car_makers.maker IN ( SELECT car_makers.maker FROM car_makers )) OR (cars_data.weight > 3500)) )","[('chevrolet',), ('buick',), ('ford',), ('plymouth',), ('pontiac',), ('amc',), ('dodge',), ('mercury',), ('oldsmobile',), ('chrysler',), ('mercedes-benz',), ('cadillac',), ('mercedes',)]","[(4,), (6,), (1,), (5,), (13,)]",False
SPIDER_dev_152,car_1,What are the different models created by either the car maker General Motors or weighed more than 3500?,return models ;return #1 created by the car maker general motors ;return #1 weighed more than 3500 ;return #2 or #3 ;return different #4,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,"SELECT DISTINCT model_list.model FROM car_makers, cars_data, car_names, model_list WHERE model_list.maker = car_makers.id AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND ((car_makers.fullname = 'General Motors') OR (cars_data.weight > 3500))","[('chevrolet',), ('buick',), ('ford',), ('plymouth',), ('pontiac',), ('amc',), ('dodge',), ('mercury',), ('oldsmobile',), ('chrysler',), ('mercedes-benz',), ('cadillac',), ('mercedes',)]","[('chevrolet',), ('buick',), ('ford',), ('plymouth',), ('pontiac',), ('amc',), ('dodge',), ('mercury',), ('oldsmobile',), ('chrysler',), ('mercedes-benz',), ('cadillac',), ('mercedes',)]",True
SPIDER_dev_153,car_1,In which years cars were produced weighing no less than 3000 and no more than 4000?,return cars ;return #1 produced weighing at least 3000 ;return #1 produced weighing at most 4000 ;return years of both #2 and #3,select distinct year from cars_data where weight between 3000 and 4000;,"SELECT DISTINCT cars_data.year FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.weight >= 3000 AND cars_data.cylinders <= 4000","[(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]","[(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]",True
SPIDER_dev_154,car_1,What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000?,return cars produced ;return #1 that weighed less than 4000 ;return #1 that weighed more than 3000 ;return years of both #2 and #3,select distinct year from cars_data where weight between 3000 and 4000;,"SELECT DISTINCT cars_data.year FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.accelerate < 4000 AND cars_data.weight > 3000","[(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]","[(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]",True
SPIDER_dev_155,car_1,What is the horsepower of the car with the largest accelerate?,return cars ;return accelerate of #1 ;return #1 where #2 is largest ;return horsepower of #3,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,"SELECT cars_data.horsepower FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.accelerate DESC LIMIT 1 )","[('71',)]","[('71',)]",True
SPIDER_dev_156,car_1,What is the horsepower of the car with the greatest accelerate?,return cars ;return accelerate of #1 ;return #1 where #2 is greatest ;return horsepower of #3,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,"SELECT cars_data.horsepower FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.accelerate DESC LIMIT 1 )","[('71',)]","[('71',)]",True
SPIDER_dev_157,car_1,"For model volvo, how many cylinders does the car with the least accelerate have?",return model volvo ;return cars of #1 ;return accelerate of #2 ;return #2 where #3 is lowest ;return cylinders of #4 ;return number of #5,SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"SELECT COUNT(cars_data.cylinders) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.model IN ( SELECT car_names.model FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.model IN ( SELECT car_names.model FROM car_names WHERE car_names.model IN ( SELECT car_names.model FROM car_names WHERE car_names.model = 'volvo' ) ) AND car_names.model IN ( SELECT car_names.model FROM car_names WHERE car_names.model = 'volvo' ) ORDER BY cars_data.accelerate ASC LIMIT 1 )","[(6,)]","[(6,)]",True
SPIDER_dev_158,car_1,"For a volvo model, how many cylinders does the version with least accelerate have?",return volvo models ;return versions of #1 ;return #2 that have least accelerate ;return cylinders of #3 ;return number of #4,SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"SELECT COUNT(cars_data.cylinders) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.model IN ( SELECT car_names.model FROM car_names WHERE car_names.model = 'volvo' ) )","[(6,)]","[(6,)]",True
SPIDER_dev_159,car_1,How many cars have a larger accelerate than the car with the largest horsepower?,return cars ;return horsepower of #1 ;return #1 where #2 is highest ;return accelerate of #3 ;return #1 besides #3 ;return accelerates of #5 ;return #5 where #6 is higher than #4 ;return number of #7,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names WHERE car_names.makeid NOT IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.horsepower DESC LIMIT 1 ) ) AND cars_data.accelerate > ( SELECT cars_data.accelerate FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.horsepower DESC LIMIT 1 ) )","[(39,)]","[(39,)]",True
SPIDER_dev_16,concert_singer,What is the average and the maximum capacity of all stadiums?,"return stadiums ;return capacities of #1 ;return average of #2 ;return maximum of #2 ;return #3, #4","select max(capacity), average from stadium","SELECT AVG(stadium.capacity), MAX(stadium.capacity) FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium )","[(52500, 730)]","[(10621.666666666666, 52500)]",False
SPIDER_dev_160,car_1,What is the number of cars with a greater accelerate than the one with the most horsepower?,return cars ;return horsepower of #1 ;return #1 where #2 is the highest ;return accelerate of #3 ;return #1 besides #3 ;return accelerates of #5 ;return #5 where #6 is greater than #4 ;return number of #7,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names WHERE car_names.makeid NOT IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.horsepower DESC LIMIT 1 ) ) AND cars_data.accelerate > ( SELECT cars_data.accelerate FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.horsepower DESC LIMIT 1 ) )","[(39,)]","[(39,)]",True
SPIDER_dev_161,car_1,How many countries has more than 2 car makers?,return countries ;return car makers in #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 2 ;return number of #4,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,"SELECT COUNT(countries.countryid) FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries ) GROUP BY countries.countryid HAVING COUNT(car_makers.id) > 2 )","[(4,), (4,), (3,), (5,)]","[(16,)]",False
SPIDER_dev_162,car_1,What is the number of countries with more than 2 car makers?,return countries ;return car makers in #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 2 ;return number of #4,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,"SELECT COUNT(countries.countryid) FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country AND countries.countryid IN ( SELECT countries.countryid FROM countries ) GROUP BY countries.countryid HAVING COUNT(car_makers.id) > 2 )","[(4,), (4,), (3,), (5,)]","[(16,)]",False
SPIDER_dev_163,car_1,How many cars has over 6 cylinders?,return cars ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 6 ;return number of #4,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) GROUP BY car_names.makeid HAVING COUNT(cars_data.cylinders) > 6 )","[(108,)]","[(0,)]",False
SPIDER_dev_164,car_1,What is the number of carsw ith over 6 cylinders?,return cars ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 6 ;return number of #4,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,"SELECT COUNT(car_names.makeid) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) GROUP BY car_names.makeid HAVING COUNT(cars_data.cylinders) > 6 )","[(108,)]","[(0,)]",False
SPIDER_dev_165,car_1,"For the cars with 4 cylinders, which model has the largest horsepower?",return cars ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is 4 ;return models of #4 ;return horsepower of #5 ;return #5 where #6 is highest,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"SELECT model_list.model FROM car_names, model_list, cars_data WHERE car_names.model = model_list.model AND cars_data.id = car_names.makeid AND model_list.model IN ( SELECT model_list.model FROM car_names, model_list, cars_data WHERE car_names.model = model_list.model AND cars_data.id = car_names.makeid AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE cars_data.id = car_names.makeid AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) AND cars_data.cylinders = 4 ) ) AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE cars_data.id = car_names.makeid AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) AND cars_data.cylinders = 4 ) ORDER BY cars_data.horsepower DESC LIMIT 1","[('ford',)]","[('ford',)]",True
SPIDER_dev_166,car_1,"For all of the 4 cylinder cars, which model has the most horsepower?",return cars ;return #1 that are 4 cylinder ;return models of #2 ;return horsepower of #3 ;return #3 where #4 is highest,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"SELECT model_list.model FROM car_names, model_list, cars_data WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND model_list.model IN ( SELECT model_list.model FROM car_names, model_list, cars_data WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.cylinders = 4 ) ) AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.cylinders = 4 ) ORDER BY cars_data.horsepower DESC LIMIT 1","[('ford',)]","[('ford',)]",True
SPIDER_dev_167,car_1,"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.","return cars ;return horsepower of #1 ;return #1 where #2 is higher than lowest ;return cylinders of #3 ;return number of #4 for each #3 ;return #3 where #5 is not more than 3 ;return car makeid of #6 ;return make name of #6 ;return #7, #8","SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;","SELECT car_names.makeid, car_names.make FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.horsepower DESC LIMIT 1 ) AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) GROUP BY car_names.makeid HAVING COUNT(cars_data.cylinders) > 3 )","[(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4')]",[],False
SPIDER_dev_168,car_1,"Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders?","return cars ;return horsepower of #1 ;return minimum of #2 ;return #1 where #2 is not equal to #3 ;return make ids of #4 ;return names of #4 ;return #5, #6","select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;","SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) AND cars_data.horsepower != 'equal to #3' )","[(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4')]","[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,), (21,), (22,), (23,), (24,), (25,), (26,), (27,), (28,), (29,), (30,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,), (39,), (40,), (41,), (42,), (43,), (44,), (45,), (46,), (47,), (48,), (49,), (50,), (51,), (52,), (53,), (54,), (55,), (56,), (57,), (58,), (59,), (60,), (61,), (62,), (63,), (64,), (65,), (66,), (67,), (68,), (69,), (70,), (71,), (72,), (73,), (74,), (75,), (76,), (77,), (78,), (79,), (80,), (81,), (82,), (83,), (84,), (85,), (86,), (87,), (88,), (89,), (90,), (91,), (92,), (93,), (94,), (95,), (96,), (97,), (98,), (99,), (100,), (101,), (102,), (103,), (104,), (105,), (106,), (107,), (108,), (109,), (110,), (111,), (112,), (113,), (114,), (115,), (116,), (117,), (118,), (119,), (120,), (121,), (122,), (123,), (124,), (125,), (126,), (127,), (128,), (129,), (130,), (131,), (132,), (133,), (134,), (135,), (136,), (137,), (138,), (139,), (140,), (141,), (142,), (143,), (144,), (145,), (146,), (147,), (148,), (149,), (150,), (151,), (152,), (153,), (154,), (155,), (156,), (157,), (158,), (159,), (160,), (161,), (162,), (163,), (164,), (165,), (166,), (167,), (168,), (169,), (170,), (171,), (172,), (173,), (174,), (175,), (176,), (177,), (178,), (179,), (180,), (181,), (182,), (183,), (184,), (185,), (186,), (187,), (188,), (189,), (190,), (191,), (192,), (193,), (194,), (195,), (196,), (197,), (198,), (199,), (200,)]",False
SPIDER_dev_169,car_1,What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?,"return cars ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is 8 ;return #1 produced before 1980 ;return #4, #5 ;return the miles per gallon of #6 ;return the maximum of #7",select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,SELECT MAX(cars_data.horsepower) FROM cars_data WHERE cars_data.mpg IN ( SELECT cars_data.mpg FROM cars_data WHERE cars_data.mpg IN ( SELECT cars_data.mpg FROM cars_data ) AND cars_data.cylinders < 8 AND cars_data.year < 1980 GROUP BY cars_data.mpg HAVING COUNT(cars_data.cylinders) = 8 ),"[('null',)]","[('null',)]",True
SPIDER_dev_17,concert_singer,What is the average and maximum capacities for all stations?,"return stations ;return capacities of #1 ;return average of #2 ;return maximum of #2 ;return #3, #4","select avg(capacity) ,  max(capacity) from stadium","SELECT AVG(stadium.capacity), MAX(stadium.capacity) FROM stadium WHERE stadium.location IN ( SELECT stadium.location FROM stadium )","[(10621.666666666666, 52500)]","[(10621.666666666666, 52500)]",True
SPIDER_dev_170,car_1,What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980?,return cars ;return cylinders of #1 ;return number of #2 for each #1 ;return #1 where #3 is 8 ;return #1 produced before 1980 ;return #4 or #5 ;return mpg of #6 ;return maximum of #7,select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,SELECT MAX(cars_data.mpg) FROM cars_data WHERE cars_data.mpg IN ( SELECT cars_data.mpg FROM cars_data WHERE cars_data.mpg IN ( SELECT cars_data.mpg FROM cars_data ) AND cars_data.cylinders < 8 AND cars_data.year < 1980 GROUP BY cars_data.mpg HAVING SUM(cars_data.cylinders) = 8 ),"[('null',)]","[('null',)]",True
SPIDER_dev_171,car_1,Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,return models ;return #1 lighter than 3500 ;return #2 not built by the 'ford motor company,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,"SELECT model_list.model FROM car_makers, cars_data, car_names, model_list WHERE model_list.maker = car_makers.id AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.weight = 3500 AND car_makers.fullname = 'Ford Motor Company'","[('plymouth',), ('amc',), ('citroen',), ('buick',), ('toyota',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('chevrolet',), ('pontiac',), ('opel',), ('fiat',), ('dodge',), ('mazda',), ('volvo',), ('renault',), ('honda',), ('subaru',), ('oldsmobile',), ('mercedes-benz',), ('triumph',), ('chrysler',), ('nissan',)]",[],False
SPIDER_dev_172,car_1,What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?,return models ;return #1 that are lighter than 3500 ;return #2 that were built by the ford motor company ;return #2 besides #3,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,"SELECT model_list.model FROM car_names, model_list, cars_data WHERE model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.weight = 3500 AND model_list.model NOT IN ( SELECT model_list.model FROM car_makers, cars_data, car_names, model_list WHERE model_list.maker = car_makers.id AND model_list.model = car_names.model AND car_names.makeid = cars_data.id AND cars_data.weight = 3500 AND car_makers.fullname = 'Ford Motor Company' )","[('plymouth',), ('amc',), ('citroen',), ('buick',), ('toyota',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('chevrolet',), ('pontiac',), ('opel',), ('fiat',), ('dodge',), ('mazda',), ('volvo',), ('renault',), ('honda',), ('subaru',), ('oldsmobile',), ('mercedes-benz',), ('triumph',), ('chrysler',), ('nissan',)]",[],False
SPIDER_dev_173,car_1,What are the name of the countries where there is not a single car maker?,return countries ;return #1 where there are car makers ;return #1 besides #2 ;return names of #3,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,"SELECT countries.countryname FROM countries WHERE countries.countryid IN ( SELECT countries.countryid FROM countries WHERE countries.countryid NOT IN ( SELECT countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country ) )","[('australia',), ('brazil',), ('egypt',), ('mexico',), ('new zealand',), ('nigeria',), ('russia',)]","[('russia',), ('nigeria',), ('australia',), ('new zealand',), ('egypt',), ('mexico',), ('brazil',)]",True
SPIDER_dev_174,car_1,What are the names of the countries with no car makers?,return countries ;return #1 with car makers ;return #1 besides #2 ;return names of #3,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,"SELECT countries.countryname FROM countries WHERE countries.countryid IN ( SELECT countries.countryid FROM countries WHERE countries.countryid NOT IN ( SELECT countries.countryid FROM countries, car_makers WHERE countries.countryid = car_makers.country ) )","[('australia',), ('brazil',), ('egypt',), ('mexico',), ('new zealand',), ('nigeria',), ('russia',)]","[('russia',), ('nigeria',), ('australia',), ('new zealand',), ('egypt',), ('mexico',), ('brazil',)]",True
SPIDER_dev_175,car_1,Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.,"return car makers ;return models that #1 produce ;return number of #2 for each #1 ;return #1 where #3 is at least 2 ;return car makes that #4 produce ;return number of #5 for each #4 ;return #4 where #6 is higher than 3 ;return ids of #7 ;return makers of #7 ;return #8, #9","select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;","SELECT car_makers.id, car_makers.maker FROM car_names, car_makers, model_list WHERE model_list.model = car_names.model AND car_makers.id = model_list.maker AND car_makers.id IN ( SELECT car_makers.id FROM car_names, car_makers, model_list WHERE model_list.model = car_names.model AND car_makers.id = model_list.maker AND car_makers.id IN ( SELECT car_makers.id FROM model_list, car_makers WHERE car_makers.id = model_list.maker AND car_makers.id IN ( SELECT car_makers.id FROM car_makers ) GROUP BY car_makers.id HAVING COUNT(model_list.maker) >= 2 ) AND car_makers.id IN ( SELECT car_makers.id FROM car_makers ) GROUP BY car_makers.id HAVING COUNT(car_names.make) > 3 )","[(2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (8, 'nissan'), (19, 'toyota')]","[(4, 'gm'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (5, 'ford'), (4, 'gm'), (6, 'chrysler'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (6, 'chrysler'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (19, 'toyota'), (6, 'chrysler'), (5, 'ford'), (8, 'nissan'), (2, 'volkswagen'), (2, 'volkswagen'), (5, 'ford'), (4, 'gm'), (6, 'chrysler'), (8, 'nissan'), (4, 'gm'), (19, 'toyota'), (5, 'ford'), (2, 'volkswagen'), (6, 'chrysler'), (4, 'gm'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (5, 'ford'), (19, 'toyota'), (8, 'nissan'), (2, 'volkswagen'), (6, 'chrysler'), (19, 'toyota'), (6, 'chrysler'), (2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (2, 'volkswagen'), (5, 'ford'), (8, 'nissan'), (19, 'toyota'), (6, 'chrysler'), (19, 'toyota'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (6, 'chrysler'), (4, 'gm'), (6, 'chrysler'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (4, 'gm'), (19, 'toyota'), (4, 'gm'), (8, 'nissan'), (5, 'ford'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (2, 'volkswagen'), (6, 'chrysler'), (19, 'toyota'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (8, 'nissan'), (5, 'ford'), (19, 'toyota'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (2, 'volkswagen'), (2, 'volkswagen'), (19, 'toyota'), (8, 'nissan'), (6, 'chrysler'), (6, 'chrysler'), (4, 'gm'), (5, 'ford'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (19, 'toyota'), (5, 'ford'), (4, 'gm'), (19, 'toyota'), (2, 'volkswagen'), (8, 'nissan'), (5, 'ford'), (2, 'volkswagen'), (2, 'volkswagen'), (5, 'ford'), (6, 'chrysler'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (6, 'chrysler'), (4, 'gm'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (2, 'volkswagen'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (2, 'volkswagen'), (8, 'nissan'), (19, 'toyota'), (5, 'ford'), (6, 'chrysler'), (19, 'toyota'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (4, 'gm'), (6, 'chrysler'), (8, 'nissan'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (2, 'volkswagen'), (4, 'gm'), (19, 'toyota'), (5, 'ford'), (4, 'gm'), (6, 'chrysler'), (2, 'volkswagen'), (8, 'nissan'), (2, 'volkswagen'), (5, 'ford'), (8, 'nissan'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (5, 'ford'), (6, 'chrysler'), (4, 'gm')]",True
SPIDER_dev_176,car_1,What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?,"return car makers ;return models that #1 produce ;return number of #2 for each #1 ;return #1 where #3 is at least 2 ;return cars that #1 make ;return number of #5 for each #1 ;return #1 where #6 is higher than 3 ;return #1 of both #4 and #7 ;return ids of #8 ;return makers of #8 ;return #9, #10","SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;","SELECT car_makers.id, car_makers.maker FROM car_names, model_list, car_makers WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_makers.id IN ( SELECT DISTINCT car_makers.id FROM car_names, model_list, car_makers WHERE car_makers.id = model_list.maker AND model_list.model = car_names.model AND car_makers.id IN ( SELECT car_makers.id FROM car_makers ) GROUP BY car_makers.id HAVING COUNT(car_names.model) >= 2 AND COUNT(car_names.make) > 3 )","[(2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (8, 'nissan'), (19, 'toyota')]","[(4, 'gm'), (4, 'gm'), (6, 'chrysler'), (1, 'amc'), (5, 'ford'), (5, 'ford'), (4, 'gm'), (6, 'chrysler'), (4, 'gm'), (1, 'amc'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (1, 'amc'), (6, 'chrysler'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (19, 'toyota'), (6, 'chrysler'), (1, 'amc'), (5, 'ford'), (8, 'nissan'), (2, 'volkswagen'), (15, 'peugeaut'), (2, 'volkswagen'), (17, 'saab'), (1, 'amc'), (5, 'ford'), (4, 'gm'), (6, 'chrysler'), (8, 'nissan'), (4, 'gm'), (19, 'toyota'), (5, 'ford'), (2, 'volkswagen'), (1, 'amc'), (6, 'chrysler'), (4, 'gm'), (5, 'ford'), (1, 'amc'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (1, 'amc'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (5, 'ford'), (14, 'opel'), (15, 'peugeaut'), (9, 'fiat'), (19, 'toyota'), (8, 'nissan'), (2, 'volkswagen'), (6, 'chrysler'), (19, 'toyota'), (6, 'chrysler'), (2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (1, 'amc'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (12, 'mazda'), (1, 'amc'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (21, 'volvo'), (2, 'volkswagen'), (15, 'peugeaut'), (16, 'renault'), (5, 'ford'), (8, 'nissan'), (19, 'toyota'), (6, 'chrysler'), (19, 'toyota'), (4, 'gm'), (1, 'amc'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (6, 'chrysler'), (4, 'gm'), (1, 'amc'), (6, 'chrysler'), (4, 'gm'), (1, 'amc'), (5, 'ford'), (6, 'chrysler'), (2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (4, 'gm'), (1, 'amc'), (19, 'toyota'), (4, 'gm'), (8, 'nissan'), (12, 'mazda'), (5, 'ford'), (5, 'ford'), (9, 'fiat'), (4, 'gm'), (4, 'gm'), (9, 'fiat'), (14, 'opel'), (2, 'volkswagen'), (21, 'volvo'), (6, 'chrysler'), (17, 'saab'), (19, 'toyota'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (1, 'amc'), (4, 'gm'), (8, 'nissan'), (5, 'ford'), (19, 'toyota'), (4, 'gm'), (4, 'gm'), (1, 'amc'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (1, 'amc'), (2, 'volkswagen'), (2, 'volkswagen'), (14, 'opel'), (19, 'toyota'), (8, 'nissan'), (6, 'chrysler'), (9, 'fiat'), (9, 'fiat'), (11, 'honda'), (18, 'subaru'), (9, 'fiat'), (6, 'chrysler'), (4, 'gm'), (5, 'ford'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (4, 'gm'), (4, 'gm'), (1, 'amc'), (6, 'chrysler'), (4, 'gm'), (4, 'gm'), (5, 'ford'), (19, 'toyota'), (5, 'ford'), (1, 'amc'), (4, 'gm'), (19, 'toyota'), (2, 'volkswagen'), (8, 'nissan'), (5, 'ford'), (2, 'volkswagen'), (1, 'amc'), (2, 'volkswagen'), (15, 'peugeaut'), (21, 'volvo'), (17, 'saab'), (11, 'honda'), (9, 'fiat'), (14, 'opel'), (5, 'ford'), (6, 'chrysler'), (16, 'renault'), (4, 'gm'), (6, 'chrysler'), (1, 'amc'), (5, 'ford'), (6, 'chrysler'), (4, 'gm'), (5, 'ford'), (1, 'amc'), (4, 'gm')]",False
SPIDER_dev_177,car_1,What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?,"return countries ;return car makers of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 3 ;return models of #1 ;return #1 where #5 is 'fiat ;return #4, #6 ;return ids of #7 ;return names of #7 ;return #8, #9","SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';","SELECT countries.countryid, countries.countryname FROM countries, car_makers, model_list WHERE model_list.maker = car_makers.id AND car_makers.country = countries.countryid AND countries.countryid IN ( SELECT countries.countryid FROM countries, car_makers, model_list WHERE model_list.maker = car_makers.id AND car_makers.country = countries.countryid AND countries.countryid IN ( SELECT countries.countryid FROM countries ) AND model_list.model = 'fiat' GROUP BY countries.countryid HAVING COUNT(car_makers.id) > 3 )","[(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]",[],False
SPIDER_dev_178,car_1,What are the ids and names of all countries that either have more than 3 car makers or produce fiats?,"return countries ;return car makers of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 3 ;return countries that produce fiats ;return number of #5 for each #1 ;return #1 where #6 is higher than 3 ;return #4 or #7 ;return ids of #8 ;return names of #8 ;return #9, #10","select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';","SELECT countries.countryid, countries.countryname FROM countries, car_makers, model_list WHERE model_list.maker = car_makers.id AND car_makers.country = countries.countryid AND countries.countryid IN ( SELECT countries.countryid FROM countries, car_makers, model_list WHERE model_list.maker = car_makers.id AND car_makers.country = countries.countryid AND countries.countryid IN ( SELECT countries.countryid FROM countries ) AND model_list.model = 'fiat' GROUP BY countries.countryid HAVING COUNT(car_makers.id) > 3 AND COUNT(model_list.model) > 3 )","[(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]",[],False
SPIDER_dev_179,flight_2,"Which country does Airline ""JetBlue Airways"" belong to?",return airlines ;return #1 that is jetblue airways ;return country of #2,"SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",SELECT airlines.country FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines WHERE airlines.airline = 'JetBlue Airways' ),"[('USA',)]","[('USA',)]",True
SPIDER_dev_18,concert_singer,What is the name and capacity for the stadium with highest average attendance?,"return stadiums ;return attendances of #1 ;return average of #2 for each #1 ;return #1 where #3 is highest ;return name of #4 ;return capacity of #4 ;return #5, #6","SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) GROUP BY stadium.stadium_id ORDER BY AVG(stadium.highest) DESC LIMIT 1 )","[(""Stark's Park"", 10104)]","[(""Stark's Park"", 10104)]",True
SPIDER_dev_180,flight_2,What country is Jetblue Airways affiliated with?,return jetblue airways ;return affiliated countries of #1,"SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",SELECT airlines.country FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines WHERE airlines.airline = 'JetBlue Airways' ),"[('USA',)]","[('USA',)]",True
SPIDER_dev_181,flight_2,"What is the abbreviation of Airline ""JetBlue Airways""?",return jetblue airways ;return abbreviation of #1,"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",SELECT airlines.abbreviation FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines WHERE airlines.airline = 'JetBlue Airways' ),"[('JetBlue',)]","[('JetBlue',)]",True
SPIDER_dev_182,flight_2,Which abbreviation corresponds to Jetblue Airways?,return jetblue airways ;return abbreviation of #1,"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",SELECT airlines.abbreviation FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines WHERE airlines.airline = 'JetBlue Airways' ),"[('JetBlue',)]","[('JetBlue',)]",True
SPIDER_dev_183,flight_2,"List all airline names and their abbreviations in ""USA"".","return airlines ;return names of #1 ;return abbreviations of #1 ;return #2, #3 ;return #4 where #3 is usa","SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""","SELECT airlines.airline, airlines.abbreviation FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines ) AND airlines.country = 'USA'","[('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]","[('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]",True
SPIDER_dev_184,flight_2,What are the airline names and abbreviations for airlines in the USA?,"return airlines ;return #1 in the usa ;return airline names of #2 ;return abbreviations of #2 ;return #3, #4","SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""","SELECT airlines.airline, airlines.abbreviation FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines WHERE airlines.country = 'USA' )","[('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]","[('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]",True
SPIDER_dev_185,flight_2,List the airport code and name in the city of Anthony.,"return airports ;return cities of #1 ;return #1 where #2 is anthony ;return airport codes of #3 ;return names of #3 ;return #4, #5","SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  ""Anthony""","SELECT airports.airportcode, airports.airportname FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports ) AND airports.city = 'Anthony' )",[],[],True
SPIDER_dev_186,flight_2,Give the airport code and airport name corresonding to the city Anthony.,"return airports ;return cities of #1 ;return #1 where #2 is anthony ;return airport code of #3 ;return airport name of #3 ;return #4, #5","SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  ""Anthony""","SELECT airports.airportcode, airports.airportname FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports ) AND airports.city = 'Anthony' )",[],[],True
SPIDER_dev_187,flight_2,How many airlines do we have?,return airlines ;return number of #1,SELECT count(*) FROM AIRLINES,SELECT COUNT(airlines.airline) FROM airlines,"[(12,)]","[(12,)]",True
SPIDER_dev_189,flight_2,How many airports do we have?,return airports ;return number of #1,SELECT count(*) FROM AIRPORTS,SELECT COUNT(airports.airportcode) FROM airports,"[(100,)]","[(100,)]",True
SPIDER_dev_19,concert_singer,What is the name and capacity for the stadium with the highest average attendance?,"return stadiums ;return attendances of #1 ;return average of #2 for each #1 ;return #1 where #3 is highest ;return name of #4 ;return capacity of #4 ;return #5, #6","SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) GROUP BY stadium.stadium_id ORDER BY AVG(stadium.highest) DESC LIMIT 1 )","[(""Stark's Park"", 10104)]","[(""Stark's Park"", 10104)]",True
SPIDER_dev_190,flight_2,Return the number of  airports.,return airports ;return number of #1,SELECT count(*) FROM AIRPORTS,SELECT COUNT(airports.airportcode) FROM airports,"[(100,)]","[(100,)]",True
SPIDER_dev_192,flight_2,Return the number of flights.,return flights ;return number of #1,SELECT count(*) FROM FLIGHTS,SELECT COUNT(flights.airline) FROM flights,"[(1200,)]","[(1200,)]",True
SPIDER_dev_193,flight_2,Which airline has abbreviation 'UAL'?,return airlines ;return abbreviations of #1 ;return #1 where #2 is 'ual,"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""",SELECT airlines.airline FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines ) AND airlines.abbreviation = 'UAL',"[('United Airlines',)]","[('United Airlines',)]",True
SPIDER_dev_194,flight_2,Give the airline with abbreviation 'UAL'.,return airlines ;return abbreviations of #1 ;return #1 where #2 is 'ual,"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""",SELECT airlines.airline FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines ) AND airlines.abbreviation = 'UAL',"[('United Airlines',)]","[('United Airlines',)]",True
SPIDER_dev_195,flight_2,How many airlines are from USA?,return airlines ;return #1 from usa ;return number of #2,"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""",SELECT COUNT(airlines.airline) FROM airlines WHERE airlines.country = 'USA',"[(12,)]","[(12,)]",True
SPIDER_dev_196,flight_2,Return the number of airlines in the USA.,return airlines ;return #1 in the usa ;return number of #2,"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""",SELECT COUNT(airlines.airline) FROM airlines WHERE airlines.country = 'USA',"[(12,)]","[(12,)]",True
SPIDER_dev_197,flight_2,Which city and country is the Alton airport at?,"return the alton airport ;return city of #1 ;return country of #1 ;return #2, #3","SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  ""Alton""","SELECT airports.city, airports.country FROM airports WHERE airports.airportname IN ( SELECT airports.airportname FROM airports WHERE airports.airportname = 'Alton' )",[],[],True
SPIDER_dev_198,flight_2,Give the city and country for the Alton airport.,"return airports ;return #1 in alton ;return city of #2 ;return country of #2 ;return #3, #4","SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  ""Alton""","SELECT airports.city, airports.country FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports WHERE airports.airportname = 'Alton' )",[],[],True
SPIDER_dev_199,flight_2,What is the airport name for airport 'AKO'?,return airports ;return names of #1 ;return #2 where #1 is 'ako,"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""",SELECT airports.airportname FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports ) AND airports.airportcode = 'AKO',"[('Colorado Plains Regional Airport ',)]","[('Colorado Plains Regional Airport ',)]",True
SPIDER_dev_2,concert_singer,"Show name, country, age for all singers ordered by age from the oldest to the youngest.","return singers ;return names of #1 ;return countries of #1 ;return ages of #1 ;return #2, #3, #4 ;return #5 sorted by #4 from oldest to youngest","SELECT name ,  country ,  age FROM singer ORDER BY age DESC","SELECT singer.name, singer.country, singer.age FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ORDER BY singer.age ASC","[('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]","[('Tribal King', 'France', 25), ('Justin Brown', 'France', 29), ('Timbaland', 'United States', 32), ('Rose White', 'France', 41), ('John Nizinik', 'France', 43), ('Joe Sharp', 'Netherlands', 52)]",True
SPIDER_dev_20,concert_singer,How many concerts are there in year 2014 or 2015?,return concerts ;return years of #1 ;return #1 where #2 is 2014 ;return #1 where #2 is 2015 ;return #3 or #4 ;return number of #5,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,SELECT COUNT(concert.concert_id) FROM concert WHERE concert.concert_id IN ( SELECT concert.concert_id FROM concert ) AND ((concert.year = 2014) OR (concert.year = 2015)),"[(6,)]","[(6,)]",True
SPIDER_dev_200,flight_2,Return the name of the airport with code 'AKO'.,return airports ;return codes of #1 ;return #1 where #2 is 'ako ;return name of #3,"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""",SELECT airports.airportname FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports ) AND airports.airportcode = 'AKO' ),"[('Colorado Plains Regional Airport ',)]","[('Colorado Plains Regional Airport ',)]",True
SPIDER_dev_201,flight_2,What are airport names at City 'Aberdeen'?,return airports ;return cities of #1 ;return #1 where #2 is 'aberdeen ;return names of #3,"SELECT AirportName FROM AIRPORTS WHERE City = ""Aberdeen""",SELECT airports.airportname FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports ) AND airports.city = 'Aberdeen' ),[],[],True
SPIDER_dev_202,flight_2,What are the names of airports in Aberdeen?,return airports ;return #1 in aberdeen ;return names of #2,"SELECT AirportName FROM AIRPORTS WHERE City = ""Aberdeen""",SELECT airports.airportname FROM airports WHERE airports.airportcode IN ( SELECT airports.airportcode FROM airports WHERE airports.city = 'Aberdeen' ),[],[],True
SPIDER_dev_203,flight_2,How many flights depart from 'APG'?,return flights ;return #1 that depart from 'apg ;return number of #2,"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""",SELECT COUNT(flights.airline) FROM flights WHERE flights.sourceairport = 'APG',"[(0,)]","[(0,)]",True
SPIDER_dev_204,flight_2,Count the number of flights departing from 'APG'.,return flights ;return #1 departing from 'apg ;return number of #2,"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""",SELECT COUNT(flights.airline) FROM flights WHERE flights.sourceairport = 'APG',"[(0,)]","[(0,)]",True
SPIDER_dev_205,flight_2,How many flights have destination ATO?,return flights ;return destinations of #1 ;return #1 where #2 is ato ;return number of #3,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""",SELECT COUNT(flights.airline) FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights ) AND flights.destairport = 'ATO',"[(0,)]","[(0,)]",True
SPIDER_dev_206,flight_2,Count the number of flights into ATO.,return flights ;return #1 into ato ;return number of #2,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""",SELECT COUNT(flights.airline) FROM flights WHERE flights.destairport = 'ATO',"[(0,)]","[(0,)]",True
SPIDER_dev_207,flight_2,How many flights depart from City Aberdeen?,return flights ;return cities #1 depart from ;return #1 where #2 is aberdeen ;return number of #3,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","SELECT COUNT(flights.airline) FROM airports, flights WHERE airports.airportcode = flights.destairport AND flights.airline IN ( SELECT flights.airline FROM flights ) AND airports.city = 'Aberdeen'","[(0,)]","[(0,)]",True
SPIDER_dev_208,flight_2,Return the number of flights departing from Aberdeen.,return flights ;return #1 departing from aberdeen ;return number of #2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","SELECT COUNT(flights.airline) FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen'","[(0,)]","[(0,)]",True
SPIDER_dev_209,flight_2,How many flights arriving in Aberdeen city?,return flights ;return #1 arriving in aberdeen city ;return number of #2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","SELECT COUNT(flights.airline) FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen'","[(0,)]","[(0,)]",True
SPIDER_dev_21,concert_singer,How many concerts occurred in 2014 or 2015?,return concerts ;return #1 occurred in 2014 ;return #1 occurred in 2015 ;return number of #2 ;return number of #3 ;return sum of #4 and #5,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,SELECT (SELECT COUNT(concert.concert_id) FROM concert WHERE concert.year = 2014) + (SELECT COUNT(concert.concert_id) FROM concert WHERE concert.year = 2015),"[(6,)]","[(6,)]",True
SPIDER_dev_210,flight_2,Return the number of flights arriving in Aberdeen.,return flights ;return #1 arriving in aberdeen ;return number of #2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","SELECT COUNT(flights.airline) FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen'","[(0,)]","[(0,)]",True
SPIDER_dev_211,flight_2,How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?,return flights ;return #1 that depart from city 'aberdeen ;return #2 that have destination city 'ashley ;return number of #3,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""","SELECT COUNT(flights.airline) FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen' AND airports.city LIKE '%Ashley%'","[(0,)]","[(0,)]",True
SPIDER_dev_212,flight_2,How many flights fly from Aberdeen to Ashley?,return flights ;return #1 that fly from aberdeen ;return #2 to ashley ;return number of #3,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""","SELECT COUNT(flights.airline) FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Ashley' AND flights.airline IN ( SELECT flights.airline FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen' )","[(0,)]","[(0,)]",True
SPIDER_dev_213,flight_2,How many flights does airline 'JetBlue Airways' have?,return airlines ;return flights of #1 ;return #2 where #1 is 'jetblue airways ;return number of #3,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""",SELECT airlines.airline FROM airlines,"[(100,)]","[('United Airlines',), ('US Airways',), ('Delta Airlines',), ('Southwest Airlines',), ('American Airlines',), ('Northwest Airlines',), ('Continental Airlines',), ('JetBlue Airways',), ('Frontier Airlines',), ('AirTran Airways',), ('Allegiant Air',), ('Virgin America',)]",False
SPIDER_dev_214,flight_2,Give the number of Jetblue Airways flights.,return flights ;return #1 on jetblue airways ;return number of #2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""",SELECT flights.airline FROM flights,"[(100,)]","[(1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,)]",False
SPIDER_dev_215,flight_2,How many 'United Airlines' flights go to Airport 'ASY'?,return flights ;return #1 on 'united airlines ;return #2 that go to airport 'asy ;return number of #3,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""",SELECT flights.airline FROM flightsalse
SPIDER_dev_216,flight_2,Count the number of United Airlines flights arriving in ASY Airport.,return flights ;return #1 on united airlines ;return #2 arriving in asy airport ;return number of #3,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""",SELECT flights.airline FROM flightsalse
SPIDER_dev_217,flight_2,How many 'United Airlines' flights depart from Airport 'AHD'?,return flights ;return #1 on 'united airlines ;return #2 that depart from airport 'ahd ;return number of #3,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""",SELECT flights.airline FROM flightsalse
SPIDER_dev_218,flight_2,Return the number of United Airlines flights leaving from AHD Airport.,return flights ;return #1 on united airlines ;return #2 leaving from ahd airport ;return number of #3,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""",SELECT flights.airline FROM flightsalse
SPIDER_dev_219,flight_2,How many United Airlines flights go to City 'Aberdeen'?,return flights ;return #1 on united airlines ;return #2 to city 'aberdeen ;return number of #3,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""",SELECT flights.airline FROM flightsalse
SPIDER_dev_22,concert_singer,Show the stadium name and the number of concerts in each stadium.,"return stadiums ;return names of #1 ;return concerts in #1 ;return number of #3 for each #1 ;return #2, #4","SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","SELECT stadium.name, COUNT(concert.concert_id) FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.name IN ( SELECT stadium.name FROM stadium ) GROUP BY stadium.name","[(""Stark's Park"", 1), ('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1)]","[('Balmoor', 1), ('Glebe Park', 1), ('Recreation Park', 1), ('Somerset Park', 2), (""Stark's Park"", 1)]",True
SPIDER_dev_220,flight_2,Count the number of United Airlines flights that arrive in Aberdeen.,return flights ;return #1 on united airlines ;return #2 that arrive in aberdeen ;return number of #3,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""",SELECT flights.airline FROM flights,"[(0,)]","[(1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,)]",False
SPIDER_dev_221,flight_2,Which city has most number of arriving flights?,return cities ;return arriving flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"SELECT airports.city FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.city IN ( SELECT airports.city FROM airports ) GROUP BY airports.city ORDER BY COUNT(flights.airline) DESC LIMIT 1",[],[],True
SPIDER_dev_222,flight_2,Which city has the most frequent destination airport?,return city ;return destination airport of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"SELECT airports.city FROM airports, flights WHERE airports.airportcode = flights.sourceairport AND airports.city IN ( SELECT airports.city FROM airports ) GROUP BY airports.city ORDER BY COUNT(flights.sourceairport) DESC LIMIT 1",[],[],True
SPIDER_dev_223,flight_2,Which city has most number of departing flights?,return cities ;return departing flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"SELECT airports.city FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.city IN ( SELECT airports.city FROM airports ) GROUP BY airports.city ORDER BY COUNT(flights.airline) DESC LIMIT 1",[],[],True
SPIDER_dev_224,flight_2,Which city is the most frequent source airport?,return source airports ;return cities ;return number of #1 for each #2 ;return #2 where #3 is highest,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"SELECT airports.city FROM airports, flights WHERE flights.sourceairport = airports.airportcode GROUP BY airports.city ORDER BY COUNT(flights.sourceairport) DESC LIMIT 1",[],[],True
SPIDER_dev_225,flight_2,What is the code of airport that has the highest number of flights?,return airports ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return code of #4,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"SELECT airports.airportcode FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.airportcode IN ( SELECT airports.airportcode FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.airportcode IN ( SELECT airports.airportcode FROM airports ) GROUP BY airports.airportcode ORDER BY COUNT(flights.airline) DESC LIMIT 1 )",[],[],True
SPIDER_dev_226,flight_2,What is the airport code of the airport with the most flights?,return airports ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return airport code of #4,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"SELECT airports.airportcode FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.airportcode IN ( SELECT airports.airportcode FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.airportcode IN ( SELECT airports.airportcode FROM airports ) GROUP BY airports.airportcode ORDER BY COUNT(flights.airline) DESC LIMIT 1 )",[],[],True
SPIDER_dev_227,flight_2,What is the code of airport that has fewest number of flights?,return airports ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is lowest ;return code of #4,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,"SELECT airports.airportcode FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.airportcode IN ( SELECT airports.airportcode FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.airportcode IN ( SELECT airports.airportcode FROM airports ) GROUP BY airports.airportcode ORDER BY COUNT(flights.airline) ASC LIMIT 1 )",[],[],True
SPIDER_dev_228,flight_2,Give the code of the airport with the least flights.,return airports ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is lowest ;return code of #4,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,"SELECT airports.airportcode FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.airportcode IN ( SELECT airports.airportcode FROM airports, flights WHERE airports.airportcode = flights.destairport AND airports.airportcode IN ( SELECT airports.airportcode FROM airports ) GROUP BY airports.airportcode ORDER BY COUNT(flights.airline) ASC LIMIT 1 )",[],[],True
SPIDER_dev_229,flight_2,Which airline has most number of flights?,return airlines ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,SELECT airlines.airline FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines ) GROUP BY airlines.airline ORDER BY COUNT(airlines.airline) DESC LIMIT 1,"[('Virgin America',)]","[('Virgin America',)]",True
SPIDER_dev_23,concert_singer,"For each stadium, how many concerts play there?",return stadiums ;return concerts in #1 ;return number of #2 for each #1,"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","SELECT stadium.name, COUNT(concert.concert_id) FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.name IN ( SELECT stadium.name FROM stadium ) GROUP BY stadium.name","[(""Stark's Park"", 1), ('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1)]","[('Balmoor', 1), ('Glebe Park', 1), ('Recreation Park', 1), ('Somerset Park', 2), (""Stark's Park"", 1)]",True
SPIDER_dev_230,flight_2,What airline serves the most flights?,return airlines ;return flights #1 serves ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,SELECT airlines.airline FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines ) GROUP BY airlines.airline ORDER BY COUNT(airlines.airline) DESC LIMIT 1,"[('Virgin America',)]","[('Virgin America',)]",True
SPIDER_dev_231,flight_2,Find the abbreviation and country of the airline that has fewest number of flights?,"return airlines ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is lowest ;return abbreviation of #4 ;return country of #4 ;return #5, #6","SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1","SELECT airlines.abbreviation, airlines.country FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines WHERE airlines.airline IN ( SELECT airlines.airline FROM airlines ) GROUP BY airlines.airline ORDER BY COUNT(airlines.airline) ASC LIMIT 1 )","[('AirTran', 'USA')]","[('AirTran', 'USA')]",True
SPIDER_dev_232,flight_2,What is the abbreviation of the airilne has the fewest flights and what country is it in?,"return airilne ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is lowest ;return abbreviation of #4 ;return country #4 is in ;return #5, #6","SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",SELECT airlines.uid FROM airlines,"[('AirTran', 'USA')]","[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]",False
SPIDER_dev_233,flight_2,What are airlines that have some flight departing from airport 'AHD'?,return flights ;return airports of #1 ;return #1 where #2 is 'ahd ;return airlines that have #3,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""AHD""",SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights ) AND flights.sourceairport = 'AHD',[],[],True
SPIDER_dev_234,flight_2,Which airlines have a flight with source airport AHD?,return flights ;return source airports of #1 ;return #1 where #2 is ahd ;return airlines that have #3,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""AHD""",SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights ) AND flights.sourceairport = 'AHD',[],[],True
SPIDER_dev_235,flight_2,What are airlines that have flights arriving at airport 'AHD'?,return flights ;return airports of #1 ;return #1 where #2 is 'ahd ;return airlines of #3,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  ""AHD""",SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights ) AND flights.destairport = 'AHD' ),[],[],True
SPIDER_dev_236,flight_2,Which airlines have a flight with destination airport AHD?,return flights ;return destination airports of #1 ;return #1 where #2 is ahd ;return airlines that have #3,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  ""AHD""",SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights ) AND flights.destairport = 'AHD',[],[],True
SPIDER_dev_237,flight_2,Find all airlines that have flights from both airports 'APG' and 'CVO'.,return flights ;return #1 from airports 'apg ;return #1 from airport 'cvo ;return #1 from both #2 and #3 ;return airlines of #4,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG"" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO""",ERROR,[],ERROR,False
SPIDER_dev_238,flight_2,Which airlines have departing flights from both APG and CVO airports?,return airlines ;return departing flights of #1 ;return airports of #2 ;return #1 where #3 is apg ;return #1 where #3 is cvo ;return #1 of both #4 and #5,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG"" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO""",SELECT DISTINCT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights ) ) AND flights.sourceairport = 'APG' AND flights.airline IN ( SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights ) ) AND flights.sourceairport = 'CVO' ),[],[],True
SPIDER_dev_239,flight_2,Find all airlines that have flights from airport 'CVO' but not from 'APG'.,return flights ;return #1 from airport 'cvo ;return #1 from airport 'apg ;return #1 of both #2 and #3 ;return airlines of #4,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO"" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG""",SELECT DISTINCT flights.airline FROM flights WHERE flights.airline IN ( SELECT DISTINCT flights.airline FROM flights WHERE flights.sourceairport = 'CVO' AND flights.airline IN ( SELECT flights.airline FROM flights WHERE flights.sourceairport = 'APG' ) ),[],[],True
SPIDER_dev_24,concert_singer,Show the stadium name and capacity with most number of concerts in year 2014 or after.,"return stadiums ;return concerts of #1 ;return years of #2 ;return #1 where #3 is 2014 or after ;return number of #2 for each #1 ;return #1 where #4 is highest ;return name of #5 ;return capacity of #5 ;return #6, #7","SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1","SELECT stadium.stadium_id FROM concert, stadium WHERE concert.stadium_id = stadium.stadium_id AND concert.concert_id IN ( SELECT concert.concert_id FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) ) AND concert.year >= 2014 ORDER BY stadium.stadium_id DESC LIMIT 1","[('Somerset Park', 11998)]","[(10,)]",False
SPIDER_dev_240,flight_2,Which airlines have departures from CVO but not from APG airports?,return airlines ;return departures of #1 ;return airports of #2 ;return #1 where #3 is cvo ;return #1 where #3 is not apg ;return #1 in both #4 and #5,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""CVO"" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  ""APG""",SELECT DISTINCT flights.airline FROM flights WHERE flights.destairport IN ( SELECT flights.destairport FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights ) ) AND flights.sourceairport = 'CVO' AND flights.sourceairport != 'APG',[],[],True
SPIDER_dev_241,flight_2,Find all airlines that have at least 10 flights.,return airlines ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 10,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,SELECT airlines.airline FROM airlines,"[('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]","[('United Airlines',), ('US Airways',), ('Delta Airlines',), ('Southwest Airlines',), ('American Airlines',), ('Northwest Airlines',), ('Continental Airlines',), ('JetBlue Airways',), ('Frontier Airlines',), ('AirTran Airways',), ('Allegiant Air',), ('Virgin America',)]",True
SPIDER_dev_242,flight_2,Which airlines have at least 10 flights?,return airlines ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 10,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,SELECT airlines.airline FROM airlines,"[('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]","[('United Airlines',), ('US Airways',), ('Delta Airlines',), ('Southwest Airlines',), ('American Airlines',), ('Northwest Airlines',), ('Continental Airlines',), ('JetBlue Airways',), ('Frontier Airlines',), ('AirTran Airways',), ('Allegiant Air',), ('Virgin America',)]",True
SPIDER_dev_243,flight_2,Find all airlines that have fewer than 200 flights.,return airlines ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is lower than 200,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,SELECT airlines.airline FROM airlines,"[('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]","[('United Airlines',), ('US Airways',), ('Delta Airlines',), ('Southwest Airlines',), ('American Airlines',), ('Northwest Airlines',), ('Continental Airlines',), ('JetBlue Airways',), ('Frontier Airlines',), ('AirTran Airways',), ('Allegiant Air',), ('Virgin America',)]",True
SPIDER_dev_244,flight_2,Which airlines have less than 200 flights?,return airlines ;return flights of #1 ;return number of #2 for each #1 ;return #1 where #3 is lower than 200,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,SELECT airlines.airline FROM airlines,"[('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]","[('United Airlines',), ('US Airways',), ('Delta Airlines',), ('Southwest Airlines',), ('American Airlines',), ('Northwest Airlines',), ('Continental Airlines',), ('JetBlue Airways',), ('Frontier Airlines',), ('AirTran Airways',), ('Allegiant Air',), ('Virgin America',)]",True
SPIDER_dev_245,flight_2,"What are flight numbers of Airline ""United Airlines""?",return united airlines ;return flight numbers of #1,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""",SELECT airlines.airline FROM airlines WHERE airlines.airline = 'United Airlines',"[(28,), (29,), (44,), (45,), (54,), (55,), (90,), (91,), (108,), (109,), (142,), (143,), (148,), (149,), (198,), (199,), (226,), (227,), (276,), (277,), (308,), (309,), (326,), (327,), (370,), (371,), (414,), (415,), (424,), (425,), (470,), (471,), (520,), (521,), (556,), (557,), (560,), (561,), (604,), (605,), (608,), (609,), (626,), (627,), (658,), (659,), (708,), (709,), (744,), (745,), (754,), (755,), (786,), (787,), (810,), (811,), (828,), (829,), (878,), (879,), (888,), (889,), (900,), (901,), (924,), (925,), (946,), (947,), (996,), (997,), (1000,), (1001,), (1026,), (1027,), (1062,), (1063,), (1068,), (1069,), (1100,), (1101,), (1144,), (1145,), (1166,), (1167,), (1168,), (1169,), (1192,), (1193,), (1208,), (1209,), (1216,), (1217,), (1250,), (1251,), (1274,), (1275,), (1284,), (1285,), (1328,), (1329,)]","[('United Airlines',)]",False
SPIDER_dev_246,flight_2,Which flight numbers correspond to United Airlines flights?,return flights ;return #1 on united airlines ;return flight numbers of #2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""",SELECT flights.airline FROM flights,"[(28,), (29,), (44,), (45,), (54,), (55,), (90,), (91,), (108,), (109,), (142,), (143,), (148,), (149,), (198,), (199,), (226,), (227,), (276,), (277,), (308,), (309,), (326,), (327,), (370,), (371,), (414,), (415,), (424,), (425,), (470,), (471,), (520,), (521,), (556,), (557,), (560,), (561,), (604,), (605,), (608,), (609,), (626,), (627,), (658,), (659,), (708,), (709,), (744,), (745,), (754,), (755,), (786,), (787,), (810,), (811,), (828,), (829,), (878,), (879,), (888,), (889,), (900,), (901,), (924,), (925,), (946,), (947,), (996,), (997,), (1000,), (1001,), (1026,), (1027,), (1062,), (1063,), (1068,), (1069,), (1100,), (1101,), (1144,), (1145,), (1166,), (1167,), (1168,), (1169,), (1192,), (1193,), (1208,), (1209,), (1216,), (1217,), (1250,), (1251,), (1274,), (1275,), (1284,), (1285,), (1328,), (1329,)]","[(1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (1,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,), (2,)]",False
SPIDER_dev_247,flight_2,"What are flight numbers of flights departing from Airport ""APG""?",return flights ;return airport #1 are departing from ;return #1 where #2 is apg ;return flight numbers of #3,"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  ""APG""",SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights ) AND flights.sourceairport = 'APG' ),[],[],True
SPIDER_dev_248,flight_2,Give the flight numbers of flights leaving from APG.,return flights ;return #1 leaving from apg ;return flight numbers of #2,"SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  ""APG""",SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights WHERE flights.sourceairport = 'APG' ),[],[],True
SPIDER_dev_249,flight_2,"What are flight numbers of flights arriving at Airport ""APG""?",return flights ;return #1 arriving at airport apg ;return flight numbers of #2,"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  ""APG""",SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights WHERE flights.destairport = 'APG' ),[],[],True
SPIDER_dev_25,concert_singer,What is the name and capacity of the stadium  with the most concerts after 2013?,"return stadiums ;return concerts in #1 ;return #2 after 2013 ;return number of #3 for each #1 ;return #1 where #4 is highest ;return name of #5 ;return capacity of #5 ;return #6, #7","select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1","SELECT stadium.name, stadium.capacity FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) AND concert.year > 2013 GROUP BY stadium.stadium_id ORDER BY COUNT(concert.concert_id) DESC LIMIT 1 )","[('Somerset Park', 11998)]","[('Somerset Park', 11998), ('Somerset Park', 11998)]",True
SPIDER_dev_250,flight_2,Give the flight numbers of flights landing at APG.,return flights ;return #1 landing at apg ;return flight numbers of #2,"SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  ""APG""",SELECT flights.airline FROM flights WHERE flights.airline IN ( SELECT flights.airline FROM flights WHERE flights.destairport = 'APG' ),[],[],True
SPIDER_dev_251,flight_2,"What are flight numbers of flights departing from City ""Aberdeen ""?",return flights ;return cities #1 are departing from ;return #1 where #2 is abeyn ;return flight numbers of #3,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","SELECT flights.airline FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND flights.airline IN ( SELECT flights.airline FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND flights.airline IN ( SELECT flights.airline FROM flights ) AND airports.city = 'abeyn' )",[],[],True
SPIDER_dev_252,flight_2,Give the flight numbers of flights leaving from Aberdeen.,return flights ;return #1 leaving from aberdeen ;return flight numbers of #2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","SELECT flights.airline FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND flights.airline IN ( SELECT flights.airline FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen' )",[],[],True
SPIDER_dev_253,flight_2,"What are flight numbers of flights arriving at City ""Aberdeen""?",return flights ;return #1 arriving at city abdeen ;return flight numbers of #2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","SELECT flights.airline FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND flights.airline IN ( SELECT flights.airline FROM airports, flights WHERE flights.sourceairport = airports.airportcode )",[],[],True
SPIDER_dev_254,flight_2,Give the flight numbers of flights arriving in Aberdeen.,return flights ;return #1 arriving in aberdeen ;return flight numbers of #2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""","SELECT flights.airline FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND flights.airline IN ( SELECT flights.airline FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND airports.city = 'Aberdeen' )",[],[],True
SPIDER_dev_255,flight_2,Find the number of flights landing in the city of Aberdeen or Abilene.,return flights ;return cities #1 are landing in ;return #1 where #2 is aberdeen ;return #1 where #2 is abilene ;return #3 or #4 ;return number of #5,"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""","SELECT COUNT(flights.airline) FROM airports, flights WHERE airports.airportcode = flights.destairport AND flights.airline IN ( SELECT flights.airline FROM flights ) AND ((airports.city = 'Aberdeen') OR (airports.city = 'Abilene'))","[(0,)]","[(0,)]",True
SPIDER_dev_256,flight_2,How many flights land in Aberdeen or Abilene?,"return flights ;return #1 that land in aberdeen ;return #1 that land in abilene ;return #2, #3 ;return number of #4","SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""","SELECT COUNT(flights.airline) FROM airports, flights WHERE flights.sourceairport = airports.airportcode AND ((airports.city = 'Aberdeen') OR (airports.city = 'Abilene'))","[(0,)]","[(0,)]",True
SPIDER_dev_257,flight_2,Find the name of airports which do not have any flight in and out.,"return airports ;return flights in and out of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least one ;return #1 besides #4 ;return the names of #5 ;return #6, #7",SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),ERROR,"[('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',), ('Ainsworth ',), ('Akhiok SPB ',), ('Spb ',), ('Akiak ',), ('Colorado Plains Regional Airport ',), ('Akron/canton Regional ',), ('Fulton International ',), ('Akutan ',), ('Alakanuk ',), ('NAS ',), ('Holloman AFB ',), ('Municipal ',), ('Municipal ',), ('Albany NAS ',), ('Dougherty County ',), ('Albany International ',), ('Albany ',), ('Albert Lea ',), ('Albuquerque International ',), ('Aleknagik ',), ('Aleneva ',), ('Thomas C Russell Fld ',), ('Alexandria International ',), ('Esler Field ',), ('Alexandria ',), ('Alexandria Bay ',), ('Algona ',), ('International ',), ('George Downer ',), ('Alitak SPB ',), ('Allakaket ',), ('Alliance ',), ('Gratiot Community ',), ('Alpena County Regional ',), ('Alpine ',), ('Alton ',), ('Altus AFB ',), ('Municipal ',), ('Alyeska ',), ('Rick Husband Amarillo International ',), ('Tradewind ',), ('Ambler ',), ('Amchitka ',), ('Municipal ',), ('Ames ',), ('Zahns ',), ('Amook ',), ('Anacortes ',), ('USN Heliport ',), ('Orange County Steel Salvage Heliport ',), ('Anaktuvuk ',), ('Elmendorf Afb ',), ('Ted Stevens Anchorage International Airport ',), ('Merrill Field ',), ('Municipal ',), ('Anderson ',), ('Andrews ',), ('Angel Fire ',), ('Tri-State Steuben Cty ',), ('Angoon ',), ('Rollang Field ',), ('Aniak ',), ('Anita Bay ',), ('Municipal ',), ('Lee ',), ('Annette Island ',), ('Anniston Metropolitan ',), ('Ft Mcclellan Bus Trml ',), ('Reilly AHP ',), ('Anthony ',), ('Antlers ',), ('Anvik ',), ('Municipal ',), ('Apple Valley ',), ('Outagamie County ',), ('Municipal ',), ('Arcata ',), ('Arctic Village ',), ('Downtown ',), ('Ardmore Municipal Arpt ',), ('US Army Heliport ',), ('Artesia ',), ('Asbury Park ',), ('Ashland ',), ('Ashley ',), ('Aspen ',), ('Astoria ',), ('Athens ',), ('Ohio University ',), ('McMinn County ',)]",ERROR,False
SPIDER_dev_258,flight_2,Which airports do not have departing or arriving flights?,"return airports ;return flights of #1 ;return #1 where #2 is departing ;return #1 where #2 is arriving ;return #1 besides #3, #4",SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),"SELECT airports.airportcode FROM airports, flights WHERE airports.airportcode = flights.destairport","[('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',), ('Ainsworth ',), ('Akhiok SPB ',), ('Spb ',), ('Akiak ',), ('Colorado Plains Regional Airport ',), ('Akron/canton Regional ',), ('Fulton International ',), ('Akutan ',), ('Alakanuk ',), ('NAS ',), ('Holloman AFB ',), ('Municipal ',), ('Municipal ',), ('Albany NAS ',), ('Dougherty County ',), ('Albany International ',), ('Albany ',), ('Albert Lea ',), ('Albuquerque International ',), ('Aleknagik ',), ('Aleneva ',), ('Thomas C Russell Fld ',), ('Alexandria International ',), ('Esler Field ',), ('Alexandria ',), ('Alexandria Bay ',), ('Algona ',), ('International ',), ('George Downer ',), ('Alitak SPB ',), ('Allakaket ',), ('Alliance ',), ('Gratiot Community ',), ('Alpena County Regional ',), ('Alpine ',), ('Alton ',), ('Altus AFB ',), ('Municipal ',), ('Alyeska ',), ('Rick Husband Amarillo International ',), ('Tradewind ',), ('Ambler ',), ('Amchitka ',), ('Municipal ',), ('Ames ',), ('Zahns ',), ('Amook ',), ('Anacortes ',), ('USN Heliport ',), ('Orange County Steel Salvage Heliport ',), ('Anaktuvuk ',), ('Elmendorf Afb ',), ('Ted Stevens Anchorage International Airport ',), ('Merrill Field ',), ('Municipal ',), ('Anderson ',), ('Andrews ',), ('Angel Fire ',), ('Tri-State Steuben Cty ',), ('Angoon ',), ('Rollang Field ',), ('Aniak ',), ('Anita Bay ',), ('Municipal ',), ('Lee ',), ('Annette Island ',), ('Anniston Metropolitan ',), ('Ft Mcclellan Bus Trml ',), ('Reilly AHP ',), ('Anthony ',), ('Antlers ',), ('Anvik ',), ('Municipal ',), ('Apple Valley ',), ('Outagamie County ',), ('Municipal ',), ('Arcata ',), ('Arctic Village ',), ('Downtown ',), ('Ardmore Municipal Arpt ',), ('US Army Heliport ',), ('Artesia ',), ('Asbury Park ',), ('Ashland ',), ('Ashley ',), ('Aspen ',), ('Astoria ',), ('Athens ',), ('Ohio University ',), ('McMinn County ',)]",[],False
SPIDER_dev_26,concert_singer,Which year has most number of concerts?,return years ;return concerts in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,SELECT concert.year FROM concert WHERE concert.year IN ( SELECT concert.year FROM concert ) GROUP BY concert.year ORDER BY COUNT(concert.concert_id) DESC LIMIT 1,"[('2015',)]","[('2015',)]",True
SPIDER_dev_260,employee_hire_evaluation,Count the number of employees,return employees ;return number of #1,SELECT count(*) FROM employee,SELECT COUNT(employee.employee_id) FROM employee,"[(10,)]","[(10,)]",True
SPIDER_dev_261,employee_hire_evaluation,Sort employee names by their age in ascending order.,return employees ;return names of #1 ;return ages of #1 ;return #2 sorted by #3 in ascending order,SELECT name FROM employee ORDER BY age,SELECT employee.name FROM employee WHERE employee.employee_id IN ( SELECT employee.employee_id FROM employee ) ORDER BY employee.age ASC,"[('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]","[('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]",True
SPIDER_dev_262,employee_hire_evaluation,List the names of employees and sort in ascending order of age.,return employees ;return names of #1 ;return ages of #1 ;return #2 sorted by #3 in ascending order,SELECT name FROM employee ORDER BY age,SELECT employee.name FROM employee WHERE employee.employee_id IN ( SELECT employee.employee_id FROM employee ) ORDER BY employee.age ASC,"[('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]","[('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]",True
SPIDER_dev_263,employee_hire_evaluation,What is the number of employees from each city?,return cities ;return employees from #1 ;return number of #2 for each #1,"SELECT count(*) ,  city FROM employee GROUP BY city","SELECT employee.city, COUNT(employee.city) FROM employee WHERE employee.city IN ( SELECT employee.city FROM employee ) GROUP BY employee.city","[(3, 'Bath'), (3, 'Bristol'), (1, 'Leicester'), (1, 'Sale'), (2, 'Wasps')]","[('Bath', 3), ('Bristol', 3), ('Leicester', 1), ('Sale', 1), ('Wasps', 2)]",True
SPIDER_dev_264,employee_hire_evaluation,Count the number of employees for each city.,return cities ;return employees of #1 ;return number of #2 for each #1,"SELECT count(*) ,  city FROM employee GROUP BY city","SELECT employee.city, COUNT(employee.employee_id) FROM employee WHERE employee.city IN ( SELECT employee.city FROM employee ) GROUP BY employee.city","[(3, 'Bath'), (3, 'Bristol'), (1, 'Leicester'), (1, 'Sale'), (2, 'Wasps')]","[('Bath', 3), ('Bristol', 3), ('Leicester', 1), ('Sale', 1), ('Wasps', 2)]",True
SPIDER_dev_265,employee_hire_evaluation,Which cities do more than one employee under age 30 come from?,return cities ;return employees of #1 ;return ages of #2 ;return #2 where #3 is lower than 30 ;return number of #4 for each #1 ;return #1 where #5 is higher than one,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,SELECT employee.city FROM employee WHERE employee.employee_id IN ( SELECT employee.employee_id FROM employee WHERE employee.city IN ( SELECT employee.city FROM employee ) ) AND employee.city IN ( SELECT employee.city FROM employee ) AND employee.age < 30 GROUP BY employee.city HAVING COUNT(employee.employee_id) > 1,"[('Bath',)]","[('Bath',)]",True
SPIDER_dev_266,employee_hire_evaluation,Find the cities that have more than one employee under age 30.,return cities ;return employees of #1 ;return ages of #2 ;return #2 where #3 is under 30 ;return number of #4 for each #1 ;return #1 where #5 is higher than one,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,SELECT employee.city FROM employee WHERE employee.employee_id IN ( SELECT employee.employee_id FROM employee WHERE employee.city IN ( SELECT employee.city FROM employee ) ) AND employee.city IN ( SELECT employee.city FROM employee ) AND employee.age < 30 GROUP BY employee.city HAVING COUNT(employee.employee_id) > 1,"[('Bath',)]","[('Bath',)]",True
SPIDER_dev_267,employee_hire_evaluation,Find the number of shops in each location.,return locations ;return shops in #1 ;return number of #2 for each #1,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","SELECT shop.location, COUNT(shop.shop_id) FROM shop WHERE shop.location IN ( SELECT shop.location FROM shop ) GROUP BY shop.location","[(1, 'Espoo'), (1, 'Helsinki'), (1, 'Jakobstad'), (1, 'Kotka'), (1, 'Kuopio'), (1, 'Lahti'), (1, 'Mariehamn'), (1, 'Turku'), (1, 'Valkeakoski')]","[('Espoo', 1), ('Helsinki', 1), ('Jakobstad', 1), ('Kotka', 1), ('Kuopio', 1), ('Lahti', 1), ('Mariehamn', 1), ('Turku', 1), ('Valkeakoski', 1)]",True
SPIDER_dev_268,employee_hire_evaluation,How many shops are there in each location?,return locations ;return shops in #1 ;return number of #2 for each #1,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","SELECT shop.location, COUNT(shop.shop_id) FROM shop WHERE shop.location IN ( SELECT shop.location FROM shop ) GROUP BY shop.location","[(1, 'Espoo'), (1, 'Helsinki'), (1, 'Jakobstad'), (1, 'Kotka'), (1, 'Kuopio'), (1, 'Lahti'), (1, 'Mariehamn'), (1, 'Turku'), (1, 'Valkeakoski')]","[('Espoo', 1), ('Helsinki', 1), ('Jakobstad', 1), ('Kotka', 1), ('Kuopio', 1), ('Lahti', 1), ('Mariehamn', 1), ('Turku', 1), ('Valkeakoski', 1)]",True
SPIDER_dev_269,employee_hire_evaluation,Find the manager name and district of the shop whose number of products is the largest.,"return shops ;return products of #1 ;return number of #2 for each #1 ;return #1 where #3 is largest ;return manager name of #4 ;return district of #4 ;return #5, #6","SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products IN ( SELECT shop.number_products FROM shop WHERE shop.number_products IN ( SELECT shop.number_products FROM shop ) GROUP BY shop.number_products ORDER BY COUNT(shop.number_products) DESC LIMIT 1 )","[('Ilkka Mäkelä', 'Lahden Stadion')]","[('Ilkka Mäkelä', 'Lahden Stadion')]",True
SPIDER_dev_27,concert_singer,What is the year that had the most concerts?,return years ;return concerts in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,SELECT concert.year FROM concert WHERE concert.year IN ( SELECT concert.year FROM concert ) GROUP BY concert.year ORDER BY COUNT(concert.concert_id) DESC LIMIT 1,"[('2015',)]","[('2015',)]",True
SPIDER_dev_270,employee_hire_evaluation,What are the manager name and district of the shop that sells the largest number of products?,"return shops ;return products #1 sell ;return number of #2 for each #1 ;return #1 where #3 is highest ;return manager of #4 ;return name of #5 ;return district of #4 ;return #6, #7","SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","SELECT shop.manager_name, shop.district FROM shop WHERE shop.manager_name IN ( SELECT shop.manager_name FROM shop WHERE shop.number_products IN ( SELECT shop.number_products FROM shop WHERE shop.number_products IN ( SELECT shop.number_products FROM shop ) GROUP BY shop.number_products ORDER BY COUNT(shop.number_products) DESC LIMIT 1 ) ) AND shop.number_products IN ( SELECT shop.number_products FROM shop WHERE shop.number_products IN ( SELECT shop.number_products FROM shop ) GROUP BY shop.number_products ORDER BY COUNT(shop.number_products) DESC LIMIT 1 )","[('Ilkka Mäkelä', 'Lahden Stadion')]","[('Ilkka Mäkelä', 'Lahden Stadion')]",True
SPIDER_dev_271,employee_hire_evaluation,find the minimum and maximum number of products of all stores.,"return stores ;return products of #1 ;return number of #2 ;return minimum of #3 ;return maximum of #3 ;return #4, #5","SELECT min(Number_products) ,  max(Number_products) FROM shop","SELECT MIN(shop.number_products), MAX(shop.number_products) FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop )","[(1600, 15000)]","[(1600, 15000)]",True
SPIDER_dev_272,employee_hire_evaluation,What are the minimum and maximum number of products across all the shops?,"return shops ;return products of #1 ;return number of #2 ;return minimum of #3 ;return maximum of #3 ;return #4, #5","SELECT min(Number_products) ,  max(Number_products) FROM shop","SELECT MIN(shop.number_products), MAX(shop.number_products) FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop )","[(1600, 15000)]","[(1600, 15000)]",True
SPIDER_dev_273,employee_hire_evaluation,"Return the name, location and district of all shops in descending order of number of products.","return shops ;return names of #1 ;return locations of #1 ;return districts of #1 ;return products of #1 ;return number of #4 for each #1 ;return #2, #3, #5 ;return #7 sorted by #6 in descending order","SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","SELECT shop.name, shop.location, shop.district FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop ) ORDER BY shop.district DESC","[('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]","[('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('FC Lahti', 'Lahti', 'Lahden Stadion'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena')]",True
SPIDER_dev_274,employee_hire_evaluation,"Sort all the shops by number products in descending order, and return the name, location and district of each shop.","return shops ;return products of #1 ;return number of #2 for each #1 ;return names of #1 ;return locations of #1 ;return districts of #1 ;return #4, #5, #6 ;return #7 sorted by #3 in descending order","SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","SELECT shop.name, shop.location, shop.district FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop ) ORDER BY shop.number_products DESC","[('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]","[('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]",True
SPIDER_dev_275,employee_hire_evaluation,Find the names of stores whose number products is more than the average number of products.,return stores ;return products of #1 ;return number of #2 for each #1 ;return average of #3 ;return #1 where #3 is higher than #4 ;return names of #5,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),SELECT shop.name FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop ) AND shop.number_products > ( SELECT AVG(shop.number_products) FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop ) ) ),"[('HJK',), ('FC Inter',), ('FC Lahti',)]","[('HJK',), ('FC Inter',), ('FC Lahti',)]",True
SPIDER_dev_276,employee_hire_evaluation,Which shops' number products is above the average? Give me the shop names.,return shops ;return number of products of #1 ;return average of #2 ;return #1 where #2 is higher than #3 ;return names of #4,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),SELECT shop.name FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop ) AND shop.number_products > ( SELECT AVG(shop.number_products) FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop ) ) ),"[('HJK',), ('FC Inter',), ('FC Lahti',)]","[('HJK',), ('FC Inter',), ('FC Lahti',)]",True
SPIDER_dev_277,employee_hire_evaluation,find the name of employee who was awarded the most times in the evaluation.,return employees ;return times awarded in the evaluation of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,"SELECT employee.name FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND employee.employee_id IN ( SELECT employee.employee_id FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND employee.employee_id IN ( SELECT employee.employee_id FROM employee ) GROUP BY employee.employee_id ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1 )","[('George Chuter',)]","[('George Chuter',), ('George Chuter',)]",True
SPIDER_dev_278,employee_hire_evaluation,Which employee received the most awards in evaluations? Give me the employee name.,return employees ;return evaluations of #1 ;return awards received in #2 ;return number of #3 for each #1 ;return #1 where #4 is highest ;return employee name of #5,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,"SELECT employee.name FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND employee.employee_id IN ( SELECT employee.employee_id FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND evaluation.employee_id IN ( SELECT evaluation.employee_id FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND employee.employee_id IN ( SELECT employee.employee_id FROM employee ) ) GROUP BY employee.employee_id ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1 )","[('George Chuter',)]","[('George Chuter',), ('George Chuter',)]",True
SPIDER_dev_279,employee_hire_evaluation,Find the name of the employee who got the highest one time bonus.,return employees ;return one time bonuses of #1 ;return #1 where #2 is highest ;return name of #3,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"SELECT employee.name FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND employee.employee_id IN ( SELECT employee.employee_id FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND employee.employee_id IN ( SELECT employee.employee_id FROM employee ) ORDER BY evaluation.bonus DESC LIMIT 1 )","[('Louis Deacon',)]","[('Louis Deacon',)]",True
SPIDER_dev_28,concert_singer,Show the stadium names without any concert.,return stadiums ;return concerts ;return #1 without #2 ;return names of #3,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),SELECT stadium.name FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ),"[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]","[(""Stark's Park"",), ('Somerset Park',), ('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',), ('Recreation Park',), ('Balmoor',), ('Glebe Park',)]",False
SPIDER_dev_280,employee_hire_evaluation,Which employee received the biggest bonus? Give me the employee name.,return employees ;return bonuses of #1 ;return #1 where #2 is biggest ;return employee name of #3,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"SELECT employee.name FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND employee.employee_id IN ( SELECT employee.employee_id FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND employee.employee_id IN ( SELECT employee.employee_id FROM employee ) ORDER BY evaluation.bonus DESC LIMIT 1 )","[('Louis Deacon',)]","[('Louis Deacon',)]",True
SPIDER_dev_281,employee_hire_evaluation,Find the names of employees who never won any award in the evaluation.,return employees ;return #1 who won awards in the evaluation ;return #1 besides #2 ;return names of #3,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),"SELECT employee.name FROM employee WHERE employee.employee_id IN ( SELECT employee.employee_id FROM employee WHERE employee.employee_id NOT IN ( SELECT employee.employee_id FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id ) )","[('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]","[('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]",True
SPIDER_dev_282,employee_hire_evaluation,What are the names of the employees who never received any evaluation?,return employees ;return #1 who never received any evaluation ;return names of #2,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),"SELECT employee.name FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id AND employee.employee_id IN ( SELECT employee.employee_id FROM employee, evaluation WHERE employee.employee_id = evaluation.employee_id )","[('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]","[('George Chuter',), ('George Chuter',), ('Louis Deacon',), ('Lee Mears',), ('Jason Hobson',), ('Matt Stevens',)]",False
SPIDER_dev_283,employee_hire_evaluation,What is the name of the shop that is hiring the largest number of employees?,return shops ;return employees of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,"SELECT shop.name FROM shop, employee, hiring WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id AND shop.shop_id IN ( SELECT shop.shop_id FROM shop, employee, hiring WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id AND shop.shop_id IN ( SELECT shop.shop_id FROM shop ) GROUP BY shop.shop_id ORDER BY COUNT(employee.employee_id) DESC LIMIT 1 )","[('FC Haka',)]","[('FC Haka',), ('FC Haka',)]",True
SPIDER_dev_284,employee_hire_evaluation,Which shop has the most employees? Give me the shop name.,return shops ;return employees of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,"SELECT shop.name FROM shop, employee, hiring WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id AND shop.shop_id IN ( SELECT shop.shop_id FROM shop, employee, hiring WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id AND shop.shop_id IN ( SELECT shop.shop_id FROM shop ) GROUP BY shop.shop_id ORDER BY COUNT(employee.employee_id) DESC LIMIT 1 )","[('FC Haka',)]","[('FC Haka',), ('FC Haka',)]",True
SPIDER_dev_285,employee_hire_evaluation,Find the name of the shops that do not hire any employee.,return shops ;return #1 that do not hire employees ;return name of #2,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"SELECT shop.name FROM shop, hiring WHERE shop.shop_id = hiring.shop_id AND shop.shop_id IN ( SELECT shop.shop_id FROM shop, hiring WHERE shop.shop_id = hiring.shop_id )","[('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]","[('FC Haka',), ('FC Haka',), ('FC Lahti',), ('FC Inter',), ('FF Jaro',), ('HJK',), ('FC KooTeePee',)]",False
SPIDER_dev_286,employee_hire_evaluation,Which shops run with no employees? Find the shop names,return shops ;return #1 that run with employees ;return #1 besides #2 ;return names of #3,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"SELECT shop.name FROM shop WHERE shop.shop_id IN ( SELECT shop.shop_id FROM shop WHERE shop.shop_id NOT IN ( SELECT shop.shop_id FROM shop, employee, hiring WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id ) )","[('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]","[('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]",True
SPIDER_dev_287,employee_hire_evaluation,Find the number of employees hired in each shop; show the shop name as well.,"return shops ;return employees hired in #1 ;return number of #2 for each #1 ;return shop names of #1 ;return #3, #4","SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","SELECT shop.name, COUNT(employee.employee_id) FROM shop, employee, hiring WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id AND shop.name IN ( SELECT shop.name FROM shop ) GROUP BY shop.name","[(2, 'FC Haka'), (1, 'FC Inter'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'FF Jaro'), (1, 'HJK')]","[('FC Haka', 2), ('FC Inter', 1), ('FC KooTeePee', 1), ('FC Lahti', 1), ('FF Jaro', 1), ('HJK', 1)]",True
SPIDER_dev_288,employee_hire_evaluation,"For each shop, return the number of employees working there and the name of the shop.","return shops ;return employees working in #1 ;return number of #2 for each #1 ;return names of #1 ;return #3, #4","SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","SELECT shop.name, COUNT(employee.employee_id) FROM shop, employee, hiring WHERE shop.shop_id = hiring.shop_id AND hiring.employee_id = employee.employee_id AND shop.name IN ( SELECT shop.name FROM shop ) GROUP BY shop.name","[(2, 'FC Haka'), (1, 'FC Inter'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'FF Jaro'), (1, 'HJK')]","[('FC Haka', 2), ('FC Inter', 1), ('FC KooTeePee', 1), ('FC Lahti', 1), ('FF Jaro', 1), ('HJK', 1)]",True
SPIDER_dev_289,employee_hire_evaluation,What is total bonus given in all evaluations?,return evaluations ;return bonuses given in #1 ;return sum of #2,SELECT sum(bonus) FROM evaluation,SELECT SUM(evaluation.bonus) FROM evaluation WHERE evaluation.employee_id IN ( SELECT evaluation.employee_id FROM evaluation ),"[(19500.0,)]","[(19500.0,)]",True
SPIDER_dev_29,concert_singer,What are the names of the stadiums without any concerts?,return stadiums ;return #1 without concerts ;return names of #2,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"SELECT stadium.name FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id )","[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]","[(""Stark's Park"",), ('Somerset Park',), ('Somerset Park',), ('Glebe Park',), ('Balmoor',), ('Recreation Park',)]",False
SPIDER_dev_290,employee_hire_evaluation,Find the total amount of bonus given in all the evaluations.,return evaluations ;return bonuses given in #1 ;return amounts of #2 ;return sum of #3,SELECT sum(bonus) FROM evaluation,SELECT SUM(evaluation.bonus) FROM evaluation WHERE evaluation.bonus IN ( SELECT evaluation.bonus FROM evaluation WHERE evaluation.employee_id IN ( SELECT evaluation.employee_id FROM evaluation ) ),"[(19500.0,)]","[(19500.0,)]",True
SPIDER_dev_291,employee_hire_evaluation,Give me all the information about hiring.,return hiring ;return information about #1,SELECT * FROM hiring,SELECT * FROM hiring,"[(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]","[(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]",True
SPIDER_dev_292,employee_hire_evaluation,What is all the information about hiring?,return hiring ;return all information about #1,SELECT * FROM hiring,SELECT * FROM hiring,"[(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]","[(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]",True
SPIDER_dev_293,employee_hire_evaluation,Which district has both stores with less than 3000 products and stores with more than 10000 products?,return districts ;return stores of #1 ;return products of #2 ;return number of #3 for each #2 ;return #1 where #4 is lower than 3000 ;return #1 where #4 is higher than 10000 ;return #1 in both #5 and #6,SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,SELECT DISTINCT shop.district FROM shop WHERE shop.district IN ( SELECT shop.district FROM shop WHERE shop.district IN ( SELECT shop.district FROM shop ) ) AND shop.district IN ( SELECT shop.district FROM shop ) AND shop.district IN ( SELECT shop.district FROM shop WHERE shop.district IN ( SELECT shop.district FROM shop WHERE shop.district IN ( SELECT shop.district FROM shop ) ) AND shop.district IN ( SELECT shop.district FROM shop ) GROUP BY shop.district HAVING COUNT(shop.number_products) < 3000 AND COUNT(shop.number_products) > 10000 ) GROUP BY shop.district HAVING COUNT(shop.number_products) < 3000 AND COUNT(shop.number_products) > 10000,[],[],True
SPIDER_dev_294,employee_hire_evaluation,Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.,return districts ;return shops in #1 ;return products #2 are selling ;return number of #3 for each #2 ;return #1 where #4 is lower than 3000 ;return #1 where #4 is higher than 10000 ;return #1 in both #5 and #6,SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,SELECT DISTINCT shop.district FROM shop WHERE shop.district IN ( SELECT shop.district FROM shop WHERE shop.district IN ( SELECT shop.district FROM shop ) ) AND shop.district IN ( SELECT shop.district FROM shop ) AND shop.district IN ( SELECT shop.district FROM shop WHERE shop.district IN ( SELECT shop.district FROM shop WHERE shop.district IN ( SELECT shop.district FROM shop ) ) AND shop.district IN ( SELECT shop.district FROM shop ) GROUP BY shop.district HAVING COUNT(shop.number_products) < 3000 AND COUNT(shop.number_products) > 10000 ) GROUP BY shop.district HAVING COUNT(shop.number_products) < 3000 AND COUNT(shop.number_products) > 10000,[],[],True
SPIDER_dev_295,employee_hire_evaluation,How many different store locations are there?,return store locations ;return different #1 ;return number of #2,SELECT count(DISTINCT LOCATION) FROM shop,SELECT COUNT(DISTINCT shop.location) FROM shop,"[(9,)]","[(9,)]",True
SPIDER_dev_296,employee_hire_evaluation,Count the number of distinct store locations.,return store locations ;return #1 that are distinct ;return number of #2,SELECT count(DISTINCT LOCATION) FROM shop,SELECT COUNT(DISTINCT shop.location) FROM shop,"[(9,)]","[(9,)]",True
SPIDER_dev_297,cre_Doc_Template_Mgt,How many documents do we have?,return documents ;return number of #1,SELECT count(*) FROM Documents,SELECT COUNT(documents.document_id) FROM documents,"[(15,)]","[(15,)]",True
SPIDER_dev_299,cre_Doc_Template_Mgt,"List document IDs, document names, and document descriptions for all documents.","return documents ;return document ids of #1 ;return document names of #1 ;return document descriptions of #1 ;return #2, #3, #4","SELECT document_id ,  document_name ,  document_description FROM Documents","SELECT documents.document_id, documents.document_name, documents.document_description FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents )","[(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]","[(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]",True
SPIDER_dev_3,concert_singer,"What are the names, countries, and ages for every singer in descending order of age?","return singers ;return names of #1 ;return countries of #1 ;return ages of #1 ;return #2, #3, #4 ;return #5 sorted by #4 in descending order","SELECT name ,  country ,  age FROM singer ORDER BY age DESC","SELECT singer.name, singer.country, singer.age FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ORDER BY singer.age DESC","[('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]","[('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]",True
SPIDER_dev_30,concert_singer,Show countries where a singer above age 40 and a singer below 30 are from.,return singers ;return ages of #1 ;return #1 where #2 is higher than 40 ;return #1 where #2 is lower than 30 ;return countries of #3 ;return countries of #4 ;return countries in both #5 and #6,SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30,SELECT DISTINCT singer.country FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND singer.age > 40 ) AND singer.country IN ( SELECT singer.country FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND singer.age < 30 ) ),"[('France',)]","[('France',)]",True
SPIDER_dev_300,cre_Doc_Template_Mgt,"What are the ids, names, and descriptions for all documents?","return documents ;return ids of #1 ;return names of #1 ;return descriptions of #1 ;return #2, #3, #4","SELECT document_id ,  document_name ,  document_description FROM Documents","SELECT documents.document_id, documents.document_name, documents.document_description FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents )","[(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]","[(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]",True
SPIDER_dev_301,cre_Doc_Template_Mgt,What is the document name and template id for document with description with the letter 'w' in it?,"return documents ;return descriptions of #1 ;return #1 where #2 has the letter 'w ;return document name of #3 ;return template id of #3 ;return #4, #5","SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE ""%w%""","SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents ) AND documents.document_description LIKE '%W%' )","[('Data base', 11), ('How to read a book', 4)]","[('Data base', 11), ('How to read a book', 4)]",True
SPIDER_dev_302,cre_Doc_Template_Mgt,Return the names and template ids for documents that contain the letter w in their description.,"return documents ;return descriptions of #1 ;return #1 where #2 contain the letter w ;return names of #3 ;return template ids of #3 ;return #4, #5","SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE ""%w%""","SELECT documents.document_name, documents.template_id FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents ) AND documents.document_description LIKE '%W%' )","[('Data base', 11), ('How to read a book', 4)]","[('Data base', 11), ('How to read a book', 4)]",True
SPIDER_dev_303,cre_Doc_Template_Mgt,"What is the document id, template id and description for document named ""Robbin CV""?","return documents ;return #1 named robbin cv ;return document id of #2 ;return template id of #2 ;return description of #2 ;return #3, #4, #5","SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  ""Robbin CV""","SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_name = 'Robbin CV' )","[(76, 20, 'y')]","[(76, 20, 'y')]",True
SPIDER_dev_304,cre_Doc_Template_Mgt,"Return the document id, template id, and description for the document with the name Robbin CV.","return documents ;return names of #1 ;return #1 where #2 is robbin cv ;return document id of #3 ;return template id of #3 ;return description of #3 ;return #4, #5, #6","SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  ""Robbin CV""","SELECT documents.document_id, documents.template_id, documents.document_description FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents ) AND documents.document_name = 'Robbin CV' )","[(76, 20, 'y')]","[(76, 20, 'y')]",True
SPIDER_dev_305,cre_Doc_Template_Mgt,How many different templates do all document use?,return documents ;return templates of #1 ;return different #2 ;return number of #3,SELECT count(DISTINCT template_id) FROM Documents,"SELECT COUNT(DISTINCT templates.template_id) FROM templates, documents WHERE documents.template_id = templates.template_id AND documents.document_id IN ( SELECT documents.document_id FROM documents )","[(12,)]","[(12,)]",True
SPIDER_dev_306,cre_Doc_Template_Mgt,Count the number of different templates used for documents.,return templates ;return #1 used for documents ;return different #2 ;return count the number of #3,SELECT count(DISTINCT template_id) FROM Documents,"SELECT DISTINCT templates.version_number FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT DISTINCT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id )","[(12,)]","[(8,), (5,), (2,), (6,), (7,), (1,), (9,), (0,), (4,), (3,)]",False
SPIDER_dev_307,cre_Doc_Template_Mgt,How many documents are using the template with type code 'PPT'?,return documents ;return templates of #1 ;return type codes of #2 ;return #1 where #3 is 'ppt ;return number of #4,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',"SELECT COUNT(documents.document_id) FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates, documents WHERE documents.template_id = templates.template_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) ) AND templates.template_type_code = 'PPT'","[(3,)]","[(3,)]",True
SPIDER_dev_308,cre_Doc_Template_Mgt,Count the number of documents that use the PPT template type.,return documents ;return templates of #1 ;return #1 where #2 is ppt ;return number of #3,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',"SELECT COUNT(documents.document_id) FROM templates, documents WHERE templates.template_id = documents.template_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) AND templates.template_type_code = 'PPT'","[(3,)]","[(3,)]",True
SPIDER_dev_309,cre_Doc_Template_Mgt,Show all template ids and number of documents using each template.,"return templates ;return ids of #1 ;return documents using #1 ;return number of #3 for each #1 ;return #2, #4","SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","SELECT templates.template_id, COUNT(documents.document_id) FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates ) GROUP BY templates.template_id","[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]","[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]",True
SPIDER_dev_31,concert_singer,Show names for all stadiums except for stadiums having a concert in year 2014.,return stadiums ;return concerts of #1 ;return years of #2 ;return #1 where #3 is 2014 ;return #1 besides #4 ;return names of #5,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,"SELECT stadium.name FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium WHERE stadium.stadium_id NOT IN ( SELECT stadium.stadium_id FROM concert, stadium WHERE concert.stadium_id = stadium.stadium_id AND concert.concert_id IN ( SELECT concert.concert_id FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) ) AND concert.year = 2014 ) )","[('Balmoor',), ('Bayview Stadium',), ('Forthbank Stadium',), ('Gayfield Park',), ('Hampden Park',), ('Recreation Park',)]","[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',), ('Recreation Park',), ('Balmoor',)]",True
SPIDER_dev_310,cre_Doc_Template_Mgt,"What are all different template ids used for documents, and how many times were each of them used?","return documents ;return template ids used for #1 ;return different #2 ;return times #3 were used ;return number of #4 for each #3 ;return #3, #5","SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","SELECT documents.template_id, COUNT(templates.date_effective_from) FROM templates, documents WHERE documents.template_id = templates.template_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) AND documents.template_id IN ( SELECT DISTINCT documents.template_id FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents ) ) GROUP BY documents.template_id","[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]","[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]",True
SPIDER_dev_311,cre_Doc_Template_Mgt,What is the id and type code for the template used by the most documents?,"return templates ;return documents that used #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return id of #4 ;return type code of #4 ;return #5, #6","SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","SELECT templates.template_id, templates.template_type_code FROM templates, documents WHERE documents.template_id = templates.template_id AND documents.template_id IN ( SELECT documents.template_id FROM documents WHERE documents.template_id IN ( SELECT documents.template_id FROM documents ) GROUP BY documents.template_id ORDER BY COUNT(documents.other_details) DESC LIMIT 1 )","[(25, 'PP')]","[(25, 'PP'), (25, 'PP')]",True
SPIDER_dev_312,cre_Doc_Template_Mgt,Return the id and type code of the template that is used for the greatest number of documents.,"return templates ;return documents that #1 are used for ;return number of #2 for each #1 ;return #1 where #3 is highest ;return id of #4 ;return type code of #4 ;return #5, #6","SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","SELECT templates.template_id, templates.template_type_code FROM templates, documents WHERE documents.template_id = templates.template_id AND documents.template_id IN ( SELECT documents.template_id FROM documents WHERE documents.template_id IN ( SELECT documents.template_id FROM documents ) GROUP BY documents.template_id ORDER BY COUNT(documents.other_details) DESC LIMIT 1 )","[(25, 'PP')]","[(25, 'PP'), (25, 'PP')]",True
SPIDER_dev_313,cre_Doc_Template_Mgt,Show ids for all templates that are used by more than one document.,return templates ;return documents #1 are used by ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return ids of #4,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,"SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates ) GROUP BY templates.template_id HAVING COUNT(documents.document_name) > 1 )","[(11,), (14,), (25,)]","[(25,), (14,), (11,), (14,), (25,), (11,)]",True
SPIDER_dev_314,cre_Doc_Template_Mgt,What are the template ids of any templates used in more than a single document?,return templates ;return documents #1 are used in ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return template ids of #4,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,"SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates ) GROUP BY templates.template_id HAVING COUNT(documents.document_name) > 1 )","[(11,), (14,), (25,)]","[(25,), (14,), (11,), (14,), (25,), (11,)]",True
SPIDER_dev_315,cre_Doc_Template_Mgt,Show ids for all templates not used by any document.,return templates ;return #1 not used by any document ;return ids for #2,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,"SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id )","[(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]","[(7,), (25,), (6,), (20,), (14,), (11,), (10,), (14,), (1,), (22,), (21,), (4,), (8,), (25,), (11,)]",False
SPIDER_dev_316,cre_Doc_Template_Mgt,What are the ids for templates that are not used in any documents?,return templates ;return #1 not used in any documents ;return ids of #2,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,"SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id )","[(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]","[(7,), (25,), (6,), (20,), (14,), (11,), (10,), (14,), (1,), (22,), (21,), (4,), (8,), (25,), (11,)]",False
SPIDER_dev_317,cre_Doc_Template_Mgt,How many templates do we have?,return templates ;return number of #1,SELECT count(*) FROM Templates,SELECT COUNT(templates.template_id) FROM templates,"[(20,)]","[(20,)]",True
SPIDER_dev_318,cre_Doc_Template_Mgt,Count the number of templates.,return templates ;return number of #1,SELECT count(*) FROM Templates,SELECT COUNT(templates.template_id) FROM templates,"[(20,)]","[(20,)]",True
SPIDER_dev_319,cre_Doc_Template_Mgt,"Show template ids, version numbers, and template type codes for all templates.","return templates ;return template ids of #1 ;return version numbers of #1 ;return template type codes of #1 ;return #2, #3, #4","SELECT template_id ,  version_number ,  template_type_code FROM Templates","SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates )","[(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]","[(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]",True
SPIDER_dev_32,concert_singer,What are the names of all stadiums that did not have a concert in 2014?,return stadiums ;return concerts of #1 ;return #2 in 2014 ;return number of #3 for each #1 ;return #1 where #4 is at least one ;return #1 besides #5 ;return the names of #6,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,"SELECT stadium.name FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium WHERE stadium.stadium_id NOT IN ( SELECT stadium.stadium_id FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) AND concert.year = 2014 GROUP BY stadium.stadium_id HAVING COUNT(concert.concert_id) >= 1 ) )","[('Balmoor',), ('Bayview Stadium',), ('Forthbank Stadium',), ('Gayfield Park',), ('Hampden Park',), ('Recreation Park',)]","[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',), ('Recreation Park',), ('Balmoor',)]",True
SPIDER_dev_320,cre_Doc_Template_Mgt,"What are the ids, version numbers, and type codes for each template?","return templates ;return ids of #1 ;return version numbers of #1 ;return type codes of #1 ;return #2, #3, #4","SELECT template_id ,  version_number ,  template_type_code FROM Templates","SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates )","[(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]","[(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]",True
SPIDER_dev_321,cre_Doc_Template_Mgt,Show all distinct template type codes for all templates.,return templates ;return template type codes of #1 ;return distinct #2,SELECT DISTINCT template_type_code FROM Templates,SELECT DISTINCT templates.template_type_code FROM templates WHERE templates.template_id IN ( SELECT DISTINCT templates.template_id FROM templates ),"[('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]","[('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]",True
SPIDER_dev_322,cre_Doc_Template_Mgt,What are the different template type codes?,return templates ;return type of #1 ;return different codes of #2,SELECT DISTINCT template_type_code FROM Templates,"SELECT DISTINCT templates.template_type_code FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code AND ref_template_types.template_type_code IN ( SELECT DISTINCT ref_template_types.template_type_code FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code AND templates.template_id IN ( SELECT DISTINCT templates.template_id FROM templates ) )","[('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]","[('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]",True
SPIDER_dev_323,cre_Doc_Template_Mgt,What are the ids of templates with template type code PP or PPT?,return templates ;return template type codes of #1 ;return #1 where #2 is pp ;return #1 where #2 is ppt ;return #3 or #4 ;return ids of #5,"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""",SELECT templates.template_id FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PPT' AND templates.template_type_code = 'PP' AND templates.template_id IN ( SELECT templates.template_id FROM templates ) ),"[(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]",[],False
SPIDER_dev_324,cre_Doc_Template_Mgt,Return the ids of templates that have the code PP or PPT.,return templates ;return codes of #1 ;return #1 where #2 is pp ;return #1 where #2 is ppt ;return #3 or #4 ;return ids of #5,"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""",SELECT templates.template_id FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates WHERE templates.template_type_code = 'PPT' AND templates.template_type_code = 'PP' AND templates.template_id IN ( SELECT templates.template_id FROM templates ) ),"[(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]",[],False
SPIDER_dev_325,cre_Doc_Template_Mgt,How many templates have template type code CV?,return templates ;return template type codes of #1 ;return #1 where #2 is cv ;return number of #3,"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""",SELECT COUNT(templates.template_id) FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates ) AND templates.template_type_code = 'CV',"[(2,)]","[(2,)]",True
SPIDER_dev_326,cre_Doc_Template_Mgt,Count the number of templates of the type CV.,return templates ;return type of #1 ;return #1 where #2 is cv ;return number of #3,"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""",SELECT COUNT(templates.template_id) FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates ) AND templates.template_type_code = 'CV',"[(2,)]","[(2,)]",True
SPIDER_dev_327,cre_Doc_Template_Mgt,What is the version number and template type code for the template with version number later than 5?,"return templates ;return version numbers of #1 ;return #1 where #2 is higher than 5 ;return version number of #3 ;return template type code of #3 ;return #4, #5","SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5","SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates ) AND templates.version_number > 5 )","[(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]","[(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]",True
SPIDER_dev_328,cre_Doc_Template_Mgt,Return the version numbers and template type codes of templates with a version number greater than 5.,"return templates ;return version numbers of #1 ;return #1 where #2 is higher than 5 ;return version numbers of #3 ;return template type codes of #3 ;return #4, #5","SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5","SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates ) AND templates.version_number > 5 )","[(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]","[(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]",True
SPIDER_dev_329,cre_Doc_Template_Mgt,Show all template type codes and number of templates for each.,"return template type codes ;return templates of #1 ;return number of #2 for each #1 ;return #1, #3","SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","SELECT templates.template_type_code, COUNT(templates.template_id) FROM templates WHERE templates.template_type_code IN ( SELECT templates.template_type_code FROM templates ) GROUP BY templates.template_type_code","[('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]","[('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]",True
SPIDER_dev_33,concert_singer,Show the name and theme for all concerts and the number of singers in each concert.,"return concerts ;return names of #1 ;return themes of #1 ;return singers in #1 ;return number of #4 for each #1 ;return #2, #3, #5","SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id","SELECT concert.concert_name, concert.theme, COUNT(singer.singer_id) FROM concert, singer_in_concert, singer WHERE concert.concert_id = singer_in_concert.concert_id AND singer_in_concert.singer_id = singer.singer_id AND concert.theme IN ( SELECT concert.theme FROM concert ) GROUP BY concert.theme","[('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]","[('Home Visits', 'Bleeding Love', 1), ('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1), ('Week 1', 'Wide Awake', 1)]",True
SPIDER_dev_330,cre_Doc_Template_Mgt,"What are the different template type codes, and how many templates correspond to each?","return templates ;return different template type codes of #1 ;return templates that correspond to #2 ;return number of #3 for each #2 ;return #2, #4","SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","SELECT templates.template_type_code, COUNT(templates.date_effective_to) FROM templates WHERE templates.template_id IN ( SELECT DISTINCT templates.template_id FROM templates ) AND templates.template_type_code IN ( SELECT DISTINCT templates.template_type_code FROM templates WHERE templates.template_id IN ( SELECT DISTINCT templates.template_id FROM templates ) ) GROUP BY templates.template_type_code","[('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]","[('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]",True
SPIDER_dev_331,cre_Doc_Template_Mgt,Which template type code has most number of templates?,return template type codes ;return templates of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,SELECT templates.template_type_code FROM templates WHERE templates.template_type_code IN ( SELECT templates.template_type_code FROM templates ) GROUP BY templates.template_type_code ORDER BY COUNT(templates.template_id) DESC LIMIT 1,"[('PP',)]","[('PP',)]",True
SPIDER_dev_332,cre_Doc_Template_Mgt,Return the type code of the template type that the most templates belong to.,return template types ;return templates that belong to #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return type code of #4,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,SELECT templates.template_type_code FROM templates WHERE templates.template_type_code IN ( SELECT templates.template_type_code FROM templates WHERE templates.template_type_code IN ( SELECT templates.template_type_code FROM templates ) GROUP BY templates.template_type_code ORDER BY COUNT(templates.date_effective_to) DESC LIMIT 1 ),"[('PP',)]","[('PP',), ('PP',), ('PP',), ('PP',), ('PP',), ('PP',)]",True
SPIDER_dev_333,cre_Doc_Template_Mgt,Show all template type codes with less than three templates.,return templates ;return number of #1 for each type ;return #1 where #2 is lower than three ;return template type codes of #3,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,"SELECT COUNT(templates.template_id) FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code GROUP BY ref_template_types.template_type_code","[('CV',)]","[(3,), (6,), (2,), (6,), (3,)]",False
SPIDER_dev_334,cre_Doc_Template_Mgt,What are the codes of template types that have fewer than 3 templates?,return template types ;return templates of #1 ;return number of #2 for each #1 ;return #1 where #3 is lower than 3 ;return codes of #4,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,SELECT templates.template_type_code FROM templates WHERE templates.template_type_code IN ( SELECT templates.template_type_code FROM templates WHERE templates.template_type_code IN ( SELECT templates.template_type_code FROM templates ) GROUP BY templates.template_type_code HAVING COUNT(templates.template_id) < 3 ),"[('CV',)]","[('CV',), ('CV',)]",True
SPIDER_dev_335,cre_Doc_Template_Mgt,What the smallest version number and its template type code?,"return version numbers ;return #1 that is smallest ;return template type code of #2 ;return #2, #3","SELECT min(Version_Number) ,  template_type_code FROM Templates","SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number IN ( SELECT templates.version_number FROM templates ) AND templates.version_number IN ( SELECT templates.version_number FROM templates WHERE templates.version_number IN ( SELECT templates.version_number FROM templates ) ORDER BY templates.version_number ASC LIMIT 1 ) ORDER BY templates.version_number ASC LIMIT 1","[(0, 'PP')]","[(0, 'PP')]",True
SPIDER_dev_336,cre_Doc_Template_Mgt,"Return the lowest version number, along with its corresponding template type code.","return version numbers ;return lowest #1 ;return template type codes of #2 ;return #2, #3","SELECT min(Version_Number) ,  template_type_code FROM Templates","SELECT templates.version_number, templates.template_type_code FROM templates WHERE templates.version_number IN ( SELECT templates.version_number FROM templates ) AND templates.version_number IN ( SELECT templates.version_number FROM templates WHERE templates.version_number IN ( SELECT templates.version_number FROM templates ) ORDER BY templates.version_number ASC LIMIT 1 ) ORDER BY templates.version_number ASC LIMIT 1","[(0, 'PP')]","[(0, 'PP')]",True
SPIDER_dev_337,cre_Doc_Template_Mgt,"What is the template type code of the template used by document with the name ""Data base""?",return documents ;return names of #1 ;return #1 where #2 is base ;return templates used by #3 ;return template type code of #4,"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""","SELECT templates.template_type_code FROM templates, documents WHERE documents.template_id = templates.template_id AND templates.date_effective_from IN ( SELECT templates.date_effective_from FROM templates, documents WHERE documents.template_id = templates.template_id AND documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents ) AND documents.document_name = 'Data base' ) )","[('BK',)]","[('BK',), ('BK',)]",True
SPIDER_dev_338,cre_Doc_Template_Mgt,Return the template type code of the template that is used by a document named Data base.,return documents ;return #1 named data base ;return templates used by #2 ;return template type code of #3,"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""","SELECT templates.template_type_code FROM templates, documents WHERE documents.template_id = templates.template_id AND templates.date_effective_from IN ( SELECT templates.date_effective_from FROM templates, documents WHERE documents.template_id = templates.template_id AND documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_name = 'Data base' ) )","[('BK',)]","[('BK',), ('BK',)]",True
SPIDER_dev_339,cre_Doc_Template_Mgt,Show all document names using templates with template type code BK.,return templates ;return template type codes of #1 ;return #1 where #2 is bk ;return document names that use #3,"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""","SELECT documents.document_name FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates ) AND templates.template_type_code = 'BK' )","[('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]","[('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]",True
SPIDER_dev_34,concert_singer,"What are the names, themes, and number of singers for each and every concert?","return concerts ;return singers in #1 ;return names of #2 ;return themes of #2 ;return number of #3 for each #1 ;return #3, #4, #5","select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id","SELECT singer.name, concert.theme, concert.concert_id, COUNT(singer.name) FROM concert, singer_in_concert, singer WHERE concert.concert_id = singer_in_concert.concert_id AND singer_in_concert.singer_id = singer.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM concert, singer_in_concert, singer WHERE concert.concert_id = singer_in_concert.concert_id AND singer_in_concert.singer_id = singer.singer_id AND concert.concert_id IN ( SELECT concert.concert_id FROM concert ) ) GROUP BY concert.concert_id","[('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]","[('Timbaland', 'Free choice', 1, 3), ('Justin Brown', 'Free choice 2', 2, 2), ('John Nizinik', 'Bleeding Love', 3, 1), ('Rose White', 'Wide Awake', 4, 1), ('Tribal King', 'Happy Tonight', 5, 2), ('Timbaland', 'Party All Night', 6, 1)]",False
SPIDER_dev_340,cre_Doc_Template_Mgt,What are the names of documents that use templates with the code BK?,return documents ;return templates of #1 ;return codes of #2 ;return #1 where #3 is bk ;return names of #4,"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""","SELECT documents.document_name FROM templates, documents WHERE templates.template_id = documents.template_id AND documents.document_id IN ( SELECT documents.document_id FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates, documents WHERE documents.template_id = templates.template_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) ) AND templates.template_type_code = 'BK' )","[('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]","[('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]",True
SPIDER_dev_341,cre_Doc_Template_Mgt,Show all template type codes and the number of documents using each type.,"return template type codes ;return documents using #1 ;return number of #2 for each #1 ;return #1, #3","SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","SELECT templates.template_type_code, COUNT(documents.document_id) FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates ) GROUP BY templates.template_type_code","[('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]","[('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]",True
SPIDER_dev_342,cre_Doc_Template_Mgt,"What are the different template type codes, and how many documents use each type?","return templates ;return different type codes of #1 ;return documents that use #1 ;return number of #3 for each #1 ;return #2, #4","SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","SELECT templates.template_type_code, templates.template_id, COUNT(documents.other_details) FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT DISTINCT templates.template_id FROM templates ) GROUP BY templates.template_id","[('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]","[('PP', 1, 0), ('BK', 4, 0), ('PPT', 6, 0), ('PPT', 7, 0), ('BK', 8, 0), ('PPT', 10, 0), ('BK', 11, 0), ('AD', 14, 0), ('BK', 20, 0), ('AD', 21, 0), ('PP', 22, 0), ('PP', 25, 0)]",False
SPIDER_dev_343,cre_Doc_Template_Mgt,Which template type code is used by most number of documents?,return templates ;return documents that used #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return type codes of #4,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,"SELECT templates.template_type_code FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates ) GROUP BY templates.template_id ORDER BY COUNT(documents.document_name) DESC LIMIT 1 )","[('BK',)]","[('BK',), ('BK',)]",True
SPIDER_dev_344,cre_Doc_Template_Mgt,Return the code of the template type that is most commonly used in documents.,return template types ;return documents that #1 are used ;return number of #2 for each #1 ;return #1 where #3 is highest ;return code of #4,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,"SELECT templates.template_type_code FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates ) GROUP BY templates.template_type_code ORDER BY COUNT(documents.document_name) DESC LIMIT 1 )","[('BK',)]","[('BK',), ('BK',), ('BK',), ('BK',), ('BK',)]",True
SPIDER_dev_345,cre_Doc_Template_Mgt,Show all template type codes that are not used by any document.,return templates ;return documents that used #1 ;return number of #2 for each #1 ;return #1 where #3 is at least one ;return #1 besides #4 ;return type codes of #5,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,"SELECT templates.template_type_code FROM templates WHERE templates.template_id IN ( SELECT templates.template_id FROM templates WHERE templates.template_id NOT IN ( SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates ) GROUP BY templates.template_id HAVING COUNT(documents.other_details) >= 1 ) )","[('CV',)]","[('PP',), ('PP',), ('BK',), ('PPT',), ('PPT',), ('BK',), ('BK',), ('PPT',), ('BK',), ('AD',), ('CV',), ('CV',), ('PP',), ('AD',), ('BK',), ('AD',), ('PP',), ('BK',), ('PP',), ('PP',)]",False
SPIDER_dev_346,cre_Doc_Template_Mgt,What are the codes of template types that are not used for any document?,return template types ;return #1 not used for any document ;return codes of #2,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,"SELECT templates.template_type_code FROM templates, documents WHERE templates.template_id = documents.template_id AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates, documents WHERE templates.template_id = documents.template_id )","[('CV',)]","[('PPT',), ('PP',), ('PPT',), ('BK',), ('AD',), ('BK',), ('PPT',), ('AD',), ('PP',), ('PP',), ('AD',), ('BK',), ('BK',), ('PP',), ('BK',)]",False
SPIDER_dev_347,cre_Doc_Template_Mgt,Show all template type codes and descriptions.,"return templates ;return type of #1 ;return codes of #2 ;return descriptions of #1 ;return #3, #4","SELECT template_type_code ,  template_type_description FROM Ref_template_types","SELECT templates.template_type_code, ref_template_types.template_type_description FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code AND ref_template_types.template_type_code IN ( SELECT ref_template_types.template_type_code FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code AND templates.template_id IN ( SELECT templates.template_id FROM templates ) ) AND templates.template_id IN ( SELECT templates.template_id FROM templates )","[('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]","[('PP', 'Paper'), ('PP', 'Paper'), ('BK', 'Book'), ('PPT', 'Presentation'), ('PPT', 'Presentation'), ('BK', 'Book'), ('BK', 'Book'), ('PPT', 'Presentation'), ('BK', 'Book'), ('AD', 'Advertisement'), ('CV', 'CV'), ('CV', 'CV'), ('PP', 'Paper'), ('AD', 'Advertisement'), ('BK', 'Book'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book'), ('PP', 'Paper'), ('PP', 'Paper')]",True
SPIDER_dev_348,cre_Doc_Template_Mgt,What are the type codes and descriptions for all template types?,"return template types ;return type codes of #1 ;return descriptions of #1 ;return #2, #3","SELECT template_type_code ,  template_type_description FROM Ref_template_types","SELECT templates.template_type_code, ref_template_types.template_type_description FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates )","[('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]","[('PP', 'Paper'), ('PP', 'Paper'), ('BK', 'Book'), ('PPT', 'Presentation'), ('PPT', 'Presentation'), ('BK', 'Book'), ('BK', 'Book'), ('PPT', 'Presentation'), ('BK', 'Book'), ('AD', 'Advertisement'), ('CV', 'CV'), ('CV', 'CV'), ('PP', 'Paper'), ('AD', 'Advertisement'), ('BK', 'Book'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book'), ('PP', 'Paper'), ('PP', 'Paper')]",True
SPIDER_dev_349,cre_Doc_Template_Mgt,"What is the template type descriptions for template type code ""AD"".",return template type codes ;return #1 that is ads ;return template type descriptions of #2,"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  ""AD""","SELECT ref_template_types.template_type_description FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code AND ref_template_types.template_type_code = 'AD' )","[('Advertisement',)]","[('Advertisement',), ('Advertisement',), ('Advertisement',)]",True
SPIDER_dev_35,concert_singer,List singer names and number of concerts for each singer.,"return singers ;return names of #1 ;return concerts of #1 ;return number of #3 for each #1 ;return #2, #4","SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","SELECT singer.name, COUNT(concert.concert_id) FROM concert, singer_in_concert, singer WHERE singer.singer_id = singer_in_concert.singer_id AND singer_in_concert.concert_id = concert.concert_id AND singer.name IN ( SELECT singer.name FROM singer ) GROUP BY singer.name","[('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]","[('John Nizinik', 2), ('Justin Brown', 3), ('Rose White', 1), ('Timbaland', 2), ('Tribal King', 2)]",True
SPIDER_dev_350,cre_Doc_Template_Mgt,Return the template type description of the template type with the code AD.,return template types ;return codes of #1 ;return #1 where #2 is ad ;return template type description of #3,"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  ""AD""","SELECT ref_template_types.template_type_description FROM templates, ref_template_types WHERE ref_template_types.template_type_code = templates.template_type_code AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates, ref_template_types WHERE ref_template_types.template_type_code = templates.template_type_code AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates ) AND ref_template_types.template_type_code = 'AD' )","[('Advertisement',)]","[('Advertisement',), ('Advertisement',), ('Advertisement',)]",True
SPIDER_dev_351,cre_Doc_Template_Mgt,"What is the template type code for template type description ""Book"".",return template type descriptions ;return #1 that is book ;return template type code of #2,"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""","SELECT templates.template_type_code FROM templates, ref_template_types WHERE ref_template_types.template_type_code = templates.template_type_code AND ref_template_types.template_type_description IN ( SELECT ref_template_types.template_type_description FROM ref_template_types WHERE ref_template_types.template_type_description = 'Book' )","[('BK',)]","[('BK',), ('BK',), ('BK',), ('BK',), ('BK',), ('BK',)]",True
SPIDER_dev_352,cre_Doc_Template_Mgt,"Return the type code of the template type with the description ""Book"".",return template types ;return descriptions of #1 ;return #1 where #2 is book ;return type code of #3,"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""","SELECT templates.template_type_code FROM templates, ref_template_types WHERE ref_template_types.template_type_code = templates.template_type_code AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates, ref_template_types WHERE ref_template_types.template_type_code = templates.template_type_code AND templates.template_type_code IN ( SELECT templates.template_type_code FROM templates ) AND ref_template_types.template_type_description = 'Book' )","[('BK',)]","[('BK',), ('BK',), ('BK',), ('BK',), ('BK',), ('BK',)]",True
SPIDER_dev_353,cre_Doc_Template_Mgt,What are the distinct template type descriptions for the templates ever used by any document?,return templates ;return #1 used by any document ;return distinct template type descriptions of #2,SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,"SELECT DISTINCT ref_template_types.template_type_description FROM templates, documents, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code AND templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id )","[('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]","[('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]",True
SPIDER_dev_354,cre_Doc_Template_Mgt,Return the different descriptions for templates that have been used in a document.,return templates ;return #1 used in a document ;return descriptions of #2 ;return different #3,SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,"SELECT DISTINCT ref_template_types.template_type_description FROM templates, documents, ref_template_types WHERE templates.template_type_code = ref_template_types.template_type_code AND templates.template_id = documents.template_id AND templates.template_id IN ( SELECT templates.template_id FROM templates, documents WHERE templates.template_id = documents.template_id )","[('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]","[('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]",True
SPIDER_dev_355,cre_Doc_Template_Mgt,"What are the template ids with template type description ""Presentation"".",return templates ;return template type descriptions of #1 ;return #1 where #2 is presentation ;return ids of #3,"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""","SELECT templates.template_id FROM templates, ref_template_types WHERE ref_template_types.template_type_code = templates.template_type_code AND templates.template_id IN ( SELECT templates.template_id FROM templates, ref_template_types WHERE ref_template_types.template_type_code = templates.template_type_code AND templates.template_id IN ( SELECT templates.template_id FROM templates ) AND ref_template_types.template_type_description = 'Presentation' )","[(6,), (7,), (10,)]","[(6,), (7,), (10,)]",True
SPIDER_dev_356,cre_Doc_Template_Mgt,Return the ids corresponding to templates with the description 'Presentation'.,return templates ;return descriptions of #1 ;return #1 where #2 is 'presentation ;return ids corresponding to #3,"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""","SELECT templates.template_id FROM templates, ref_template_types WHERE ref_template_types.template_type_code = templates.template_type_code AND templates.template_id IN ( SELECT templates.template_id FROM templates, ref_template_types WHERE ref_template_types.template_type_code = templates.template_type_code AND templates.template_id IN ( SELECT templates.template_id FROM templates ) AND ref_template_types.template_type_description = 'Presentation' )","[(6,), (7,), (10,)]","[(6,), (7,), (10,)]",True
SPIDER_dev_357,cre_Doc_Template_Mgt,How many paragraphs in total?,return paragraphs ;return number of #1,SELECT count(*) FROM Paragraphs,SELECT COUNT(paragraphs.paragraph_id) FROM paragraphs,"[(15,)]","[(15,)]",True
SPIDER_dev_358,cre_Doc_Template_Mgt,Count the number of paragraphs.,return paragraphs ;return number of #1,SELECT count(*) FROM Paragraphs,SELECT COUNT(paragraphs.paragraph_id) FROM paragraphs,"[(15,)]","[(15,)]",True
SPIDER_dev_359,cre_Doc_Template_Mgt,How many paragraphs for the document with name 'Summer Show'?,return documents ;return names of #1 ;return #1 where #2 is'summer show ;return paragraphs of #3 ;return number of #4,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',"SELECT COUNT(paragraphs.paragraph_id) FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_name = 'Summer Show' )","[(1,)]","[(1,)]",True
SPIDER_dev_36,concert_singer,What are the names of the singers and number of concerts for each person?,"return people ;return concerts of #1 ;return number of #2 for each #1 ;return names of #1 ;return #4, #3","SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","SELECT singer.name, singer.country, COUNT(concert.concert_id) FROM concert, singer_in_concert, singer WHERE singer.singer_id = singer_in_concert.singer_id AND singer_in_concert.concert_id = concert.concert_id AND singer.country IN ( SELECT singer.country FROM singer ) GROUP BY singer.country","[('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]","[('Justin Brown', 'France', 8), ('Timbaland', 'United States', 2)]",False
SPIDER_dev_360,cre_Doc_Template_Mgt,Count the number of paragraphs in the document named 'Summer Show'.,return documents ;return #1 named'summer show ;return paragraphs in #2 ;return number of #3,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',"SELECT COUNT(paragraphs.paragraph_id) FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_name = 'Summer Show' )","[(1,)]","[(1,)]",True
SPIDER_dev_361,cre_Doc_Template_Mgt,Show paragraph details for paragraph with text 'Korea'.,return paragraphs ;return text of #1 ;return #1 where #2 is 'korea ;return paragraph details of #3,select other_details from paragraphs where paragraph_text like 'korea',SELECT paragraphs.other_details FROM paragraphs WHERE paragraphs.paragraph_id IN ( SELECT paragraphs.paragraph_id FROM paragraphs WHERE paragraphs.paragraph_id IN ( SELECT paragraphs.paragraph_id FROM paragraphs ) AND paragraphs.paragraph_text = 'korea' ),"[(None,), (None,)]",[],False
SPIDER_dev_362,cre_Doc_Template_Mgt,What are the details for the paragraph that includes the text 'Korea'?,return paragraphs ;return the text of #1 ;return #1 where #2 includes 'korea ;return the details of #3,select other_details from paragraphs where paragraph_text like 'korea',SELECT paragraphs.other_details FROM paragraphs WHERE paragraphs.paragraph_id IN ( SELECT paragraphs.paragraph_id FROM paragraphs WHERE paragraphs.paragraph_id IN ( SELECT paragraphs.paragraph_id FROM paragraphs ) AND paragraphs.paragraph_text LIKE '%korea%' ),"[(None,), (None,)]","[(None,), (None,)]",True
SPIDER_dev_363,cre_Doc_Template_Mgt,Show all paragraph ids and texts for the document with name 'Welcome to NY'.,"return documents ;return names of #1 ;return #1 where #2 is 'welcome to ny ;return paragraph ids of #3 ;return texts of #3 ;return #4, #5","SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents ) AND documents.document_name = 'Welcome to NY' )","[(16615, 'Japan'), (608931827, 'Micronesia')]","[(16615, 'Japan'), (608931827, 'Micronesia')]",True
SPIDER_dev_364,cre_Doc_Template_Mgt,What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?,"return documents ;return #1 titled 'welcome to ny ;return paragraphs in #2 ;return ids of #3 ;return texts of #3 ;return #4, #5","SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","SELECT paragraphs.paragraph_id, paragraphs.paragraph_text FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND paragraphs.paragraph_id IN ( SELECT paragraphs.paragraph_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_name = 'Welcome to NY' ) )","[(16615, 'Japan'), (608931827, 'Micronesia')]","[(16615, 'Japan'), (608931827, 'Micronesia')]",True
SPIDER_dev_365,cre_Doc_Template_Mgt,"Show all paragraph texts for the document ""Customer reviews"".",return documents ;return #1 that is customer reviews ;return paragraph texts of #2,"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""","SELECT paragraphs.paragraph_text FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_name = 'Customer reviews' )","[('Korea',), ('Ukraine',), ('Korea',)]","[('Korea',), ('Ukraine',), ('Korea',)]",True
SPIDER_dev_366,cre_Doc_Template_Mgt,What are the paragraph texts for the document with the name 'Customer reviews'?,return documents ;return names of #1 ;return #1 where #2 is 'customer reviews ;return paragraph texts of #3,"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""","SELECT paragraphs.paragraph_text FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents WHERE documents.document_id IN ( SELECT documents.document_id FROM documents ) AND documents.document_name = 'Customer reviews' )","[('Korea',), ('Ukraine',), ('Korea',)]","[('Korea',), ('Ukraine',), ('Korea',)]",True
SPIDER_dev_367,cre_Doc_Template_Mgt,Show all document ids and the number of paragraphs in each document. Order by document id.,"return documents ;return document ids of #1 ;return paragraphs of #1 ;return number of #3 for each #1 ;return #2, #4 ;return #5 sorted by #2","SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","SELECT documents.document_id, COUNT(paragraphs.paragraph_id) FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id ORDER BY documents.document_id ASC","[(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]","[(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]",True
SPIDER_dev_368,cre_Doc_Template_Mgt,"Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.","return documents ;return document ids of #1 ;return paragraphs of #1 ;return number of #3 for each #1 ;return #2, #4 ;return #5 sorted by #2","SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","SELECT documents.document_id, COUNT(paragraphs.paragraph_id) FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT DISTINCT documents.document_id FROM documents ) GROUP BY documents.document_id ORDER BY documents.document_id ASC","[(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]","[(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]",True
SPIDER_dev_369,cre_Doc_Template_Mgt,"Show all document ids, names and the number of paragraphs in each document.","return documents ;return document ids of #1 ;return names of #1 ;return paragraphs of #1 ;return number of #4 for each #1 ;return #2, #3, #5","SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id","[(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]","[(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]",True
SPIDER_dev_37,concert_singer,List all singer names in concerts in year 2014.,return concerts ;return years of #1 ;return #1 where #2 is 2014 ;return singers of #3 ;return names of #4,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,"SELECT singer.name FROM concert, singer_in_concert, singer WHERE concert.concert_id = singer_in_concert.concert_id AND singer_in_concert.singer_id = singer.singer_id AND singer.singer_id IN ( SELECT singer.singer_id FROM concert, singer_in_concert, singer WHERE concert.concert_id = singer_in_concert.concert_id AND singer_in_concert.singer_id = singer.singer_id AND concert.concert_id IN ( SELECT concert.concert_id FROM concert WHERE concert.concert_id IN ( SELECT concert.concert_id FROM concert ) AND concert.year = 2014 ) )","[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]","[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('John Nizinik',), ('Rose White',), ('Tribal King',), ('Justin Brown',), ('Timbaland',)]",True
SPIDER_dev_370,cre_Doc_Template_Mgt,"What are the ids and names of each document, as well as the number of paragraphs in each?","return documents ;return ids of #1 ;return names of #1 ;return paragraphs of #1 ;return number of #4 for each #1 ;return #2, #3, #5","SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id","[(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]","[(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]",True
SPIDER_dev_371,cre_Doc_Template_Mgt,List all document ids with at least two paragraphs.,return documents ;return paragraphs of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least two ;return document ids of #4,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,"SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2 )","[(80,), (2394,), (651512,), (16514113,)]","[(2394,), (651512,), (80,), (651512,), (2394,), (2394,), (16514113,), (80,), (16514113,)]",True
SPIDER_dev_372,cre_Doc_Template_Mgt,What are the ids of documents that have 2 or more paragraphs?,return documents ;return paragraphs of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 2 ;return ids of #4,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,"SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2 )","[(80,), (2394,), (651512,), (16514113,)]","[(2394,), (651512,), (80,), (651512,), (2394,), (2394,), (16514113,), (80,), (16514113,)]",True
SPIDER_dev_373,cre_Doc_Template_Mgt,What is the document id and name with greatest number of paragraphs?,"return documents ;return paragraphs of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return document id of #4 ;return name of #4 ;return #5, #6","SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","SELECT documents.document_id, documents.document_name FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1 )","[(2394, 'Customer reviews')]","[(2394, 'Customer reviews'), (2394, 'Customer reviews'), (2394, 'Customer reviews')]",True
SPIDER_dev_374,cre_Doc_Template_Mgt,Return the id and name of the document with the most paragraphs.,"return documents ;return paragraphs of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return id of #4 ;return name of #4 ;return #5, #6","SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","SELECT documents.document_id, documents.document_name FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) DESC LIMIT 1 )","[(2394, 'Customer reviews')]","[(2394, 'Customer reviews'), (2394, 'Customer reviews'), (2394, 'Customer reviews')]",True
SPIDER_dev_375,cre_Doc_Template_Mgt,What is the document id with least number of paragraphs?,return documents ;return paragraphs in #1 ;return number of #2 for each #1 ;return #1 where #3 is lowest ;return document id of #4,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,"SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1 )","[(3,)]","[(3,)]",True
SPIDER_dev_376,cre_Doc_Template_Mgt,Return the id of the document with the fewest paragraphs.,return documents ;return paragraphs of #1 ;return number of #2 for each #1 ;return #1 where #3 is lowest ;return id of #4,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,"SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) ASC LIMIT 1 )","[(3,)]","[(3,)]",True
SPIDER_dev_377,cre_Doc_Template_Mgt,What is the document id with 1 to 2 paragraphs?,return documents ;return paragraphs of #1 ;return number of #2 for each #1 ;return #1 where #3 is 1 to 2 ;return document id of #4,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,"SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) = 1 )","[(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]","[(3,), (50123,), (33930,), (385906526,), (3830,), (3540024,)]",False
SPIDER_dev_378,cre_Doc_Template_Mgt,Give the ids of documents that have between one and two paragraphs.,return documents ;return paragraphs of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least one ;return #1 where #3 is at most two ;return #1 in both #4 and #5 ;return ids of #6,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,"SELECT DISTINCT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT DISTINCT documents.document_id FROM documents, paragraphs WHERE documents.document_id = paragraphs.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 1 AND COUNT(paragraphs.paragraph_id) <= 2 )","[(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]","[(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]",True
SPIDER_dev_379,cre_Doc_Template_Mgt,Show the document id with paragraph text 'Brazil' and 'Ireland'.,return documents ;return paragraph texts of #1 ;return #1 where #2 is 'brazil ;return #1 where #2 is 'ireland ;return #1 of both #3 and #4 ;return document id of #5,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',"SELECT DISTINCT documents.document_id FROM documents, paragraphs WHERE paragraphs.document_id = documents.document_id AND documents.document_id IN ( SELECT DISTINCT documents.document_id FROM documents, paragraphs WHERE paragraphs.document_id = documents.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) AND paragraphs.paragraph_text = 'Brazil' AND documents.document_id IN ( SELECT documents.document_id FROM documents, paragraphs WHERE paragraphs.document_id = documents.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) AND paragraphs.paragraph_text = 'Ireland' ) )","[(16514113,)]","[(16514113,)]",True
SPIDER_dev_38,concert_singer,What are the names of the singers who performed in a concert in 2014?,return singers ;return #1 who performed in a concert in 2014 ;return names of #2,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,"SELECT singer.name FROM concert, singer_in_concert, singer WHERE singer.singer_id = singer_in_concert.singer_id AND singer_in_concert.concert_id = concert.concert_id AND singer.singer_id IN ( SELECT singer.singer_id FROM concert, singer_in_concert, singer WHERE singer.singer_id = singer_in_concert.singer_id AND singer_in_concert.concert_id = concert.concert_id AND concert.year = 2014 )","[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]","[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('John Nizinik',), ('Rose White',), ('Tribal King',), ('Justin Brown',), ('Timbaland',)]",True
SPIDER_dev_380,cre_Doc_Template_Mgt,What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?,return documents ;return paragraph texts of #1 ;return #1 where #2 is 'brazil ;return #1 where #2 is 'ireland ;return #1 of both #3 and #4 ;return ids of #5,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',"SELECT DISTINCT documents.document_id FROM documents, paragraphs WHERE paragraphs.document_id = documents.document_id AND documents.document_id IN ( SELECT DISTINCT documents.document_id FROM documents, paragraphs WHERE paragraphs.document_id = documents.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) AND paragraphs.paragraph_text = 'Brazil' AND documents.document_id IN ( SELECT documents.document_id FROM documents, paragraphs WHERE paragraphs.document_id = documents.document_id AND documents.document_id IN ( SELECT documents.document_id FROM documents ) AND paragraphs.paragraph_text = 'Ireland' ) )","[(16514113,)]","[(16514113,)]",True
SPIDER_dev_381,course_teach,How many teachers are there?,return teachers ;return number of #1,SELECT count(*) FROM teacher,SELECT COUNT(teacher.teacher_id) FROM teacher,"[(7,)]","[(7,)]",True
SPIDER_dev_382,course_teach,What is the total count of teachers?,return teachers ;return number of #1,SELECT count(*) FROM teacher,SELECT COUNT(teacher.teacher_id) FROM teacher,"[(7,)]","[(7,)]",True
SPIDER_dev_383,course_teach,List the names of teachers in ascending order of age.,return teachers ;return names of #1 ;return ages of #1 ;return #2 sorted by #3 in ascending order,SELECT Name FROM teacher ORDER BY Age ASC,SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) ORDER BY teacher.age ASC,"[('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]","[('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]",True
SPIDER_dev_384,course_teach,What are the names of the teachers ordered by ascending age?,return teachers ;return names of #1 ;return ages of #1 ;return #2 sorted by #3 ascending,SELECT Name FROM teacher ORDER BY Age ASC,SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) ORDER BY teacher.age ASC,"[('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]","[('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]",True
SPIDER_dev_385,course_teach,What are the age and hometown of teachers?,"return teachers ;return ages of #1 ;return hometowns of #1 ;return #2, #3","SELECT Age ,  Hometown FROM teacher","SELECT teacher.age, teacher.hometown FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher )","[('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]","[('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]",True
SPIDER_dev_386,course_teach,What is the age and hometown of every teacher?,"return teachers ;return ages of #1 ;return hometowns of #1 ;return #2, #3","SELECT Age ,  Hometown FROM teacher","SELECT teacher.age, teacher.hometown FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher )","[('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]","[('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]",True
SPIDER_dev_387,course_teach,"List the name of teachers whose hometown is not ""Little Lever Urban District"".",return teachers ;return hometowns of #1 ;return #1 where #2 is not little lever urban district ;return names of #3,"select name from teacher where hometown != ""little lever urban district""",SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) AND teacher.hometown != 'little lever urban district' ),"[('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]","[('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]",True
SPIDER_dev_388,course_teach,"What are the names of the teachers whose hometown is not ""Little Lever Urban District""?",return teachers ;return hometowns of #1 ;return #1 where #2 is not little lever urban district ;return names of #3,"select name from teacher where hometown != ""little lever urban district""",SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) AND teacher.hometown != 'little lever urban district' ),"[('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]","[('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]",True
SPIDER_dev_389,course_teach,Show the name of teachers aged either 32 or 33?,return teachers ;return #1 aged 32 ;return #1 aged 33 ;return #2 or #3 ;return names of #4,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher WHERE ((teacher.age = 32) OR (teacher.age = 33)) ),"[('Joseph Huts',), ('John Deloor',)]","[('Joseph Huts',), ('John Deloor',)]",True
SPIDER_dev_39,concert_singer,what is the name and nation of the singer who have a song having 'Hey' in its name?,"return singers ;return songs of #1 ;return names of #2 ;return #1 where #3 has 'hey ;return name of #4 ;return nation of #4 ;return #5, #6","SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","SELECT singer.name, singer.country FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.song_name IN ( SELECT singer.song_name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ) AND singer.song_name LIKE '%Hey%' )","[('Justin Brown', 'France')]","[('Justin Brown', 'France')]",True
SPIDER_dev_390,course_teach,What are the names of the teachers who are aged either 32 or 33?,return teachers ;return #1 who are aged 32 ;return #1 who are aged 33 ;return #2 or #3 ;return names of #4,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher WHERE ((teacher.age = 32) OR (teacher.age = 33)) ),"[('Joseph Huts',), ('John Deloor',)]","[('Joseph Huts',), ('John Deloor',)]",True
SPIDER_dev_391,course_teach,What is the hometown of the youngest teacher?,return teachers ;return #1 that is youngest ;return hometown of #2,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,SELECT teacher.hometown FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) ORDER BY teacher.name DESC LIMIT 1 ),"[('Farnworth Municipal Borough',)]","[('Farnworth Municipal Borough',)]",True
SPIDER_dev_392,course_teach,Where is the youngest teacher from?,return teachers ;return #1 that is youngest ;return where is #2 from,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,SELECT teacher.hometown FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) ORDER BY teacher.age ASC LIMIT 1 ),"[('Farnworth Municipal Borough',)]","[('Farnworth Municipal Borough',)]",True
SPIDER_dev_393,course_teach,Show different hometown of teachers and the number of teachers from each hometown.,return teachers ;return hometowns of #1 ;return number of #1 for each #2,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","SELECT teacher.hometown, COUNT(teacher.teacher_id) FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) GROUP BY teacher.hometown","[('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]","[('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]",True
SPIDER_dev_394,course_teach,"For each hometown, how many teachers are there?",return hometowns ;return teachers in #1 ;return number of #2 for each #1,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","SELECT teacher.hometown, COUNT(teacher.teacher_id) FROM teacher WHERE teacher.hometown IN ( SELECT teacher.hometown FROM teacher ) GROUP BY teacher.hometown","[('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]","[('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]",True
SPIDER_dev_395,course_teach,List the most common hometown of teachers.,return teachers ;return hometown of #1 ;return number of #1 for each #2 ;return #2 where #3 is highest,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,SELECT teacher.hometown FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) GROUP BY teacher.hometown ORDER BY COUNT(teacher.teacher_id) DESC LIMIT 1,"[('Turton Urban District',)]","[('Turton Urban District',)]",True
SPIDER_dev_396,course_teach,What is the most commmon hometowns for teachers?,return teachers ;return hometowns of #1 ;return number of #1 for each #2 ;return #2 where #3 is highest,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,SELECT teacher.hometown FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) GROUP BY teacher.hometown ORDER BY COUNT(teacher.teacher_id) DESC LIMIT 1,"[('Turton Urban District',)]","[('Turton Urban District',)]",True
SPIDER_dev_397,course_teach,Show the hometowns shared by at least two teachers.,return hometowns ;return teachers in #1 ;return number of #2 for each #1 ;return #1 where #3 is at least two,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,SELECT teacher.hometown FROM teacher WHERE teacher.hometown IN ( SELECT teacher.hometown FROM teacher ) GROUP BY teacher.hometown HAVING COUNT(teacher.teacher_id) >= 2,[],[],True
SPIDER_dev_398,course_teach,What are the towns from which at least two teachers come from?,return towns ;return teachers that come from #1 ;return number of #2 for each #1 ;return #1 where #3 is at least two,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,SELECT teacher.hometown FROM teacher WHERE teacher.hometown IN ( SELECT teacher.hometown FROM teacher ) GROUP BY teacher.hometown HAVING COUNT(teacher.hometown) >= 2,[],[],True
SPIDER_dev_399,course_teach,Show names of teachers and the courses they are arranged to teach.,"return teachers ;return names of #1 ;return courses #1 are arranged to teach ;return #2, #3","SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","SELECT teacher.name, course.course FROM course, teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND course_arrange.course_id = course.course_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher )","[('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]","[('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]",True
SPIDER_dev_4,concert_singer,"What is the average, minimum, and maximum age of all singers from France?","return singers ;return #1 from france ;return ages of #2 ;return average of #3 ;return minimum of #3 ;return maximum of #3 ;return #4, #5, #6","SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","SELECT AVG(singer.age), MIN(singer.age), MAX(singer.age) FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.country = 'France' )","[(34.5, 25, 43)]","[(34.5, 25, 43)]",True
SPIDER_dev_40,concert_singer,What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?,"return singers ;return songs of #1 ;return titles of #2 ;return #1 where #3 has the word 'hey ;return names of #4 ;return countries of origin of #4 ;return #5, #6","SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","SELECT singer.name, singer.country FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.song_name IN ( SELECT singer.song_name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ) AND singer.song_name LIKE '%Hey%' )","[('Justin Brown', 'France')]","[('Justin Brown', 'France')]",True
SPIDER_dev_400,course_teach,What is the name of each teacher and what course they teach?,"return teachers ;return names of #1 ;return courses of #1 ;return #2, #3","SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","SELECT teacher.name, course.course FROM course, teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND course_arrange.course_id = course.course_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher )","[('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]","[('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]",True
SPIDER_dev_401,course_teach,Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.,"return teachers ;return names of #1 ;return courses #1 are arranged to teach ;return #2, #3 ;return #4 sorted by #2 in ascending alphabetical order","SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","SELECT teacher.name, course.course FROM course, teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND course_arrange.course_id = course.course_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) ORDER BY teacher.name ASC","[('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]","[('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]",True
SPIDER_dev_402,course_teach,What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?,"return teachers ;return names of #1 ;return courses #1 teach ;return #2, #3 ;return #4 sorted by #2 in ascending alphabetical order","SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","SELECT teacher.name, course.course FROM course, teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND course_arrange.course_id = course.course_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) ORDER BY teacher.name ASC","[('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]","[('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]",True
SPIDER_dev_403,course_teach,Show the name of the teacher for the math course.,return teachers ;return courses of #1 ;return #1 where #2 is math ;return name of #3,"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""","SELECT teacher.name FROM course, course_arrange, teacher WHERE course.course_id = course_arrange.course_id AND course_arrange.teacher_id = teacher.teacher_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM course, course_arrange, teacher WHERE course.course_id = course_arrange.course_id AND course_arrange.teacher_id = teacher.teacher_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) AND course.course = 'Math' )","[('Kearsley Brown',), ('Vicente Carretero',)]","[('Kearsley Brown',), ('Vicente Carretero',)]",True
SPIDER_dev_404,course_teach,What are the names of the people who teach math courses?,return people ;return courses of #1 ;return #1 where #2 is math ;return names of #3,"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""","SELECT teacher.name FROM course, course_arrange, teacher WHERE course_arrange.teacher_id = teacher.teacher_id AND course.course_id = course_arrange.course_id AND course_arrange.teacher_id IN ( SELECT course_arrange.teacher_id FROM course, course_arrange WHERE course.course_id = course_arrange.course_id AND course_arrange.teacher_id IN ( SELECT course_arrange.teacher_id FROM course_arrange ) AND course.course = 'Math' )","[('Kearsley Brown',), ('Vicente Carretero',)]","[('Kearsley Brown',), ('Vicente Carretero',)]",True
SPIDER_dev_405,course_teach,Show names of teachers and the number of courses they teach.,"return teachers ;return names of #1 ;return courses #1 teach ;return number of #3 for each #1 ;return #2, #4","SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","SELECT teacher.name, COUNT(course_arrange.teacher_id) FROM teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND teacher.name IN ( SELECT teacher.name FROM teacher ) GROUP BY teacher.name","[('Anne Walker', 2), ('Gustaaf Deloor', 1), ('Kearsley Brown', 1), ('Lucy Wong', 1), ('Vicente Carretero', 1)]","[('Anne Walker', 2), ('Gustaaf Deloor', 1), ('Kearsley Brown', 1), ('Lucy Wong', 1), ('Vicente Carretero', 1)]",True
SPIDER_dev_406,course_teach,What are the names of the teachers and how many courses do they teach?,"return teachers ;return names of #1 ;return courses #1 teach ;return number of #3 for each #1 ;return #2, #4","SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","SELECT teacher.name, COUNT(course_arrange.teacher_id) FROM teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND teacher.name IN ( SELECT teacher.name FROM teacher ) GROUP BY teacher.name","[('Anne Walker', 2), ('Gustaaf Deloor', 1), ('Kearsley Brown', 1), ('Lucy Wong', 1), ('Vicente Carretero', 1)]","[('Anne Walker', 2), ('Gustaaf Deloor', 1), ('Kearsley Brown', 1), ('Lucy Wong', 1), ('Vicente Carretero', 1)]",True
SPIDER_dev_407,course_teach,Show names of teachers that teach at least two courses.,return teachers ;return courses #1 teach ;return number of #2 for each #1 ;return #1 where #3 is at least two ;return names of #4,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,"SELECT teacher.name FROM teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) GROUP BY teacher.teacher_id HAVING COUNT(course_arrange.teacher_id) >= 2 )","[('Anne Walker',)]","[('Anne Walker',), ('Anne Walker',)]",True
SPIDER_dev_408,course_teach,What are the names of the teachers who teach at least two courses?,return teachers ;return courses #1 teach ;return number of #2 for each #1 ;return #1 where #3 is at least two ;return names of #4,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,"SELECT teacher.name FROM teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) GROUP BY teacher.teacher_id HAVING COUNT(course_arrange.teacher_id) >= 2 )","[('Anne Walker',)]","[('Anne Walker',), ('Anne Walker',)]",True
SPIDER_dev_409,course_teach,List the names of teachers who have not been arranged to teach courses.,return teachers ;return courses that #1 have been arranged to teach ;return number of #2 for each #1 ;return #1 where #3 is at least one ;return #1 besides #4 ;return names of #5,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),"SELECT teacher.name FROM teacher WHERE teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher WHERE teacher.teacher_id NOT IN ( SELECT teacher.teacher_id FROM teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) GROUP BY teacher.teacher_id HAVING COUNT(course_arrange.teacher_id) >= 1 ) )","[('Joseph Huts',), ('John Deloor',)]","[('Joseph Huts',), ('John Deloor',)]",True
SPIDER_dev_41,concert_singer,Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.,"return stadiums ;return concerts in #1 ;return years of #2 ;return #1 where #3 is 2014 ;return #1 where #3 is 2015 ;return #1 in both #4 and #5 ;return names of #6 ;return locations of #6 ;return #7, #8","SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","SELECT stadium.name, stadium.location FROM concert, stadium WHERE concert.stadium_id = stadium.stadium_id AND stadium.stadium_id IN ( SELECT DISTINCT stadium.stadium_id FROM concert, stadium WHERE concert.stadium_id = stadium.stadium_id AND concert.concert_id IN ( SELECT concert.concert_id FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) ) AND concert.year = 2014 AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM concert, stadium WHERE concert.stadium_id = stadium.stadium_id AND concert.concert_id IN ( SELECT concert.concert_id FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) ) AND concert.year = 2015 ) )","[('Somerset Park', 'Ayr United')]","[('Somerset Park', 'Ayr United'), ('Somerset Park', 'Ayr United')]",True
SPIDER_dev_410,course_teach,What are the names of the teachers whose courses have not been arranged?,return teachers ;return courses of #1 ;return #1 where #2 have not been arranged ;return names of #3,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),"SELECT teacher.name FROM course, teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND course_arrange.course_id = course.course_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM course, teacher, course_arrange WHERE teacher.teacher_id = course_arrange.teacher_id AND course_arrange.course_id = course.course_id AND teacher.teacher_id IN ( SELECT teacher.teacher_id FROM teacher ) AND course.course_id LIKE '%not been arranged%' )","[('Joseph Huts',), ('John Deloor',)]",[],False
SPIDER_dev_411,museum_visit,How many visitors below age 30 are there?,return visitors ;return ages of #1 ;return #1 where #2 is lower than 30 ;return number of #3,SELECT count(*) FROM visitor WHERE age  <  30,SELECT COUNT(visitor.id) FROM visitor WHERE visitor.id IN ( SELECT visitor.id FROM visitor ) AND visitor.age < 30,"[(3,)]","[(3,)]",True
SPIDER_dev_412,museum_visit,"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",return visitors ;return membership levels of #1 ;return #1 where #2 is higher than 4 ;return names of #3 ;return membership levels of #3 ;return #4 sorted by #5 from high to low,SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC,SELECT visitor.name FROM visitor WHERE visitor.id IN ( SELECT visitor.id FROM visitor WHERE visitor.id IN ( SELECT visitor.id FROM visitor ) AND visitor.level_of_membership > 4 ) ORDER BY visitor.level_of_membership ASC,"[('Gonzalo Higuaín ',), ('Fernando Gago',), ('Guti Midfielder',)]","[('Guti Midfielder',), ('Fernando Gago',), ('Gonzalo Higuaín ',)]",True
SPIDER_dev_413,museum_visit,What is the average age of the visitors whose membership level is not higher than 4?,return visitors ;return membership levels of #1 ;return #1 where #2 is at most 4 ;return ages of #3 ;return average of #4,SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4,SELECT AVG(visitor.age) FROM visitor WHERE visitor.id IN ( SELECT visitor.id FROM visitor WHERE visitor.id IN ( SELECT visitor.id FROM visitor ) AND visitor.level_of_membership <= 4 ),"[(36.0,)]","[(36.0,)]",True
SPIDER_dev_414,museum_visit,"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.","return visitors ;return #1 whose membership level is higher than 4 ;return names of #2 ;return membership levels of #2 ;return ages of #2 ;return #3, #4 ;return #6 sorted by #5 from old to young","SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC","SELECT visitor.name, visitor.level_of_membership FROM visitor WHERE visitor.id IN ( SELECT visitor.id FROM visitor WHERE visitor.level_of_membership > 4 ) ORDER BY visitor.age ASC","[('Fernando Gago', 6), ('Gonzalo Higuaín ', 8), ('Guti Midfielder', 5)]","[('Guti Midfielder', 5), ('Gonzalo Higuaín ', 8), ('Fernando Gago', 6)]",True
SPIDER_dev_415,museum_visit,Find the id and name of the museum that has the most staff members?,"return museums ;return staff members of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return id of #4 ;return name of #4 ;return #5, #6","SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1","SELECT museum.museum_id, museum.name FROM museum WHERE museum.museum_id IN ( SELECT museum.museum_id FROM museum WHERE museum.museum_id IN ( SELECT museum.museum_id FROM museum ) GROUP BY museum.museum_id ORDER BY COUNT(museum.num_of_staff) DESC LIMIT 1 )","[(1, 'Plaza Museum')]","[(1, 'Plaza Museum')]",True
SPIDER_dev_416,museum_visit,Find the average number of staff working for the museums that were open before 2009.,return museums ;return #1 that were open before 2009 ;return staff working for #2 ;return number of #3 ;return average of #4,SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009,SELECT AVG(museum.num_of_staff) FROM museum WHERE museum.museum_id IN ( SELECT museum.museum_id FROM museum WHERE museum.open_year < 2009 ),"[(31.333333333333332,)]","[(31.333333333333332,)]",True
SPIDER_dev_417,museum_visit,What are the opening year and staff number of the museum named Plaza Museum?,"return museums ;return #1 named plaza museum ;return opening year of #2 ;return staff number of #2 ;return #3, #4","SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'","SELECT museum.open_year, museum.num_of_staff FROM museum WHERE museum.museum_id IN ( SELECT museum.museum_id FROM museum WHERE museum.name = 'Plaza Museum' )","[(62, '2000')]","[('2000', 62)]",True
SPIDER_dev_418,museum_visit,find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.,return museums ;return #1 opened after 2010 ;return staff number of #2 ;return minimum of #3 ;return #2 where #3 is higher than #4 ;return names of #5,SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010),SELECT museum.name FROM museum WHERE museum.museum_id IN ( SELECT museum.museum_id FROM museum WHERE museum.museum_id IN ( SELECT museum.museum_id FROM museum WHERE museum.open_year > 2010 ) AND museum.open_year > 2010 AND museum.num_of_staff > ( SELECT MIN(museum.num_of_staff) FROM museum WHERE museum.museum_id IN ( SELECT museum.museum_id FROM museum WHERE museum.open_year > 2010 ) ) ),"[('Plaza Museum',), ('Capital Plaza Museum',), ('Jefferson Development Museum',)]","[('Capital Plaza Museum',)]",False
SPIDER_dev_419,museum_visit,"find the id, name and age for visitors who visited some museums more than once.","return museums ;return visitors of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than once ;return ids of #4 ;return names of #4 ;return ages of #4 ;return #5, #6, #7","SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1","SELECT museum.museum_id, museum.name, visitor.age FROM visitor, museum, visit WHERE museum.museum_id = visit.museum_id AND visit.visitor_id = visitor.id AND museum.museum_id IN ( SELECT museum.museum_id FROM visitor, museum, visit WHERE museum.museum_id = visit.museum_id AND visit.visitor_id = visitor.id AND museum.museum_id IN ( SELECT museum.museum_id FROM museum ) GROUP BY museum.museum_id HAVING COUNT(visitor.id) > once )","[(3, 'Arjen Robben', 27), (5, 'Fernando Gago', 36), (6, 'Rafael van der Vaart', 25)]",ERROR,False
SPIDER_dev_42,concert_singer,What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?,"return stadiums ;return concerts of #1 ;return #2 in 2014 ;return #2 in 2015 ;return #1 of both #3 and #4 ;return names of #5 ;return locations of #5 ;return #6, #7","SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","SELECT stadium.name, stadium.location FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT DISTINCT stadium.stadium_id FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) AND concert.year = 2014 AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) AND concert.year = 2015 ) )","[('Somerset Park', 'Ayr United')]","[('Somerset Park', 'Ayr United'), ('Somerset Park', 'Ayr United')]",True
SPIDER_dev_420,museum_visit,"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?","return visitors ;return museum tickets of #1 ;return amount of money spent in #2 ;return #1 where #3 is the highest ;return ids of #4 ;return names of #4 ;return membership levels of #4 ;return #5, #6, #7","SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1","SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor, museum, visit WHERE visitor.id = visit.visitor_id AND visit.museum_id = museum.museum_id AND visitor.id IN ( SELECT visitor.id FROM visitor, museum, visit WHERE visitor.id = visit.visitor_id AND visit.museum_id = museum.museum_id AND museum.museum_id IN ( SELECT museum.museum_id FROM visitor, museum, visit WHERE visitor.id = visit.visitor_id AND visit.museum_id = museum.museum_id AND visitor.id IN ( SELECT visitor.id FROM visitor ) ) ORDER BY visit.total_spent DESC LIMIT 1 )","[('3', 'Arjen Robben', 1)]","[(3, 'Arjen Robben', 1), (3, 'Arjen Robben', 1)]",True
SPIDER_dev_421,museum_visit,What are the id and name of the museum visited most times?,"return museums ;return times #1 are visited ;return #1 where #2 is the most visited ;return the id of #3 ;return the name of #3 ;return #4, #5","SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1","SELECT museum.museum_id, museum.name FROM museum, visit WHERE museum.museum_id = visit.museum_id AND museum.museum_id IN ( SELECT museum.museum_id FROM museum, visit WHERE museum.museum_id = visit.museum_id AND museum.museum_id IN ( SELECT museum.museum_id FROM museum ) ORDER BY visit.num_of_ticket DESC LIMIT 1 )","[(2, 'Capital Plaza Museum')]","[(2, 'Capital Plaza Museum'), (2, 'Capital Plaza Museum')]",True
SPIDER_dev_422,museum_visit,What is the name of the museum that had no visitor yet?,return museums ;return #1 that had visitors yet ;return #1 besides #2 ;return the name of #3,SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit),"SELECT museum.name FROM museum WHERE museum.museum_id IN ( SELECT museum.museum_id FROM museum WHERE museum.museum_id NOT IN ( SELECT museum.museum_id FROM visitor, museum, visit WHERE museum.museum_id = visit.museum_id AND visit.visitor_id = visitor.id ) )","[('Jefferson Development Museum',), ('RiverPark Museum',), ('Place Tower Museum',), ('Central City District Residential Museum',)]","[('Jefferson Development Museum',), ('RiverPark Museum',), ('Place Tower Museum',), ('Central City District Residential Museum',)]",True
SPIDER_dev_423,museum_visit,Find the name and age of the visitor who bought the most tickets at once.,"return visitors ;return tickets #1 bought at once ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4 ;return age of #4 ;return #5, #6","SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1","SELECT visitor.name, visitor.age FROM visitor, visit WHERE visitor.id = visit.visitor_id AND visitor.id IN ( SELECT visitor.id FROM visitor, visit WHERE visitor.id = visit.visitor_id AND visitor.id IN ( SELECT visitor.id FROM visitor ) GROUP BY visitor.id ORDER BY COUNT(visit.num_of_ticket) DESC LIMIT 1 )","[('Arjen Robben', 27)]","[('Arjen Robben', 27), ('Arjen Robben', 27)]",True
SPIDER_dev_424,museum_visit,What are the average and maximum number of tickets bought in all visits?,"return visits ;return tickets bought in #1 ;return number of #2 ;return average of #3 ;return maximum of #3 ;return #4, #5","SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit","SELECT AVG(visit.num_of_ticket), MAX(visit.num_of_ticket) FROM visit WHERE visit.museum_id IN ( SELECT visit.museum_id FROM visit )","[(10.5, 24)]","[(10.5, 24)]",True
SPIDER_dev_425,museum_visit,What is the total ticket expense of the visitors whose membership level is 1?,return visitors ;return membership levels of #1 ;return #1 where #2 is 1 ;return ticket expenses of #3 ;return sum of #4,SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1,"SELECT SUM(visit.total_spent) FROM visitor, visit WHERE visitor.id = visit.visitor_id AND visitor.id IN ( SELECT visitor.id FROM visitor WHERE visitor.id IN ( SELECT visitor.id FROM visitor ) AND visitor.level_of_membership = 1 )","[(570.84,)]","[(570.84,)]",True
SPIDER_dev_426,museum_visit,What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?,return museums ;return #1 opened before 2009 ;return #1 opened after 2011 ;return visitors of both #2 and #3 ;return name of #4,SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011,"SELECT DISTINCT visitor.name FROM visitor, museum, visit WHERE museum.museum_id = visit.museum_id AND visit.visitor_id = visitor.id AND visitor.id IN ( SELECT DISTINCT visitor.id FROM visitor, museum, visit WHERE museum.museum_id = visit.museum_id AND visit.visitor_id = visitor.id AND museum.open_year < 2009 AND visitor.id IN ( SELECT visitor.id FROM visitor, museum, visit WHERE museum.museum_id = visit.museum_id AND visit.visitor_id = visitor.id AND museum.open_year > 2011 ) )","[('Fernando Gago',)]","[('Fernando Gago',)]",True
SPIDER_dev_427,museum_visit,Find the number of visitors who did not visit any museum opened after 2010.,return museums ;return #1 opened after 2010 ;return visitors of #2 ;return visitors besides #3 ;return number of #4,SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010),"SELECT COUNT(visitor.id) FROM visitor WHERE visitor.id NOT IN ( SELECT visitor.id FROM visitor, museum, visit WHERE museum.museum_id = visit.museum_id AND visit.visitor_id = visitor.id AND museum.museum_id IN ( SELECT museum.museum_id FROM museum WHERE museum.open_year > 2010 ) )","[(3,)]","[(3,)]",True
SPIDER_dev_428,museum_visit,How many museums were opened after 2013 or before 2008?,return museums ;return #1 opened after 2013 ;return #1 opened before 2008 ;return number of #2 ;return number of #3 ;return sum of #4 and #5,SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008,SELECT (SELECT COUNT(museum.museum_id) FROM museum WHERE museum.open_year > 2013) + (SELECT COUNT(museum.museum_id) FROM museum WHERE museum.open_year < 2008),"[(1,)]","[(1,)]",True
SPIDER_dev_429,wta_1,Find the total number of players.,return players ;return number of #1,SELECT count(*) FROM players,SELECT COUNT(players.player_id) FROM players,"[(20662,)]","[(20662,)]",True
SPIDER_dev_43,concert_singer,Find the number of concerts happened in the stadium with the highest capacity.,return stadiums ;return capacities of #1 ;return #1 where #2 is highest ;return concerts in #3 ;return number of #4,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),"SELECT COUNT(concert.concert_id) FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) ORDER BY stadium.capacity DESC LIMIT 1 )","[(0,)]","[(0,)]",True
SPIDER_dev_431,wta_1,Find the total number of matches.,return matches ;return number of #1,SELECT count(*) FROM matches,SELECT COUNT(matches.loser_id) FROM matches,"[(278,)]","[(278,)]",True
SPIDER_dev_432,wta_1,Count the number of matches.,return matches ;return number of #1,SELECT count(*) FROM matches,SELECT COUNT(matches.loser_id) FROM matches,"[(278,)]","[(278,)]",True
SPIDER_dev_433,wta_1,List the first name and birth date of all players from the country with code USA.,"return players ;return countries of #1 ;return codes of #2 ;return #1 where #3 is usa ;return first names of #4 ;return birth dates of #4 ;return #5, #6","SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","SELECT players.first_name, players.birth_date FROM players WHERE players.player_id IN ( SELECT players.player_id FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players WHERE players.player_id IN ( SELECT players.player_id FROM players ) ) AND players.country_code = 'USA' )","[('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123)]","[('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123)]",True
SPIDER_dev_434,wta_1,What are the first names and birth dates of players from the USA?,"return players ;return #1 from the usa ;return first names of #2 ;return birth dates of #2 ;return #3, #4","SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","SELECT players.first_name, players.birth_date FROM players WHERE players.player_id IN ( SELECT players.player_id FROM players WHERE players.country_code = 'USA' )","[('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123)]","[('Jolene', 19680831), ('Lisa', 19730810), ('Meilen', 19780117), ('Serena', 19810926), ('Chanda', 19760218), ('Amy', 19720919), ('Tara', 19770526), ('Meghann', 19790413), ('Erika', 19721014), ('Lilia', 19780407), ('Jane', 19740621), ('Jennifer', 19760329), ('Alexandra', 19801215), ('Linda', 19710211), ('Brie', 19800121), ('Corina', 19780126), ('Marissa', 19800623), ('Lindsay', 19760608), ('Kathleen', 19461027), ('Geri', ''), ('Rosie', 19480916), ('Joan', ''), ('Mary Ann', 19461125), ('Billie Jean', 19431122), ('Patti', 19491221), ('Sharon', 19520224), ('Mona', 19481128), ('Ann', 19510504), ('Chris', 19541221), ('Janet', 19530806), ('Jill', 19540519), ('Julie', 19451208), ('Ann', 19550822), ('Joy', 19540519), ('Pam', 19510417), ('Peggy', 19490202), ('Martina', 19561018), ('Laura', 19490504), ('Sally', 19550325), ('Cecilia', 19470524), ('Rene', 19570512), ('Beth', 19570613), ('Patricia', 19511125), ('Kim', 19561011), ('Betsy', 19561023), ('Barbara', 19570402), ('Dianne', 19580811), ('Felicia', 19570720), ('Lindsay', 19550124), ('Lele', 19560910), ('Diane', 19550615), ('Rosalyn', 19601102), ('Marcie', 19530910), ('Pam', 19620704), ('Barbara', 19570501), ('Candy', 19550324), ('Bonnie', 19630911), ('Barbara', 19611022), ('Anne', 19590701), ('Paula', 19570110), ('Nancy', 19550522), ('Andrea', 19650604), ('Anne', 19610928), ('Leslie', 19570312), ('Kathy', 19591203), ('Mary Lou', 19610806), ('Sherry', 19590606), ('Lea', 19590120), ('Kim', 19571222), ('Tracy', 19621212), ('Kate', 19521025), ('Wendy', 19600929), ('Andrea', 19640118), ('Zina', 19631116), ('Susan', 19640628), ('Camille', 19660602), ('Alycia', 19610218), ('Jane', 19531206), ('Vicki', 19620925), ('Heather', 19610611), ('Robin', 19631210), ('Gigi', 19640222), ('Kathy', 19670324), ('Anna Maria', 19601022), ('Beth', 19640528), ('Lori', 19631218), ('Laura', 19630317), ('Kim', 19570928), ('Shelley', 19630619), ('Barbara', 19640703), ('Michaela', 19660227), ('Shawn', 19671221), ('Elise', 19620305), ('Sandy', 19581013), ('Linda', 19691224), ('Lisa', 19620714), ('Terry', 19551128), ('Ann', 19591031), ('Lisa', 19651016), ('Molly', 19650312), ('Hu', 19630416), ('Dee Ann', 19620611), ('Jamie', 19620121), ('Beverly', 19650909), ('Louise', 19620107), ('Cammy', 19681011), ('Susan', 19590415), ('Caryn', 19610314), ('Tina', 19521124), ('Terry', 19661218), ('Marianne', 19671017), ('Gretchen', 19640207), ('Kathrin', 19621128), ('Pamela', 19630703), ('Lindsay', 19620731), ('Jennifer', 19670702), ('Jennifer', 19620426), ('Carol', 19621009), ('Jill', 19640904), ('Elizabeth', 19680826), ('Pam', 19631220), ('Melissa', 19680411), ('Cynthia', 19640326), ('Amy', 19690902), ('Sherri', 19640202), ('Stephanie', 19650206), ('Patty', 19650331), ('Penny', 19640411), ('Wendy', 19640420), ('Katrina', 19680805), ('Leigh Anne', 19641214), ('Donna', 19710705), ('Jennifer', 19690226), ('Andrea', 19710930), ('Anna', 19660117), ('Kimberly', 19730327), ('Laxmi', 19721109), ('Kathy', 19650825), ('Halle', 19690805), ('Ronni', 19660510), ('Ann', 19701013), ('Mary Joe', 19710819), ('Jeri', 19701211), ('Carrie', 19720428), ('Shaun', 19681213), ('Audra', 19711117), ('Stacey', 19701113), ('Tami', 19681113), ('Stacey', 19680319), ('Ginger', 19680914), ('Monica', 19731202), ('Patty', 19680118), ('Nicole', 19690826), ('Jessica', 19700913), ('Kimberly', 19711020), ('Stephanie', 19691105), ('Debbie', 19700825), ('Susan', 19701205), ('Caroline', 19660825), ('Elly', 19690825), ('Meredith', 19710428), ('Sandra', 19740910), ('Anne', 19770119), ('Lindsay', 19770628), ('Venus', 19800617), ('Samantha', 19790117), ('Karin', 19771210), ('Jill', 19740704), ('Bunny', 19570905), ('Rayni', 19560524), ('Jennifer', 19810210), ('Holly', 19790210), ('Nancy', 19420823), ('Dorothy', 19250703), ('Kristy', 19500815), ('Valerie', 19490629), ('Linda', 19501021), ('Peaches', 19490416), ('Tory Ann', 19420808), ('Pamela', 19500312), ('Denise', 19500731), ('Wendy', 19470331), ('Becky', ''), ('Nancy', 19520731), ('Barbara', 19540304), ('Kristien', 19520725), ('Janet', 19530628), ('Daryl', 19540507), ('Ching Ling', 19481008), ('Robin', 19580513), ('Patricia', 19410811), ('Laurie', 19551104), ('Donna', 19541109), ('Linda', 19521114), ('Julie', 19480113), ('Jeanne', 19571005), ('Laurie', 19550614), ('Kathy', 19560618), ('Janice', 19520710), ('Kathy', 19561123)]",True
SPIDER_dev_435,wta_1,Find the average age of losers and winners of all matches.,"return matches ;return losers of #1 ;return winners of #1 ;return ages of #2 ;return ages of #3 ;return average of #4 ;return average of #5 ;return #6, #7","SELECT avg(loser_age) ,  avg(winner_age) FROM matches","SELECT AVG(matches.loser_age), AVG(matches.winner_age) FROM matches WHERE matches.loser_hand IN ( SELECT matches.loser_hand FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ) AND matches.winner_entry IN ( SELECT matches.winner_entry FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) )","[(27.31121386258453, 27.062177773183823)]","[(27.31121386258453, 27.062177773183823)]",True
SPIDER_dev_436,wta_1,What are the average ages of losers and winners across matches?,"return matches ;return losers of #1 ;return winners of #1 ;return ages of #2 ;return ages of #3 ;return average of #4 ;return average of #5 ;return #6, #7","SELECT avg(loser_age) ,  avg(winner_age) FROM matches","SELECT AVG(matches.loser_age), AVG(matches.winner_age) FROM matches WHERE matches.loser_hand IN ( SELECT matches.loser_hand FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ) AND matches.winner_entry IN ( SELECT matches.winner_entry FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) )","[(27.31121386258453, 27.062177773183823)]","[(27.31121386258453, 27.062177773183823)]",True
SPIDER_dev_437,wta_1,Find the average rank of winners in all matches.,return matches ;return winners of #1 ;return ranks of #2 ;return average of #3,SELECT avg(winner_rank) FROM matches,SELECT AVG(matches.winner_rank) FROM matches WHERE matches.winner_entry IN ( SELECT matches.winner_entry FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ),"[(13.715827338129497,)]","[(13.715827338129497,)]",True
SPIDER_dev_438,wta_1,What is the average rank for winners in all matches?,return matches ;return winners of #1 ;return ranks of #2 ;return average of #3,SELECT avg(winner_rank) FROM matches,SELECT AVG(matches.winner_rank) FROM matches WHERE matches.winner_entry IN ( SELECT matches.winner_entry FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ),"[(13.715827338129497,)]","[(13.715827338129497,)]",True
SPIDER_dev_439,wta_1,Find the highest rank of losers in all matches.,return matches ;return losers of #1 ;return ranks of #2 ;return highest #3 for each #1,SELECT min(loser_rank) FROM matches,"SELECT matches.loser_id, MAX(matches.loser_rank) FROM matches WHERE matches.loser_hand IN ( SELECT matches.loser_hand FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ) GROUP BY matches.loser_id","[(1,)]","[(200033, 1), (200748, 17), (201311, 29), (201320, 19), (201325, 28), (201347, 37), (201366, 33), (201397, 39), (201421, 23), (201425, 47), (201427, 44), (201444, 81), (201455, 20), (201458, 16), (201465, 59), (201474, 11), (201493, 9), (201495, 25), (201496, 25), (201499, 27), (201504, 56), (201505, 32), (201506, 7), (201512, 59), (201514, 66), (201517, 32), (201518, 60), (201520, 16), (201521, 34), (201527, 112), (201535, 30), (201539, 45), (201540, 34), (201585, 22), (201593, 32), (201594, 6), (201595, 61), (201596, 56), (201615, 32), (201616, 35), (201619, 24), (201621, 45), (201662, 19), (201693, 44), (202428, 28), (202429, 48), (202469, 7), (202470, 37), (202494, 23)]",False
SPIDER_dev_44,concert_singer,What are the number of concerts that occurred in the stadium with the largest capacity?,return stadiums ;return capacities of #1 ;return #1 where #2 is highest ;return concerts in #3 ;return number of #4,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),"SELECT COUNT(concert.concert_id) FROM concert, stadium WHERE stadium.stadium_id = concert.stadium_id AND stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium WHERE stadium.stadium_id IN ( SELECT stadium.stadium_id FROM stadium ) ORDER BY stadium.capacity DESC LIMIT 1 )","[(0,)]","[(0,)]",True
SPIDER_dev_440,wta_1,What is the best rank of losers across all matches?,return matches ;return losers of #1 ;return ranks of #2 ;return the highest #3,SELECT min(loser_rank) FROM matches,SELECT matches.loser_rank FROM matches WHERE matches.loser_rank IN ( SELECT matches.loser_rank FROM matches WHERE matches.loser_hand IN ( SELECT matches.loser_hand FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ) ) AND matches.loser_hand IN ( SELECT matches.loser_hand FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ) ORDER BY matches.loser_rank_points DESC LIMIT 1,"[(1,)]","[(1,)]",True
SPIDER_dev_441,wta_1,find the number of distinct country codes of all players.,return players ;return country codes of #1 ;return distinct #2 ;return number of #3,SELECT count(DISTINCT country_code) FROM players,SELECT COUNT(DISTINCT players.country_code) FROM players WHERE players.player_id IN ( SELECT players.player_id FROM players ),"[(153,)]","[(153,)]",True
SPIDER_dev_442,wta_1,How many distinct countries do players come from?,return players ;return countries of #1 ;return distinct #2 ;return number of #3,SELECT count(DISTINCT country_code) FROM players,SELECT COUNT(DISTINCT players.country_code) FROM players WHERE players.player_id IN ( SELECT players.player_id FROM players ),"[(153,)]","[(153,)]",True
SPIDER_dev_443,wta_1,Find the number of distinct name of losers.,return losers ;return names of #1 ;return distinct #2 ;return number of #3,SELECT count(DISTINCT loser_name) FROM matches,SELECT COUNT(DISTINCT matches.loser_name) FROM matches WHERE matches.loser_hand IN ( SELECT matches.loser_hand FROM matches ),"[(49,)]","[(49,)]",True
SPIDER_dev_444,wta_1,How many different loser names are there?,return loser names ;return different #1 ;return number of #2,SELECT count(DISTINCT loser_name) FROM matches,SELECT COUNT(DISTINCT matches.loser_name) FROM matches,"[(49,)]","[(49,)]",True
SPIDER_dev_445,wta_1,Find the name of tourney that has more than 10 matches.,return tourneys ;return matches of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 10 ;return name of #4,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10,SELECT matches.tourney_name FROM matches WHERE matches.tourney_name IN ( SELECT matches.tourney_name FROM matches WHERE matches.tourney_name IN ( SELECT matches.tourney_name FROM matches ) GROUP BY matches.tourney_name HAVING COUNT(matches.loser_id) > 10 ),"[('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]","[('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',)]",True
SPIDER_dev_446,wta_1,What are the names of tournaments that have more than 10 matches?,return tournaments ;return matches of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 10 ;return names of #4,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10,SELECT matches.tourney_name FROM matches WHERE matches.tourney_name IN ( SELECT matches.tourney_name FROM matches WHERE matches.tourney_name IN ( SELECT matches.tourney_name FROM matches ) GROUP BY matches.tourney_name HAVING COUNT(matches.loser_id) > 10 ),"[('Australian Open',), ('Cincinnati',), ('French Open',), ('Indian Wells',), ('Miami',), ('Singapore',), ('Us Open',), ('WTA Championships',), ('Wimbledon',)]","[('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('WTA Championships',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('French Open',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Singapore',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Australian Open',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Indian Wells',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Miami',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Wimbledon',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Cincinnati',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',), ('Us Open',)]",True
SPIDER_dev_447,wta_1,List the names of all winners who played in both 2013 and 2016.,return winners ;return #1 who played in 2013 ;return #1 who played in 2016 ;return #1 of both #2 and #3 ;return names of #4,SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016,SELECT DISTINCT matches.winner_name FROM matches WHERE matches.winner_name IN ( SELECT DISTINCT matches.winner_name FROM matches WHERE matches.year = 2013 AND matches.winner_name IN ( SELECT matches.winner_name FROM matches WHERE matches.year = 2016 ) ),"[('Angelique Kerber',), ('Petra Kvitova',), ('Sara Errani',), ('Serena Williams',), ('Victoria Azarenka',)]","[('Serena Williams',), ('Petra Kvitova',), ('Angelique Kerber',), ('Victoria Azarenka',), ('Sara Errani',)]",True
SPIDER_dev_448,wta_1,What are the names of players who won in both 2013 and 2016?,return players ;return #1 who won in 2013 ;return #1 who won in 2016 ;return #1 in both #2 and #3 ;return names of #4,SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016,"SELECT DISTINCT players.first_name FROM matches, players WHERE players.player_id = matches.loser_id AND players.player_id IN ( SELECT DISTINCT players.player_id FROM matches, players WHERE players.player_id = matches.loser_id AND matches.year = 2013 AND players.player_id IN ( SELECT players.player_id FROM matches, players WHERE players.player_id = matches.loser_id AND matches.year = 2016 ) )","[('Angelique Kerber',), ('Petra Kvitova',), ('Sara Errani',), ('Serena Williams',), ('Victoria Azarenka',)]","[('Agnieszka',), ('Petra',), ('Angelique',), ('Victoria',), ('Jelena',)]",False
SPIDER_dev_449,wta_1,List the number of all matches who played in years of 2013 or 2016.,return matches ;return years played of #1 ;return #1 where #2 is 2013 ;return #1 where #2 is 2016 ;return #3 or #4 ;return number of #5,SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,SELECT COUNT(matches.loser_id) FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) AND ((matches.year = 2013) OR (matches.year = 2016)),"[(170,)]","[(170,)]",True
SPIDER_dev_45,pets_1,Find the number of pets whose weight is heavier than 10.,return pets ;return weight of #1 ;return #1 where #2 is higher than 10 ;return number of #3,SELECT count(*) FROM pets WHERE weight  >  10,SELECT COUNT(pets.petid) FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets ) AND pets.weight > 10,"[(2,)]","[(2,)]",True
SPIDER_dev_450,wta_1,How many matches were played in 2013 or 2016?,return matches ;return #1 played in 2013 ;return #1 played in 2016 ;return number of #2 ;return number of #3 ;return sum of #4 and #5,SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,SELECT (SELECT COUNT(matches.loser_id) FROM matches WHERE matches.year = 2013) + (SELECT COUNT(matches.loser_id) FROM matches WHERE matches.year = 2016),"[(170,)]","[(170,)]",True
SPIDER_dev_451,wta_1,What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?,"return players ;return #1 who won in tourney wta championships ;return #1 who won in australian open ;return #1 of both #2 and #3 ;return country codes of #4 ;return first names of #4 ;return #5, #6","SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","SELECT players.country_code, players.first_name FROM matches, players WHERE players.player_id = matches.loser_id AND players.player_id IN ( SELECT DISTINCT players.player_id FROM matches, players WHERE players.player_id = matches.loser_id AND matches.tourney_name = 'WTA Championships' AND players.player_id IN ( SELECT players.player_id FROM matches, players WHERE players.player_id = matches.loser_id AND matches.tourney_name = 'Australian Open' ) )","[('GER', 'Angelique'), ('USA', 'Serena')]","[('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('BLR', 'Victoria'), ('BLR', 'Victoria'), ('BLR', 'Victoria'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka'), ('POL', 'Agnieszka')]",False
SPIDER_dev_452,wta_1,What are the first names and country codes for players who won both the WTA Championships and the Australian Open?,"return players ;return #1 who won the wta championships ;return #1 who won the australian open ;return #1 in both #2 and #3 ;return first names of #4 ;return country codes of #4 ;return #5, #6","SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","SELECT players.first_name, players.country_code FROM matches, players WHERE players.player_id = matches.loser_id AND players.player_id IN ( SELECT DISTINCT players.player_id FROM matches, players WHERE players.player_id = matches.loser_id AND matches.tourney_name = 'WTA Championships' AND players.player_id IN ( SELECT players.player_id FROM matches, players WHERE players.player_id = matches.loser_id AND matches.tourney_name = 'Australian Open' ) )","[('GER', 'Angelique'), ('USA', 'Serena')]","[('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Victoria', 'BLR'), ('Victoria', 'BLR'), ('Victoria', 'BLR'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL'), ('Agnieszka', 'POL')]",False
SPIDER_dev_453,wta_1,Find the first name and country code of the oldest player.,"return players ;return oldest #1 ;return first name of #2 ;return country code of #2 ;return #3, #4","SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","SELECT players.first_name, players.country_code FROM players WHERE players.player_id IN ( SELECT players.player_id FROM players ORDER BY players.birth_date ASC LIMIT 1 )","[('Thelma', 'AUS')]","[('Thelma', 'AUS')]",True
SPIDER_dev_454,wta_1,What is the first name and country code of the oldest player?,"return players ;return the oldest #1 ;return first name of #2 ;return country code of #2 ;return #3, #4","SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","SELECT players.first_name, players.country_code FROM players WHERE players.player_id IN ( SELECT players.player_id FROM players ORDER BY players.birth_date ASC LIMIT 1 )","[('Thelma', 'AUS')]","[('Thelma', 'AUS')]",True
SPIDER_dev_455,wta_1,List the first and last name of all players in the order of birth date.,"return players ;return first names of #1 ;return last names of #1 ;return birth dates of #1 ;return #2, #3 ;return #5 sorted by #4","SELECT first_name ,  last_name FROM players ORDER BY birth_date","SELECT players.first_name, players.last_name FROM players WHERE players.player_id IN ( SELECT players.player_id FROM players ) ORDER BY players.birth_date ASC","[('Thelma', 'Long'), ('Pauline', 'Addie'), ('Milly', 'Vagn Nielsen'), ('Vera', 'Johansen'), ('Reiko', 'Miyagi'), ('Louise', 'Brown'), ('Gertrude', 'Moran'), ('Zsuzsa', 'Kormoczy'), ('Peggy', 'Brixhe'), ('Betty', 'Pratt'), ('Doris', 'Hart'), ('Dorothy', 'Knode'), ('Ruth', 'Hauknes'), ('Althea', 'Gibson'), ('Suzanne', 'Le Besnerais'), ('Margarita', 'De Zuleta'), ('Helen', 'Parez'), ('Beverley', 'Rae'), ('Nora', 'Somoza'), ('Vera', 'Sukova'), ('Rita', 'Lauder'), ('Heather', 'Segal'), ('Benita', 'Senn'), ('Christiane', 'Mercelis'), ('Angela', 'Barrett'), ('Monique', 'Bedoret'), ('Florence', 'De La Courtie Billat'), ('Lorna', 'Greville Collins'), ('Shiu Man', 'Chan'), ('Tova', 'Epstein'), ('Nancy', 'Reed'), ('Ana Maria', 'Estalella Manso'), ('Sylvana', 'Lazzarino'), ('Jennifer', 'Hoad'), ('Shirley', 'Brasher'), ('Pat', 'Stewart'), ('Renee', 'Richards'), ('Yolande', 'Ramirez'), ('Lea', 'Pericoli'), ('Zsofia', 'Broszmann'), ('Yu Lan', 'Liu'), ('Jeanne', 'Arth'), ('Margot', 'Dittmeyer'), ('Francoise', 'Repoux'), ('Jacqueline', 'Rees Lewis'), ('Darlene', 'Hard'), ('Norma', 'Marsh'), ('Ruia', 'Morrison Davy'), ('Irene', 'Fraisse'), ('Jelena', 'Gencic'), ('Jenny', 'Ridderhof'), ('Edda', 'Buding'), ('Lucia', 'Bassi'), ('Patricia', 'Mattes'), ('Renata', 'Ostermann'), ('Lorraine', 'Robinson'), ('Judy', 'Dalton'), ('Bernice', 'Vukovich'), ('Anne Marie', 'Rouchon'), ('Maria', 'Chakarova'), ('Susan', 'Butt'), ('Janine', 'Lieffrig'), ('Roberta', 'Beltrame'), ('Elizabeth', 'Starkie'), ('Danuta', 'Rylska'), ('Ann', 'Jones'), ('Michele', 'Kahn'), ('Rosy', 'Darmon'), ('Claudine', 'Rouire'), ('Mimi', 'Kanarek'), ('Jean', 'Drysdale'), ('Maria', 'Bueno'), ('Renee', 'Schuurman'), ('Patricia', 'Cody'), ('Ann', 'Barclay'), ('Helga', 'Hosl'), ('Edda', 'Herdy'), ('Carmen', 'Mandarino'), ('Pia', 'Balling'), ('Deidre', 'Keller'), ('Andrea', 'Winkler'), ('Daniele', 'Bouteleux'), ('Anna', 'Dmitrieva'), ('Christine', 'Janes'), ('Katarina', 'Bartholdson'), ('Almut', 'Sturm'), ('Yohko', 'Obata'), ('Sonja', 'Pachta'), ('Tone', 'Schirmer'), ('Yuen Yuen', 'Ling'), ('Jan', 'Oneill'), ('Virginia', 'Caceres'), ('Kazuko', 'Kuromatsu'), ('Patricia', 'Reese'), ('Brenda', 'Dale'), ('Charleen', 'Hillebrand'), ('Gillian', 'Kay'), ('Helga', 'Masthoff'), ('Mary', 'Puljak'), ('Joyce', 'Davenport'), ('Jacqueline', 'Le Boubennec'), ('Margaret', 'Hunt'), ('Lynne', 'Nette'), ('Margaret', 'Court'), ('Tory Ann', 'Fretz'), ('Heide', 'Schildknecht'), ('Lesley', 'Bowrey'), ('Nancy', 'Richey'), ('Vincerzo', 'Napolio'), ('Geraldine', 'Barniville'), ('Alice', 'Tym'), ('Karen', 'Susman'), ('Francoise', 'Durr'), ('Ulla', 'Sandulf'), ('Liv', 'Jagge'), ('Carol Ann', 'Kalogeropoulos'), ('Judy', 'Alvarez'), ('Maria Jose', 'Aubet'), ('Carole', 'Graebner'), ('Maylis', 'Burel'), ('Kerstin', 'Seelbach'), ('Jennifer', 'Waggott'), ('Leena', 'Mutanen'), ('Annette', 'Du Plooy'), ('Billie Jean', 'King'), ('Maria Victoria', 'De Moggio'), ('Barbara', 'Olszewska'), ('Gill', 'Butterfield'), ('Ingrid', 'Bentzer'), ('Elsie', 'Veentjer Spruyt'), ('Faye', 'Moore'), ('Ana Maria', 'Bocio'), ('Frances', 'Maclennan'), ('Gitte', 'Ejlerskov'), ('Gertruida', 'Walhof'), ('Sally', 'Holdsworth'), ('Robin', 'Lloyd'), ('Monique', 'Krecke'), ('Vlasta', 'Kodesova'), ('Marketa', 'Wallenfels'), ('Kimiyo', 'Yagahara'), ('Joy', 'Emerson'), ('Robyn', 'Ebbern'), ('Madeleine', 'Pegel'), ('Joyce', 'Williams'), ('Maryna', 'Proctor'), ('Evelyne', 'Terras'), ('Yulia', 'Berberian'), ('Nadine', 'Netter'), ('Marijke', 'Schaar'), ('Maria Carmen', 'Arnoso'), ('Pamela', 'Brand'), ('Eva', 'Lundquist'), ('Liv', 'Hubert'), ('Elizabeth', 'Terry'), ('Alena', 'Palmeova West'), ('Hsiu', 'Lee'), ('Margaret', 'Harris'), ('Lubka', 'Radkova'), ('Gail', 'Benedetti'), ('Christiane', 'Spinoza'), ('Kerryl', 'Chute'), ('Kirsten', 'Robsahm'), ('Judith', 'Gohn'), ('Monique', 'Di Maso'), ('Betty', 'Stove'), ('Greta', 'Delport'), ('Virginia', 'Wade'), ('Galina', 'Baksheeva'), ('Vicky', 'Berner'), ('Patricia', 'Faulkner'), ('Maria Eugenia', 'Guzman'), ('Nancy', 'Spelman'), ('Brenda', 'Nunns'), ('Mary', 'Mclean'), ('Christina', 'Lindstrom'), ('Faye', 'Urban'), ('Eva', 'Szabo'), ('Glenda', 'Swan'), ('Erzsebet', 'Szell'), ('Julie', 'Heldman'), ('Lloyd', 'Hatcher'), ('Nell', 'Truman'), ('Johanne', 'Venturino'), ('Monica', 'Giorgi'), ('Irena', 'Skulj'), ('Marilyn', 'Greenwood'), ('Mabel', 'Vrancovich'), ('Patricia', 'Walkden'), ('Lita', 'Sugiarto'), ('Martha', 'Wolf Peterdy'), ('Stephanie', 'Johnson'), ('Dianne', 'Berkinshaw'), ('Patricia', 'Reyes'), ('Mara', 'Cohen Mintz'), ('Helen', 'Lennon'), ('Elizabeth', 'James'), ('Fiona', 'Mckenzie'), ('Susi', 'Eichenberger'), ('Laura', 'Rossouw')]","[('Thelma', 'Long'), ('Pauline', 'Addie'), ('Milly', 'Vagn Nielsen'), ('Vera', 'Johansen'), ('Reiko', 'Miyagi'), ('Louise', 'Brown'), ('Gertrude', 'Moran'), ('Zsuzsa', 'Kormoczy'), ('Peggy', 'Brixhe'), ('Betty', 'Pratt'), ('Doris', 'Hart'), ('Dorothy', 'Knode'), ('Ruth', 'Hauknes'), ('Althea', 'Gibson'), ('Suzanne', 'Le Besnerais'), ('Margarita', 'De Zuleta'), ('Helen', 'Parez'), ('Beverley', 'Rae'), ('Nora', 'Somoza'), ('Vera', 'Sukova'), ('Rita', 'Lauder'), ('Heather', 'Segal'), ('Benita', 'Senn'), ('Christiane', 'Mercelis'), ('Angela', 'Barrett'), ('Monique', 'Bedoret'), ('Florence', 'De La Courtie Billat'), ('Lorna', 'Greville Collins'), ('Shiu Man', 'Chan'), ('Tova', 'Epstein'), ('Nancy', 'Reed'), ('Ana Maria', 'Estalella Manso'), ('Sylvana', 'Lazzarino'), ('Jennifer', 'Hoad'), ('Shirley', 'Brasher'), ('Pat', 'Stewart'), ('Renee', 'Richards'), ('Yolande', 'Ramirez'), ('Lea', 'Pericoli'), ('Zsofia', 'Broszmann'), ('Yu Lan', 'Liu'), ('Jeanne', 'Arth'), ('Margot', 'Dittmeyer'), ('Francoise', 'Repoux'), ('Jacqueline', 'Rees Lewis'), ('Darlene', 'Hard'), ('Norma', 'Marsh'), ('Ruia', 'Morrison Davy'), ('Irene', 'Fraisse'), ('Jelena', 'Gencic'), ('Jenny', 'Ridderhof'), ('Edda', 'Buding'), ('Lucia', 'Bassi'), ('Patricia', 'Mattes'), ('Renata', 'Ostermann'), ('Lorraine', 'Robinson'), ('Judy', 'Dalton'), ('Bernice', 'Vukovich'), ('Anne Marie', 'Rouchon'), ('Maria', 'Chakarova'), ('Susan', 'Butt'), ('Janine', 'Lieffrig'), ('Roberta', 'Beltrame'), ('Elizabeth', 'Starkie'), ('Danuta', 'Rylska'), ('Ann', 'Jones'), ('Michele', 'Kahn'), ('Rosy', 'Darmon'), ('Claudine', 'Rouire'), ('Mimi', 'Kanarek'), ('Jean', 'Drysdale'), ('Maria', 'Bueno'), ('Renee', 'Schuurman'), ('Patricia', 'Cody'), ('Ann', 'Barclay'), ('Helga', 'Hosl'), ('Edda', 'Herdy'), ('Carmen', 'Mandarino'), ('Pia', 'Balling'), ('Deidre', 'Keller'), ('Andrea', 'Winkler'), ('Daniele', 'Bouteleux'), ('Anna', 'Dmitrieva'), ('Christine', 'Janes'), ('Katarina', 'Bartholdson'), ('Almut', 'Sturm'), ('Yohko', 'Obata'), ('Sonja', 'Pachta'), ('Tone', 'Schirmer'), ('Yuen Yuen', 'Ling'), ('Jan', 'Oneill'), ('Virginia', 'Caceres'), ('Kazuko', 'Kuromatsu'), ('Patricia', 'Reese'), ('Brenda', 'Dale'), ('Charleen', 'Hillebrand'), ('Gillian', 'Kay'), ('Helga', 'Masthoff'), ('Mary', 'Puljak'), ('Joyce', 'Davenport'), ('Jacqueline', 'Le Boubennec'), ('Margaret', 'Hunt'), ('Lynne', 'Nette'), ('Margaret', 'Court'), ('Tory Ann', 'Fretz'), ('Heide', 'Schildknecht'), ('Lesley', 'Bowrey'), ('Nancy', 'Richey'), ('Vincerzo', 'Napolio'), ('Geraldine', 'Barniville'), ('Alice', 'Tym'), ('Karen', 'Susman'), ('Francoise', 'Durr'), ('Ulla', 'Sandulf'), ('Liv', 'Jagge'), ('Carol Ann', 'Kalogeropoulos'), ('Judy', 'Alvarez'), ('Maria Jose', 'Aubet'), ('Carole', 'Graebner'), ('Maylis', 'Burel'), ('Kerstin', 'Seelbach'), ('Jennifer', 'Waggott'), ('Leena', 'Mutanen'), ('Annette', 'Du Plooy'), ('Billie Jean', 'King'), ('Maria Victoria', 'De Moggio'), ('Barbara', 'Olszewska'), ('Gill', 'Butterfield'), ('Ingrid', 'Bentzer'), ('Elsie', 'Veentjer Spruyt'), ('Faye', 'Moore'), ('Ana Maria', 'Bocio'), ('Frances', 'Maclennan'), ('Gitte', 'Ejlerskov'), ('Gertruida', 'Walhof'), ('Sally', 'Holdsworth'), ('Robin', 'Lloyd'), ('Monique', 'Krecke'), ('Vlasta', 'Kodesova'), ('Marketa', 'Wallenfels'), ('Kimiyo', 'Yagahara'), ('Joy', 'Emerson'), ('Robyn', 'Ebbern'), ('Madeleine', 'Pegel'), ('Joyce', 'Williams'), ('Maryna', 'Proctor'), ('Evelyne', 'Terras'), ('Yulia', 'Berberian'), ('Nadine', 'Netter'), ('Marijke', 'Schaar'), ('Maria Carmen', 'Arnoso'), ('Pamela', 'Brand'), ('Eva', 'Lundquist'), ('Liv', 'Hubert'), ('Elizabeth', 'Terry'), ('Alena', 'Palmeova West'), ('Hsiu', 'Lee'), ('Margaret', 'Harris'), ('Lubka', 'Radkova'), ('Gail', 'Benedetti'), ('Christiane', 'Spinoza'), ('Kerryl', 'Chute'), ('Kirsten', 'Robsahm'), ('Judith', 'Gohn'), ('Monique', 'Di Maso'), ('Betty', 'Stove'), ('Greta', 'Delport'), ('Virginia', 'Wade'), ('Galina', 'Baksheeva'), ('Vicky', 'Berner'), ('Patricia', 'Faulkner'), ('Maria Eugenia', 'Guzman'), ('Nancy', 'Spelman'), ('Brenda', 'Nunns'), ('Mary', 'Mclean'), ('Christina', 'Lindstrom'), ('Faye', 'Urban'), ('Eva', 'Szabo'), ('Glenda', 'Swan'), ('Erzsebet', 'Szell'), ('Julie', 'Heldman'), ('Lloyd', 'Hatcher'), ('Nell', 'Truman'), ('Johanne', 'Venturino'), ('Monica', 'Giorgi'), ('Irena', 'Skulj'), ('Marilyn', 'Greenwood'), ('Mabel', 'Vrancovich'), ('Patricia', 'Walkden'), ('Lita', 'Sugiarto'), ('Martha', 'Wolf Peterdy'), ('Stephanie', 'Johnson'), ('Dianne', 'Berkinshaw'), ('Patricia', 'Reyes'), ('Mara', 'Cohen Mintz'), ('Helen', 'Lennon'), ('Elizabeth', 'James'), ('Fiona', 'Mckenzie'), ('Susi', 'Eichenberger'), ('Laura', 'Rossouw')]",True
SPIDER_dev_456,wta_1,"What are the full names of all players, sorted by birth date?",return players ;return full names of #1 ;return birth dates of #1 ;return #2 sorted by #3,"SELECT first_name ,  last_name FROM players ORDER BY birth_date",SELECT players.first_name FROM players WHERE players.player_id IN ( SELECT players.player_id FROM players ) ORDER BY players.birth_date ASC,"[('Thelma', 'Long'), ('Pauline', 'Addie'), ('Milly', 'Vagn Nielsen'), ('Vera', 'Johansen'), ('Reiko', 'Miyagi'), ('Louise', 'Brown'), ('Gertrude', 'Moran'), ('Zsuzsa', 'Kormoczy'), ('Peggy', 'Brixhe'), ('Betty', 'Pratt'), ('Doris', 'Hart'), ('Dorothy', 'Knode'), ('Ruth', 'Hauknes'), ('Althea', 'Gibson'), ('Suzanne', 'Le Besnerais'), ('Margarita', 'De Zuleta'), ('Helen', 'Parez'), ('Beverley', 'Rae'), ('Nora', 'Somoza'), ('Vera', 'Sukova'), ('Rita', 'Lauder'), ('Heather', 'Segal'), ('Benita', 'Senn'), ('Christiane', 'Mercelis'), ('Angela', 'Barrett'), ('Monique', 'Bedoret'), ('Florence', 'De La Courtie Billat'), ('Lorna', 'Greville Collins'), ('Shiu Man', 'Chan'), ('Tova', 'Epstein'), ('Nancy', 'Reed'), ('Ana Maria', 'Estalella Manso'), ('Sylvana', 'Lazzarino'), ('Jennifer', 'Hoad'), ('Shirley', 'Brasher'), ('Pat', 'Stewart'), ('Renee', 'Richards'), ('Yolande', 'Ramirez'), ('Lea', 'Pericoli'), ('Zsofia', 'Broszmann'), ('Yu Lan', 'Liu'), ('Jeanne', 'Arth'), ('Margot', 'Dittmeyer'), ('Francoise', 'Repoux'), ('Jacqueline', 'Rees Lewis'), ('Darlene', 'Hard'), ('Norma', 'Marsh'), ('Ruia', 'Morrison Davy'), ('Irene', 'Fraisse'), ('Jelena', 'Gencic'), ('Jenny', 'Ridderhof'), ('Edda', 'Buding'), ('Lucia', 'Bassi'), ('Patricia', 'Mattes'), ('Renata', 'Ostermann'), ('Lorraine', 'Robinson'), ('Judy', 'Dalton'), ('Bernice', 'Vukovich'), ('Anne Marie', 'Rouchon'), ('Maria', 'Chakarova'), ('Susan', 'Butt'), ('Janine', 'Lieffrig'), ('Roberta', 'Beltrame'), ('Elizabeth', 'Starkie'), ('Danuta', 'Rylska'), ('Ann', 'Jones'), ('Michele', 'Kahn'), ('Rosy', 'Darmon'), ('Claudine', 'Rouire'), ('Mimi', 'Kanarek'), ('Jean', 'Drysdale'), ('Maria', 'Bueno'), ('Renee', 'Schuurman'), ('Patricia', 'Cody'), ('Ann', 'Barclay'), ('Helga', 'Hosl'), ('Edda', 'Herdy'), ('Carmen', 'Mandarino'), ('Pia', 'Balling'), ('Deidre', 'Keller'), ('Andrea', 'Winkler'), ('Daniele', 'Bouteleux'), ('Anna', 'Dmitrieva'), ('Christine', 'Janes'), ('Katarina', 'Bartholdson'), ('Almut', 'Sturm'), ('Yohko', 'Obata'), ('Sonja', 'Pachta'), ('Tone', 'Schirmer'), ('Yuen Yuen', 'Ling'), ('Jan', 'Oneill'), ('Virginia', 'Caceres'), ('Kazuko', 'Kuromatsu'), ('Patricia', 'Reese'), ('Brenda', 'Dale'), ('Charleen', 'Hillebrand'), ('Gillian', 'Kay'), ('Helga', 'Masthoff'), ('Mary', 'Puljak'), ('Joyce', 'Davenport'), ('Jacqueline', 'Le Boubennec'), ('Margaret', 'Hunt'), ('Lynne', 'Nette'), ('Margaret', 'Court'), ('Tory Ann', 'Fretz'), ('Heide', 'Schildknecht'), ('Lesley', 'Bowrey'), ('Nancy', 'Richey'), ('Vincerzo', 'Napolio'), ('Geraldine', 'Barniville'), ('Alice', 'Tym'), ('Karen', 'Susman'), ('Francoise', 'Durr'), ('Ulla', 'Sandulf'), ('Liv', 'Jagge'), ('Carol Ann', 'Kalogeropoulos'), ('Judy', 'Alvarez'), ('Maria Jose', 'Aubet'), ('Carole', 'Graebner'), ('Maylis', 'Burel'), ('Kerstin', 'Seelbach'), ('Jennifer', 'Waggott'), ('Leena', 'Mutanen'), ('Annette', 'Du Plooy'), ('Billie Jean', 'King'), ('Maria Victoria', 'De Moggio'), ('Barbara', 'Olszewska'), ('Gill', 'Butterfield'), ('Ingrid', 'Bentzer'), ('Elsie', 'Veentjer Spruyt'), ('Faye', 'Moore'), ('Ana Maria', 'Bocio'), ('Frances', 'Maclennan'), ('Gitte', 'Ejlerskov'), ('Gertruida', 'Walhof'), ('Sally', 'Holdsworth'), ('Robin', 'Lloyd'), ('Monique', 'Krecke'), ('Vlasta', 'Kodesova'), ('Marketa', 'Wallenfels'), ('Kimiyo', 'Yagahara'), ('Joy', 'Emerson'), ('Robyn', 'Ebbern'), ('Madeleine', 'Pegel'), ('Joyce', 'Williams'), ('Maryna', 'Proctor'), ('Evelyne', 'Terras'), ('Yulia', 'Berberian'), ('Nadine', 'Netter'), ('Marijke', 'Schaar'), ('Maria Carmen', 'Arnoso'), ('Pamela', 'Brand'), ('Eva', 'Lundquist'), ('Liv', 'Hubert'), ('Elizabeth', 'Terry'), ('Alena', 'Palmeova West'), ('Hsiu', 'Lee'), ('Margaret', 'Harris'), ('Lubka', 'Radkova'), ('Gail', 'Benedetti'), ('Christiane', 'Spinoza'), ('Kerryl', 'Chute'), ('Kirsten', 'Robsahm'), ('Judith', 'Gohn'), ('Monique', 'Di Maso'), ('Betty', 'Stove'), ('Greta', 'Delport'), ('Virginia', 'Wade'), ('Galina', 'Baksheeva'), ('Vicky', 'Berner'), ('Patricia', 'Faulkner'), ('Maria Eugenia', 'Guzman'), ('Nancy', 'Spelman'), ('Brenda', 'Nunns'), ('Mary', 'Mclean'), ('Christina', 'Lindstrom'), ('Faye', 'Urban'), ('Eva', 'Szabo'), ('Glenda', 'Swan'), ('Erzsebet', 'Szell'), ('Julie', 'Heldman'), ('Lloyd', 'Hatcher'), ('Nell', 'Truman'), ('Johanne', 'Venturino'), ('Monica', 'Giorgi'), ('Irena', 'Skulj'), ('Marilyn', 'Greenwood'), ('Mabel', 'Vrancovich'), ('Patricia', 'Walkden'), ('Lita', 'Sugiarto'), ('Martha', 'Wolf Peterdy'), ('Stephanie', 'Johnson'), ('Dianne', 'Berkinshaw'), ('Patricia', 'Reyes'), ('Mara', 'Cohen Mintz'), ('Helen', 'Lennon'), ('Elizabeth', 'James'), ('Fiona', 'Mckenzie'), ('Susi', 'Eichenberger'), ('Laura', 'Rossouw')]","[('Thelma',), ('Pauline',), ('Milly',), ('Vera',), ('Reiko',), ('Louise',), ('Gertrude',), ('Zsuzsa',), ('Peggy',), ('Betty',), ('Doris',), ('Dorothy',), ('Ruth',), ('Althea',), ('Suzanne',), ('Margarita',), ('Helen',), ('Beverley',), ('Nora',), ('Vera',), ('Rita',), ('Heather',), ('Benita',), ('Christiane',), ('Angela',), ('Monique',), ('Florence',), ('Lorna',), ('Shiu Man',), ('Tova',), ('Nancy',), ('Ana Maria',), ('Sylvana',), ('Jennifer',), ('Shirley',), ('Pat',), ('Renee',), ('Yolande',), ('Lea',), ('Zsofia',), ('Yu Lan',), ('Jeanne',), ('Margot',), ('Francoise',), ('Jacqueline',), ('Darlene',), ('Norma',), ('Ruia',), ('Irene',), ('Jelena',), ('Jenny',), ('Edda',), ('Lucia',), ('Patricia',), ('Renata',), ('Lorraine',), ('Judy',), ('Bernice',), ('Anne Marie',), ('Maria',), ('Susan',), ('Janine',), ('Roberta',), ('Elizabeth',), ('Danuta',), ('Ann',), ('Michele',), ('Rosy',), ('Claudine',), ('Mimi',), ('Jean',), ('Maria',), ('Renee',), ('Patricia',), ('Ann',), ('Helga',), ('Edda',), ('Carmen',), ('Pia',), ('Deidre',), ('Andrea',), ('Daniele',), ('Anna',), ('Christine',), ('Katarina',), ('Almut',), ('Yohko',), ('Sonja',), ('Tone',), ('Yuen Yuen',), ('Jan',), ('Virginia',), ('Kazuko',), ('Patricia',), ('Brenda',), ('Charleen',), ('Gillian',), ('Helga',), ('Mary',), ('Joyce',), ('Jacqueline',), ('Margaret',), ('Lynne',), ('Margaret',), ('Tory Ann',), ('Heide',), ('Lesley',), ('Nancy',), ('Vincerzo',), ('Geraldine',), ('Alice',), ('Karen',), ('Francoise',), ('Ulla',), ('Liv',), ('Carol Ann',), ('Judy',), ('Maria Jose',), ('Carole',), ('Maylis',), ('Kerstin',), ('Jennifer',), ('Leena',), ('Annette',), ('Billie Jean',), ('Maria Victoria',), ('Barbara',), ('Gill',), ('Ingrid',), ('Elsie',), ('Faye',), ('Ana Maria',), ('Frances',), ('Gitte',), ('Gertruida',), ('Sally',), ('Robin',), ('Monique',), ('Vlasta',), ('Marketa',), ('Kimiyo',), ('Joy',), ('Robyn',), ('Madeleine',), ('Joyce',), ('Maryna',), ('Evelyne',), ('Yulia',), ('Nadine',), ('Marijke',), ('Maria Carmen',), ('Pamela',), ('Eva',), ('Liv',), ('Elizabeth',), ('Alena',), ('Hsiu',), ('Margaret',), ('Lubka',), ('Gail',), ('Christiane',), ('Kerryl',), ('Kirsten',), ('Judith',), ('Monique',), ('Betty',), ('Greta',), ('Virginia',), ('Galina',), ('Vicky',), ('Patricia',), ('Maria Eugenia',), ('Nancy',), ('Brenda',), ('Mary',), ('Christina',), ('Faye',), ('Eva',), ('Glenda',), ('Erzsebet',), ('Julie',), ('Lloyd',), ('Nell',), ('Johanne',), ('Monica',), ('Irena',), ('Marilyn',), ('Mabel',), ('Patricia',), ('Lita',), ('Martha',), ('Stephanie',), ('Dianne',), ('Patricia',), ('Mara',), ('Helen',), ('Elizabeth',), ('Fiona',), ('Susi',), ('Laura',)]",False
SPIDER_dev_457,wta_1,List the first and last name of all players who are left / L hand in the order of birth date.,"return players ;return #1 who are left / l hand ;return first names of #2 ;return last names of #2 ;return birth dates of #2 ;return #3, #4 ;return #6 sorted by #5","SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","SELECT players.first_name, players.last_name FROM players WHERE players.hand IN ( SELECT players.hand FROM players WHERE players.hand = 'L' ) ORDER BY players.birth_date ASC","[('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Fatima', 'El Allami'), ('Simonetta', 'Miori'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara')]","[('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Fatima', 'El Allami'), ('Simonetta', 'Miori'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara')]",True
SPIDER_dev_458,wta_1,"What are the full names of all left handed players, in order of birth date?",return players ;return #1 that are left handed ;return full names of #2 ;return birth dates of #2 ;return #3 sorted by #4,"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date",SELECT players.first_name FROM players WHERE players.hand IN ( SELECT players.hand FROM players WHERE players.hand = 'L' ) ORDER BY players.birth_date ASC,"[('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Aya', 'El Akkad'), ('Alexandra', 'Kazanova'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Sanaa', 'Bhambri'), ('Diana Andreea', 'Gae'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Fatima', 'El Allami'), ('Simonetta', 'Miori'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara')]","[('Ann',), ('Wendy',), ('Martina',), ('Mary',), ('Katerina',), ('Petra',), ('Nancy',), ('Lise',), ('Rene',), ('Nicole',), ('Florencia',), ('Sabine',), ('Andreea',), ('Monica',), ('Gala',), ('Karen',), ('Julie',), ('Vanessa',), ('Elena',), ('Anca',), ('Francesca',), ('Gaelle',), ('Amanda',), ('Amanda',), ('Rita',), ('Amelie',), ('Amelie',), ('Saori',), ('Marine',), ('Patty',), ('Julie',), ('Joana',), ('Barbara',), ('Ludmilla',), ('Magui',), ('Amanda',), ('Kim',), ('Emilie',), ('Erika',), ('Anne Gaelle',), ('Erica',), ('Stephanie',), ('Sybille',), ('Lisa',), ('Maja',), ('Leanne',), ('Aurelie',), ('Carla',), ('Erika',), ('Jelena',), ('Clarisa',), ('Ansley',), ('Dimana',), ('Maria Jose',), ('Zerene',), ('Melinda',), ('Sandra',), ('Maria Elizabeth',), ('Salome',), ('Lindsay',), ('Iveta',), ('Eugenia',), ('Chun Yan',), ('Maria Fernanda',), ('Emily',), ('Fernanda',), ('Annabel',), ('Julia',), ('Ana Lucia',), ('Elizabeth',), ('Galina',), ('Elise',), ('Bit Na',), ('Sonia',), ('Mariana Pires',), ('Natalia',), ('Irina',), ('Meghha',), ('Angela',), ('Karly',), ('Casey',), ('Kathrin',), ('Beatrix',), ('Zsuzsanna',), ('Emily',), ('Olga',), ('Theresa',), ('Jin A',), ('Hannah',), ('Andreea',), ('Valentina',), ('Helen',), ('Sandra',), ('Isha',), ('Krushmi',), ('Ljubica',), ('Avel Romaly',), ('Shadisha',), ('Carla',), ('Diana',), ('Cecile',), ('Laura',), ('Rie',), ('Danielle',), ('Alejandra',), ('Ariela',), ('Vasilisa',), ('Emilia',), ('Lizaan',), ('Claire',), ('Alexandria',), ('Katharine',), ('Emma',), ('Geraldine',), ('Aya',), ('Alexandra',), ('Allison',), ('Lucy',), ('Monika',), ('Jitka',), ('Elena',), ('Varvara',), ('Claire',), ('Seheno',), ('Karolina',), ('Melisa',), ('Shraddha',), ('Sylvia',), ('Amina',), ('Hendrike Lea',), ('Dunja',), ('Micaela',), ('Katerina',), ('Catherine',), ('Yurika',), ('Sheng Nan',), ('Lucie',), ('Jitka',), ('Carolina',), ('Tapiwa',), ('Punam',), ('Katia',), ('Shana',), ('Chrissie',), ('Yui',), ('Marcela',), ('Seul Ki',), ('Nina',), ('Hannah',), ('Karen',), ('Angelique',), ('Lauren',), ('Rana',), ('Nicole',), ('Ana',), ('Sanaa',), ('Diana Andreea',), ('Ana',), ('Barbora',), ('Camila',), ('Violette',), ('Megumi',), ('Rita',), ('Mihaela',), ('Liset',), ('Paulina',), ('Ekaterina',), ('Dessislava',), ('Sanaz',), ('Cristina',), ('Cagla',), ('Liege',), ('Chang',), ('Jessica',), ('Yi Fan',), ('Eloisa Maria',), ('Karina',), ('Ornella',), ('Valeria',), ('Bianca Ioana',), ('Michelle',), ('Monika',), ('Amandine',), ('Fatima',), ('Simonetta',), ('Gabriela',), ('Sherazad',), ('Sherazad',), ('Zora',), ('Naomi',), ('Nathalia',), ('Maria Eugenia',), ('Lauren',), ('Roxane',), ('Ivana',), ('Petra',), ('Majdouline',), ('Laura',), ('Ia',), ('Alessandra',)]",False
SPIDER_dev_459,wta_1,Find the first name and country code of the player who did the most number of tours.,"return players ;return tours of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return first name of #4 ;return country code of #4 ;return #5, #6","SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","SELECT players.first_name, players.country_code FROM rankings, players WHERE players.player_id = rankings.player_id AND players.player_id IN ( SELECT players.player_id FROM rankings, players WHERE players.player_id = rankings.player_id AND players.player_id IN ( SELECT players.player_id FROM players ) ORDER BY rankings.tours DESC LIMIT 1 )","[('USA', 'Julia')]","[('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA')]",True
SPIDER_dev_46,pets_1,How many pets have a greater weight than 10?,return pets ;return weights of #1 ;return #1 where #2 is higher than 10 ;return number of #3,SELECT count(*) FROM pets WHERE weight  >  10,SELECT COUNT(pets.petid) FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets ) AND pets.weight > 10,"[(2,)]","[(2,)]",True
SPIDER_dev_460,wta_1,What is the first name and country code of the player with the most tours?,"return players ;return tours of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return first name of #4 ;return country code of #4 ;return #5, #6","SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","SELECT players.first_name, players.country_code FROM rankings, players WHERE players.player_id = rankings.player_id AND players.player_id IN ( SELECT players.player_id FROM rankings, players WHERE players.player_id = rankings.player_id AND players.player_id IN ( SELECT players.player_id FROM players ) ORDER BY rankings.tours DESC LIMIT 1 )","[('USA', 'Julia')]","[('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA'), ('Julia', 'USA')]",True
SPIDER_dev_461,wta_1,Find the year that has the most number of matches.,return years ;return matches of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,SELECT matches.year FROM matches WHERE matches.year IN ( SELECT matches.year FROM matches ) GROUP BY matches.year ORDER BY COUNT(matches.loser_id) DESC LIMIT 1,"[(2016,)]","[(2016,)]",True
SPIDER_dev_462,wta_1,Which year had the most matches?,return years ;return matches of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,SELECT matches.year FROM matches WHERE matches.year IN ( SELECT matches.year FROM matches ) GROUP BY matches.year ORDER BY COUNT(matches.loser_id) DESC LIMIT 1,"[(2016,)]","[(2016,)]",True
SPIDER_dev_463,wta_1,Find the name and rank points of the winner who won the most times.,"return winners ;return number of times #1 won ;return #1 where #2 is highest ;return name of #3 ;return rank points of #3 ;return #4, #5","SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","SELECT matches.winner_name, matches.winner_rank_points FROM matches WHERE matches.winner_entry IN ( SELECT matches.winner_entry FROM matches WHERE matches.winner_entry IN ( SELECT matches.winner_entry FROM matches ) ORDER BY matches.match_num DESC LIMIT 1 )","[('Angelique Kerber', 3715)]","[('Serena Williams', 12040), ('Serena Williams', 12040), ('Serena Williams', 12040), ('Petra Kvitova', 4370), ('Angelique Kerber', 3715), ('Petra Kvitova', 4370), ('Na Li', 5120), ('Victoria Azarenka', 7676), ('Jelena Jankovic', 3860), ('Na Li', 5120), ('Na Li', 5120), ('Sara Errani', 4190), ('Sloane Stephens', 1715), ('Angelique Kerber', 3590), ('Alize Cornet', 1180), ('Simona Halep', 5880), ('Ekaterina Makarova', 2300), ('Madison Keys', 2600), ('Agnieszka Radwanska', 4670), ('Angelique Kerber', 3710), ('Serena Williams', 9945), ('Angelique Kerber', 3710), ('Venus Williams', 3091), ('Misaki Doi', 912), ('Roberta Vinci', 2885), ('Sloane Stephens', 1965), ('Yanina Wickmayer', 1026), ('Carla Suarez Navarro', 3300), ('Agnieszka Radwanska', 5210), ('Victoria Azarenka', 2660), ('Serena Williams', 9245), ('Victoria Azarenka', 2660), ('Serena Williams', 9245), ('Agnieszka Radwanska', 5450), ('Agnieszka Radwanska', 5450), ('Victoria Azarenka', 2660), ('Simona Halep', 4745), ('Agnieszka Radwanska', 5450), ('Roberta Vinci', 3455), ('Karolina Pliskova', 2525), ('Victoria Azarenka', 3595), ('Victoria Azarenka', 3595), ('Svetlana Kuznetsova', 2480), ('Angelique Kerber', 5700), ('Svetlana Kuznetsova', 2480), ('Ekaterina Makarova', 1571), ('Victoria Azarenka', 3595), ('Elina Svitolina', 2695), ('Ekaterina Makarova', 1571), ('Madison Keys', 2005), ('Sloane Stephens', 1900), ('Sara Errani', 2420), ('Dominika Cibulkova', 1076), ('Camila Giorgi', 1145), ('Angelique Kerber', 5740), ('Petra Kvitova', 3763), ('Angelique Kerber', 5740), ('Lucie Safarova', 2714), ('Samantha Stosur', 1870), ('Lucie Safarova', 2714), ('Samantha Stosur', 1870), ('Serena Williams', 8235), ('Serena Williams', 9030), ('Elina Svitolina', 2416), ('Carla Suarez Navarro', 2585), ('Svetlana Kuznetsova', 2585), ('Samantha Stosur', 2050), ('Agnieszka Radwanska', 5850), ('Serena Williams', 9030), ('Garbine Muguruza', 5196), ('Samantha Stosur', 2050), ('Garbine Muguruza', 5196), ('Garbine Muguruza', 5196), ('Coco Vandeweghe', 1302), ('Madison Keys', 2592), ('Carla Suarez Navarro', 2695), ('Dominika Cibulkova', 2081), ('Dominika Cibulkova', 2081), ('Svetlana Kuznetsova', 2730), ('Coco Vandeweghe', 1652), ('Simona Halep', 4372), ('Serena Williams', 8330), ('Anastasia Pavlyuchenkova', 1960), ('Dominika Cibulkova', 2451), ('Simona Halep', 4372), ('Venus Williams', 3116), ('Serena Williams', 8330), ('Angelique Kerber', 5330), ('Angelique Kerber', 5330), ('Serena Williams', 8330), ('Johanna Larsson', 845), ('Dominika Cibulkova', 2871), ('Yanina Wickmayer', 1255), ('Simona Halep', 5071), ('Simona Halep', 5071), ('Madison Keys', 2871), ('Simona Halep', 5071), ('Anastasia Pavlyuchenkova', 2320), ('Madison Keys', 2871), ('Svetlana Kuznetsova', 2900), ('Simona Halep', 5071), ('Angelique Kerber', 6500), ('Irina Camelia Begu', 1645), ('Elina Svitolina', 2146), ('Madison Keys', 3401), ('Angelique Kerber', 6380), ('Petra Kvitova', 2920), ('Angelique Kerber', 6380), ('Petra Kvitova', 2920), ('Karolina Pliskova', 2340), ('Karolina Pliskova', 2340), ('Angelique Kerber', 6375), ('Karolina Pliskova', 2340), ('Simona Halep', 5386), ('Angelique Kerber', 6375), ('Garbine Muguruza', 5481), ('Carla Suarez Navarro', 3010), ('Agnieszka Radwanska', 5340), ('Agnieszka Radwanska', 5340), ('Carla Suarez Navarro', 3100), ('Simona Halep', 5151), ('Karolina Pliskova', 3135), ('Petra Kvitova', 2580), ('Simona Halep', 5151), ('Karolina Pliskova', 3135), ('Angelique Kerber', 6860), ('Serena Williams', 7050), ('Angelique Kerber', 6860), ('Karolina Pliskova', 3135), ('Angelique Kerber', 6860), ('Petra Kvitova', 2390), ('Petra Kvitova', 2390), ('Dominika Cibulkova', 2975), ('Simona Halep', 4742), ('Svetlana Kuznetsova', 3250), ('Petra Kvitova', 2390), ('Svetlana Kuznetsova', 3250), ('Dominika Cibulkova', 2975), ('Agnieszka Radwanska', 5535), ('Madison Keys', 3417), ('Elina Svitolina', 2186), ('Madison Keys', 3417), ('Petra Kvitova', 3185), ('Caroline Wozniacki', 1970), ('Dominika Cibulkova', 3445), ('Dominika Cibulkova', 3445), ('Petra Kvitova', 3390), ('Svetlana Kuznetsova', 3540), ('Svetlana Kuznetsova', 3540), ('Dominika Cibulkova', 3625), ('Angelique Kerber', 8000), ('Dominika Cibulkova', 3625), ('Angelique Kerber', 8000), ('Angelique Kerber', 8000), ('Angelique Kerber', 8000), ('Simona Halep', 4728), ('Dominika Cibulkova', 3625), ('Madison Keys', 3637), ('Agnieszka Radwanska', 4975), ('Agnieszka Radwanska', 4975), ('Svetlana Kuznetsova', 3490), ('Karolina Pliskova', 4100), ('Svetlana Kuznetsova', 3490), ('Garbine Muguruza', 3736), ('Petra Kvitova', 2840), ('Petra Kvitova', 2840), ('Petra Kvitova', 2840), ('Elina Svitolina', 2456), ('Elena Vesnina', 2094), ('Alize Cornet', 1215), ('Karolina Pliskova', 4600), ('Elina Svitolina', 2895), ('Karolina Pliskova', 4600), ('Garbine Muguruza', 4236), ('Anastasia Pavlyuchenkova', 1620), ('Ekaterina Makarova', 1377), ('Anastasia Pavlyuchenkova', 1620), ('Serena Williams', 7080), ('Venus Williams', 2240), ('Serena Williams', 7080), ('Dominika Cibulkova', 4985), ('Karolina Pliskova', 5270), ('Timea Babos', 1445), ('Timea Babos', 1445), ('Julia Goerges', 1015), ('Elina Svitolina', 3050), ('Elina Svitolina', 3050), ('Lesia Tsurenko', 1095), ('Kristina Mladenovic', 1580), ('Elena Vesnina', 2340), ('Svetlana Kuznetsova', 3915), ('Elena Vesnina', 2340), ('Karolina Pliskova', 5640), ('Svetlana Kuznetsova', 3915), ('Kristina Mladenovic', 1700), ('Elena Vesnina', 2340), ('Garbine Muguruza', 4585), ('Anastasia Pavlyuchenkova', 1936), ('Caroline Wozniacki', 3020), ('Elena Vesnina', 2340)]",False
SPIDER_dev_464,wta_1,"What is the name of the winner who has won the most matches, and how many rank points does this player have?","return players ;return matches won of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4 ;return rank points of #4 ;return #5, #6","SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","SELECT players.first_name, rankings.ranking_points FROM rankings, matches, players WHERE players.player_id = rankings.player_id AND players.player_id = matches.loser_id AND players.player_id IN ( SELECT players.player_id FROM matches, players WHERE players.player_id = matches.loser_id AND players.player_id IN ( SELECT players.player_id FROM players ) GROUP BY players.player_id ORDER BY COUNT(matches.winner_hand) DESC LIMIT 1 )","[('Angelique Kerber', 3715)]","[('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 63), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64), ('Svetlana', 64)]",False
SPIDER_dev_465,wta_1,Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.,return australian open tourney ;return winners of #1 ;return rank points of #2 ;return #2 where #3 is highest ;return name of #4,SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,SELECT matches.winner_name FROM matches WHERE matches.winner_name IN ( SELECT matches.winner_name FROM matches WHERE matches.winner_name IN ( SELECT matches.winner_name FROM matches WHERE matches.tourney_name IN ( SELECT matches.tourney_name FROM matches WHERE matches.tourney_name = 'Australian Open' ) ) AND matches.tourney_name IN ( SELECT matches.tourney_name FROM matches WHERE matches.tourney_name = 'Australian Open' ) ORDER BY matches.winner_rank_points DESC LIMIT 1 ),"[('Serena Williams',)]","[('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',)]",True
SPIDER_dev_466,wta_1,What is the name of the winner with the most rank points who participated in the Australian Open tournament?,return winners ;return #1 who participated in the australian open tournament ;return rank points of #2 ;return #2 where #3 is the highest ;return the name of #4,SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,SELECT matches.winner_name FROM matches WHERE matches.winner_name IN ( SELECT matches.winner_name FROM matches WHERE matches.winner_name IN ( SELECT matches.winner_name FROM matches WHERE matches.tourney_name = 'Australian Open' ) AND matches.tourney_name = 'Australian Open' ORDER BY matches.winner_rank_points DESC LIMIT 1 ),"[('Serena Williams',)]","[('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',), ('Serena Williams',)]",True
SPIDER_dev_467,wta_1,find the names of loser and winner who played in the match with greatest number of minutes.,"return matches ;return minutes of #1 ;return #1 where #2 is highest ;return loser of #3 ;return winner of #3 ;return #4, #5","SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","SELECT matches.loser_hand, matches.winner_entry FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ORDER BY matches.minutes DESC LIMIT 1 )","[('Petra Kvitova', 'Angelique Kerber')]","[('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', ''), ('L', '')]",False
SPIDER_dev_468,wta_1,What are the names of the winner and loser who played in the longest match?,"return matches ;return the longest of #1 ;return winner of #2 ;return loser of #2 ;return #3, #4","SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","SELECT matches.winner_entry, matches.loser_hand FROM matches WHERE MAX(matches.loser_id) IN ( SELECT MAX(matches.loser_id) FROM matches )","[('Petra Kvitova', 'Angelique Kerber')]",ERROR,False
SPIDER_dev_469,wta_1,Find the average ranking for each player and their first name.,"return players ;return ranking of #1 ;return average of #2 for each #1 ;return first name of #1 ;return #3, #4","SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","SELECT players.player_id, AVG(rankings.player_id), players.first_name FROM rankings, players WHERE players.player_id = rankings.player_id AND players.player_id IN ( SELECT players.player_id FROM players ) GROUP BY players.player_id","[(1199.8235294117646, 'Aastha'), (1110.0434782608695, 'Abbi'), (808.4545454545455, 'Abbie'), (387.66706161137444, 'Abigail'), (1039.6744186046512, 'Abiodun'), (1228.75, 'Abir'), (790.1538461538462, 'Adeliya'), (1122.4423076923076, 'Adnya'), (619.6814159292036, 'Adriana'), (1213.1666666666667, 'Adrienn'), (627.12, 'Adrijana'), (1255.3333333333333, 'Adva'), (1155.0392156862745, 'Afroditi'), (960.6770186335403, 'Agata'), (1082.3548387096773, 'Agata Jadwiga'), (1231.5, 'Agne'), (391.3003629764065, 'Agnes'), (694.0659898477157, 'Agnese'), (940.2125603864735, 'Agni'), (122.19587628865979, 'Agnieszka'), (684.8497652582159, 'Agustina'), (1154.25, 'Agustina Elena'), (1156.340425531915, 'Ah'), (1248.72, 'Ahlam'), (728.5, 'Ahsha'), (890.8728448275862, 'Ai'), (912.1523178807947, 'Ai Wen'), (1110.3333333333333, 'Aida'), (284.8724727838258, 'Aiko'), (1034.5833333333333, 'Ailen'), (1200.2, 'Aimee'), (1164.95, 'Aina'), (943.7397959183673, 'Ainhoa'), (1024.625, 'Aishwarya'), (302.84831460674155, 'Ajla'), (704.9618138424821, 'Akari'), (215.25185185185185, 'Akgul'), (710.9617224880383, 'Aki'), (1145.8235294117646, 'Akiho'), (493.98205383848455, 'Akiko'), (772.8571428571429, 'Akilah'), (1038.35, 'Akvile'), (1119.1639344262296, 'Alana'), (843.7260273972603, 'Alba'), (343.22432701894314, 'Alberta'), (775.2734375, 'Albina'), (1185.7142857142858, 'Aldana'), (1067.019801980198, 'Alejandra'), (450.22998544395927, 'Aleksandra'), (578.07962529274, 'Aleksandrina'), (820.4563492063492, 'Alena'), (1123.4864864864865, 'Alessandra'), (1057.628205128205, 'Alessia'), (1145.1641791044776, 'Alessondra'), (383.9921465968586, 'Alexa'), (569.2647632558965, 'Alexandra'), (945.625, 'Alexandria'), (718.5202702702703, 'Alexia'), (604.15, 'Alexis'), (441.9846743295019, 'Aliaksandra'), (710.3822682786414, 'Alice'), (951.9764150943396, 'Alice Andrada'), (1105.1298701298701, 'Alicia'), (855.813627254509, 'Alicja'), (925.0028776978418, 'Alina'), (611.35, 'Aliona'), (453.01556420233464, 'Alisa'), (403.48784576697403, 'Alison'), (822.3459915611814, 'Alix'), (252.11485774499474, 'Alize'), (217.85922330097088, 'Alla'), (557.9232456140351, 'Allie'), (1157.8, 'Almudena'), (871.6926829268293, 'Alona'), (1181.6078431372548, 'Alory Regina Elorriaga'), (496.9431818181818, 'Alyona'), (650.6240276577355, 'Amanda'), (747.4375, 'Amandine'), (1011.3666666666667, 'Amelie'), (803.9764705882353, 'Amina'), (613.195652173913, 'Aminat'), (1075.8260869565217, 'Amira'), (415.9078341013825, 'Amra'), (1209.4, 'Amrita'), (763.888198757764, 'Amy'), (460.8932038834951, 'An Sophie'), (396.2893280632411, 'Ana'), (842.8446601941747, 'Ana Bianca'), (524.9192825112108, 'Ana Clara'), (1084.7916666666667, 'Ana Gabriela'), (1243.4285714285713, 'Ana Luisa'), (1031.228855721393, 'Ana Paula'), (496.7156398104265, 'Ana Sofia'), (961.2631578947369, 'Ana Victoria'), (144.3264367816092, 'Anabel'), (922.2255639097745, 'Anaeve'), (482.26169844020797, 'Anais'), (859.3059701492538, 'Anamika'), (430.0872542522642, 'Anastasia'), (956.5754716981132, 'Anastasia Evgenyevna'), (1245.75, 'Anastasiia'), (221.66153846153847, 'Anastasija'), (671.2584369449378, 'Anastasiya'), (1127.7368421052631, 'Anca'), (1150.0, 'Anda'), (970.3620689655172, 'Andie K'), (1063.4736842105262, 'Andjela'), (1275.8235294117646, 'Andra Maria'), (414.4332292750607, 'Andrea'), (878.3939393939394, 'Andrea Renee'), (956.0333333333333, 'Andreea'), (801.84375, 'Andreea Amalia'), (726.2657657657658, 'Andreea Roxana'), (424.64521739130436, 'Andreja'), (1184.0416666666667, 'Andressa Cristina'), (1045.6666666666667, 'Andrina'), (1152.0857142857142, 'Aneta'), (367.2274678111588, 'Anett'), (969.8181818181819, 'Anette'), (1226.3333333333333, 'Ange Oby'), (1128.7272727272727, 'Angela'), (686.2234432234433, 'Angelica'), (1089.1603773584907, 'Angeliki'), (750.3207810320781, 'Angelina'), (308.56833824975416, 'Angelique'), (432.6949152542373, 'Anhelina'), (850.9791666666666, 'Anhzelika'), (720.1431870669746, 'Ani'), (947.472972972973, 'Anita'), (725.3893333333333, 'Anja'), (1228.388888888889, 'Anke'), (618.4714285714285, 'Ankita'), (907.4, 'Ann'), (551.5557158312297, 'Anna'), (760.639175257732, 'Anna Arina'), (428.5496828752643, 'Anna Giulia'), (345.51020408163265, 'Anna Karolina'), (916.7115384615385, 'Anna Katalina'), (201.87700534759358, 'Anna Lena'), (1070.3967391304348, 'Anna Maria'), (583.9347826086956, 'Annalisa'), (248.74237737516572, 'Anne'), (762.7606382978723, 'Anne Liz'), (1237.6363636363637, 'Anne Marie'), (1252.0, 'Anne Sophie'), (1042.037037037037, 'Annie'), (265.79487179487177, 'Annika'), (969.5882352941177, 'Anouk'), (1051.7096774193549, 'Antonela'), (589.1298076923077, 'Antonia'), (1049.4655172413793, 'Antonina'), (1037.0833333333333, 'Anushka'), (617.3333333333334, 'Ao'), (1016.5714285714286, 'Apichaya'), (658.5074074074074, 'Arabela'), (279.23336006415394, 'Arantxa'), (490.4144736842105, 'Aranza'), (200.97080291970804, 'Aravane'), (951.4146341463414, 'Ariadna'), (560.6778190830236, 'Arina'), (1224.0, 'Arina Gabriela'), (1074.3333333333333, 'Arlinda'), (1281.8461538461538, 'Arthi'), (349.54794520547944, 'Aryna'), (1181.27868852459, 'Aselya'), (1151.95, 'Asha'), (331.3681818181818, 'Ashleigh'), (638.88, 'Ashley'), (823.0909090909091, 'Ashling'), (1018.6637931034483, 'Ashmitha'), (803.3904761904762, 'Ashvarya'), (453.43392070484583, 'Asia'), (790.46875, 'Asiya'), (1172.5531914893618, 'Assia'), (829.5625, 'Astra'), (1086.45, 'Astrid Wanja'), (591.2544731610338, 'Audrey'), (1208.4285714285713, 'Avgusta'), (1064.0, 'Axana'), (552.4653465346535, 'Ayaka'), (901.8717948717949, 'Ayan'), (597.6981132075472, 'Ayano'), (397.83561643835617, 'Ayla'), (915.5932203389831, 'Aymet'), (479.5530612244898, 'Ayu Fani'), (412.74466019417474, 'Ayumi'), (556.2303370786517, 'Azra'), (763.8900651465798, 'Barbara'), (252.6093155893536, 'Barbora'), (656.2932551319648, 'Basak'), (785.0707482993197, 'Beatrice'), (457.4050279329609, 'Beatriz'), (1253.4, 'Beatriz Magdalena'), (971.2865853658536, 'Beatriz Maria'), (1382.1538461538462, 'Beauty'), (1167.3368421052633, 'Belen'), (681.7736842105263, 'Belinda'), (705.4688346883469, 'Benedetta'), (625.013698630137, 'Berfu'), (717.7932330827068, 'Bermet')]",ERROR,False
SPIDER_dev_47,pets_1,Find the weight of the youngest dog.,return dogs ;return #1 that is youngest ;return weight of #2,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,SELECT pets.weight FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets ) ORDER BY pets.pet_age ASC LIMIT 1 ),"[(9.3,)]","[(9.3,)]",True
SPIDER_dev_470,wta_1,"What are the first names of all players, and their average rankings?","return players ;return first names of #1 ;return rankings of #1 ;return average of #3 for each #1 ;return #2, #4","SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","SELECT players.first_name, players.player_id, AVG(rankings.player_id) FROM rankings, players WHERE players.player_id = rankings.player_id AND players.player_id IN ( SELECT players.player_id FROM players ) GROUP BY players.player_id","[(1199.8235294117646, 'Aastha'), (1110.0434782608695, 'Abbi'), (808.4545454545455, 'Abbie'), (387.66706161137444, 'Abigail'), (1039.6744186046512, 'Abiodun'), (1228.75, 'Abir'), (790.1538461538462, 'Adeliya'), (1122.4423076923076, 'Adnya'), (619.6814159292036, 'Adriana'), (1213.1666666666667, 'Adrienn'), (627.12, 'Adrijana'), (1255.3333333333333, 'Adva'), (1155.0392156862745, 'Afroditi'), (960.6770186335403, 'Agata'), (1082.3548387096773, 'Agata Jadwiga'), (1231.5, 'Agne'), (391.3003629764065, 'Agnes'), (694.0659898477157, 'Agnese'), (940.2125603864735, 'Agni'), (122.19587628865979, 'Agnieszka'), (684.8497652582159, 'Agustina'), (1154.25, 'Agustina Elena'), (1156.340425531915, 'Ah'), (1248.72, 'Ahlam'), (728.5, 'Ahsha'), (890.8728448275862, 'Ai'), (912.1523178807947, 'Ai Wen'), (1110.3333333333333, 'Aida'), (284.8724727838258, 'Aiko'), (1034.5833333333333, 'Ailen'), (1200.2, 'Aimee'), (1164.95, 'Aina'), (943.7397959183673, 'Ainhoa'), (1024.625, 'Aishwarya'), (302.84831460674155, 'Ajla'), (704.9618138424821, 'Akari'), (215.25185185185185, 'Akgul'), (710.9617224880383, 'Aki'), (1145.8235294117646, 'Akiho'), (493.98205383848455, 'Akiko'), (772.8571428571429, 'Akilah'), (1038.35, 'Akvile'), (1119.1639344262296, 'Alana'), (843.7260273972603, 'Alba'), (343.22432701894314, 'Alberta'), (775.2734375, 'Albina'), (1185.7142857142858, 'Aldana'), (1067.019801980198, 'Alejandra'), (450.22998544395927, 'Aleksandra'), (578.07962529274, 'Aleksandrina'), (820.4563492063492, 'Alena'), (1123.4864864864865, 'Alessandra'), (1057.628205128205, 'Alessia'), (1145.1641791044776, 'Alessondra'), (383.9921465968586, 'Alexa'), (569.2647632558965, 'Alexandra'), (945.625, 'Alexandria'), (718.5202702702703, 'Alexia'), (604.15, 'Alexis'), (441.9846743295019, 'Aliaksandra'), (710.3822682786414, 'Alice'), (951.9764150943396, 'Alice Andrada'), (1105.1298701298701, 'Alicia'), (855.813627254509, 'Alicja'), (925.0028776978418, 'Alina'), (611.35, 'Aliona'), (453.01556420233464, 'Alisa'), (403.48784576697403, 'Alison'), (822.3459915611814, 'Alix'), (252.11485774499474, 'Alize'), (217.85922330097088, 'Alla'), (557.9232456140351, 'Allie'), (1157.8, 'Almudena'), (871.6926829268293, 'Alona'), (1181.6078431372548, 'Alory Regina Elorriaga'), (496.9431818181818, 'Alyona'), (650.6240276577355, 'Amanda'), (747.4375, 'Amandine'), (1011.3666666666667, 'Amelie'), (803.9764705882353, 'Amina'), (613.195652173913, 'Aminat'), (1075.8260869565217, 'Amira'), (415.9078341013825, 'Amra'), (1209.4, 'Amrita'), (763.888198757764, 'Amy'), (460.8932038834951, 'An Sophie'), (396.2893280632411, 'Ana'), (842.8446601941747, 'Ana Bianca'), (524.9192825112108, 'Ana Clara'), (1084.7916666666667, 'Ana Gabriela'), (1243.4285714285713, 'Ana Luisa'), (1031.228855721393, 'Ana Paula'), (496.7156398104265, 'Ana Sofia'), (961.2631578947369, 'Ana Victoria'), (144.3264367816092, 'Anabel'), (922.2255639097745, 'Anaeve'), (482.26169844020797, 'Anais'), (859.3059701492538, 'Anamika'), (430.0872542522642, 'Anastasia'), (956.5754716981132, 'Anastasia Evgenyevna'), (1245.75, 'Anastasiia'), (221.66153846153847, 'Anastasija'), (671.2584369449378, 'Anastasiya'), (1127.7368421052631, 'Anca'), (1150.0, 'Anda'), (970.3620689655172, 'Andie K'), (1063.4736842105262, 'Andjela'), (1275.8235294117646, 'Andra Maria'), (414.4332292750607, 'Andrea'), (878.3939393939394, 'Andrea Renee'), (956.0333333333333, 'Andreea'), (801.84375, 'Andreea Amalia'), (726.2657657657658, 'Andreea Roxana'), (424.64521739130436, 'Andreja'), (1184.0416666666667, 'Andressa Cristina'), (1045.6666666666667, 'Andrina'), (1152.0857142857142, 'Aneta'), (367.2274678111588, 'Anett'), (969.8181818181819, 'Anette'), (1226.3333333333333, 'Ange Oby'), (1128.7272727272727, 'Angela'), (686.2234432234433, 'Angelica'), (1089.1603773584907, 'Angeliki'), (750.3207810320781, 'Angelina'), (308.56833824975416, 'Angelique'), (432.6949152542373, 'Anhelina'), (850.9791666666666, 'Anhzelika'), (720.1431870669746, 'Ani'), (947.472972972973, 'Anita'), (725.3893333333333, 'Anja'), (1228.388888888889, 'Anke'), (618.4714285714285, 'Ankita'), (907.4, 'Ann'), (551.5557158312297, 'Anna'), (760.639175257732, 'Anna Arina'), (428.5496828752643, 'Anna Giulia'), (345.51020408163265, 'Anna Karolina'), (916.7115384615385, 'Anna Katalina'), (201.87700534759358, 'Anna Lena'), (1070.3967391304348, 'Anna Maria'), (583.9347826086956, 'Annalisa'), (248.74237737516572, 'Anne'), (762.7606382978723, 'Anne Liz'), (1237.6363636363637, 'Anne Marie'), (1252.0, 'Anne Sophie'), (1042.037037037037, 'Annie'), (265.79487179487177, 'Annika'), (969.5882352941177, 'Anouk'), (1051.7096774193549, 'Antonela'), (589.1298076923077, 'Antonia'), (1049.4655172413793, 'Antonina'), (1037.0833333333333, 'Anushka'), (617.3333333333334, 'Ao'), (1016.5714285714286, 'Apichaya'), (658.5074074074074, 'Arabela'), (279.23336006415394, 'Arantxa'), (490.4144736842105, 'Aranza'), (200.97080291970804, 'Aravane'), (951.4146341463414, 'Ariadna'), (560.6778190830236, 'Arina'), (1224.0, 'Arina Gabriela'), (1074.3333333333333, 'Arlinda'), (1281.8461538461538, 'Arthi'), (349.54794520547944, 'Aryna'), (1181.27868852459, 'Aselya'), (1151.95, 'Asha'), (331.3681818181818, 'Ashleigh'), (638.88, 'Ashley'), (823.0909090909091, 'Ashling'), (1018.6637931034483, 'Ashmitha'), (803.3904761904762, 'Ashvarya'), (453.43392070484583, 'Asia'), (790.46875, 'Asiya'), (1172.5531914893618, 'Assia'), (829.5625, 'Astra'), (1086.45, 'Astrid Wanja'), (591.2544731610338, 'Audrey'), (1208.4285714285713, 'Avgusta'), (1064.0, 'Axana'), (552.4653465346535, 'Ayaka'), (901.8717948717949, 'Ayan'), (597.6981132075472, 'Ayano'), (397.83561643835617, 'Ayla'), (915.5932203389831, 'Aymet'), (479.5530612244898, 'Ayu Fani'), (412.74466019417474, 'Ayumi'), (556.2303370786517, 'Azra'), (763.8900651465798, 'Barbara'), (252.6093155893536, 'Barbora'), (656.2932551319648, 'Basak'), (785.0707482993197, 'Beatrice'), (457.4050279329609, 'Beatriz'), (1253.4, 'Beatriz Magdalena'), (971.2865853658536, 'Beatriz Maria'), (1382.1538461538462, 'Beauty'), (1167.3368421052633, 'Belen'), (681.7736842105263, 'Belinda'), (705.4688346883469, 'Benedetta'), (625.013698630137, 'Berfu'), (717.7932330827068, 'Bermet')]",ERROR,False
SPIDER_dev_471,wta_1,Find the total ranking points for each player and their first name.,"return players ;return ranking points of #1 ;return sum of #2 for each #1 ;return first name of #1 ;return #3, #4","SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","SELECT players.first_name, SUM(rankings.ranking_points) FROM rankings, players WHERE players.player_id = rankings.player_id AND players.first_name IN ( SELECT players.first_name FROM players ) GROUP BY players.first_name","[(68, 'Aastha'), (304, 'Abbi'), (5214, 'Abbie'), (115293, 'Abigail'), (120, 'Abiodun'), (72, 'Abir'), (490, 'Adeliya'), (219, 'Adnya'), (28045, 'Adriana'), (107, 'Adrienn'), (4619, 'Adrijana'), (9, 'Adva'), (156, 'Afroditi'), (1901, 'Agata'), (219, 'Agata Jadwiga'), (110, 'Agne'), (390148, 'Agnes'), (13717, 'Agnese'), (2929, 'Agni'), (1801033, 'Agnieszka'), (21728, 'Agustina'), (158, 'Agustina Elena'), (141, 'Ah'), (85, 'Ahlam'), (52, 'Ahsha'), (10751, 'Ai'), (2217, 'Ai Wen'), (703, 'Aida'), (140108, 'Aiko'), (288, 'Ailen'), (226, 'Aimee'), (92, 'Aina'), (2433, 'Ainhoa'), (96, 'Aishwarya'), (116548, 'Ajla'), (11873, 'Akari'), (228538, 'Akgul'), (14838, 'Aki'), (83, 'Akiho'), (84446, 'Akiko'), (742, 'Akilah'), (640, 'Akvile'), (385, 'Alana'), (1424, 'Alba'), (238803, 'Alberta'), (10507, 'Albina'), (71, 'Aldana'), (1578, 'Alejandra'), (451414, 'Aleksandra'), (35957, 'Aleksandrina'), (8832, 'Alena'), (235, 'Alessandra'), (2524, 'Alessia'), (265, 'Alessondra'), (138782, 'Alexa'), (955267, 'Alexandra'), (191, 'Alexandria'), (12829, 'Alexia'), (13389, 'Alexis'), (61196, 'Aliaksandra'), (57745, 'Alice'), (2358, 'Alice Andrada'), (993, 'Alicia'), (5216, 'Alicja'), (11393, 'Alina'), (2369, 'Aliona'), (369810, 'Alisa'), (323527, 'Alison'), (5422, 'Alix'), (596901, 'Alize'), (253320, 'Alla'), (33054, 'Allie'), (206, 'Almudena'), (4052, 'Alona'), (155, 'Alory Regina Elorriaga'), (25183, 'Alyona'), (68207, 'Amanda'), (41575, 'Amandine'), (887, 'Amelie'), (1990, 'Amina'), (12708, 'Aminat'), (157, 'Amira'), (60702, 'Amra'), (159, 'Amrita'), (10616, 'Amy'), (51803, 'An Sophie'), (1589674, 'Ana'), (2421, 'Ana Bianca'), (36696, 'Ana Clara'), (288, 'Ana Gabriela'), (21, 'Ana Luisa'), (2141, 'Ana Paula'), (15955, 'Ana Sofia'), (1367, 'Ana Victoria'), (678793, 'Anabel'), (1962, 'Anaeve'), (46908, 'Anais'), (2338, 'Anamika'), (1433335, 'Anastasia'), (1235, 'Anastasia Evgenyevna'), (12, 'Anastasiia'), (268277, 'Anastasija'), (75850, 'Anastasiya'), (101, 'Anca'), (160, 'Anda'), (605, 'Andie K'), (228, 'Andjela'), (51, 'Andra Maria'), (920433, 'Andrea'), (464, 'Andrea Renee'), (1484, 'Andreea'), (1365, 'Andreea Amalia'), (12727, 'Andreea Roxana'), (74453, 'Andreja'), (72, 'Andressa Cristina'), (159, 'Andrina'), (202, 'Aneta'), (71072, 'Anett'), (1657, 'Anette'), (36, 'Ange Oby'), (245, 'Angela'), (13643, 'Angelica'), (677, 'Angeliki'), (19048, 'Angelina'), (1132514, 'Angelique'), (17967, 'Anhelina'), (836, 'Anhzelika'), (48811, 'Ani'), (2177, 'Anita'), (11596, 'Anja'), (54, 'Anke'), (21599, 'Ankita'), (62, 'Ann'), (1017069, 'Anna'), (6650, 'Anna Arina'), (49207, 'Anna Giulia'), (107880, 'Anna Karolina'), (907, 'Anna Katalina'), (359374, 'Anna Lena'), (1427, 'Anna Maria'), (29442, 'Annalisa'), (647811, 'Anne'), (5269, 'Anne Liz'), (99, 'Anne Marie'), (33, 'Anne Sophie'), (172, 'Annie'), (169371, 'Annika'), (3621, 'Anouk'), (280, 'Antonela'), (21624, 'Antonia'), (484, 'Antonina'), (480, 'Anushka'), (4941, 'Ao'), (126, 'Apichaya'), (11608, 'Arabela'), (434692, 'Arantxa'), (24184, 'Aranza'), (383495, 'Aravane'), (980, 'Ariadna'), (96852, 'Arina'), (3, 'Arina Gabriela'), (154, 'Arlinda'), (39, 'Arthi'), (19446, 'Aryna'), (238, 'Aselya'), (99, 'Asha'), (58741, 'Ashleigh'), (49980, 'Ashley'), (5155, 'Ashling'), (648, 'Ashmitha'), (2321, 'Ashvarya'), (48788, 'Asia'), (802, 'Asiya'), (141, 'Assia'), (1083, 'Astra'), (269, 'Astrid Wanja'), (33624, 'Audrey'), (21, 'Avgusta'), (7, 'Axana'), (7996, 'Ayaka'), (571, 'Ayan'), (5173, 'Ayano'), (7444, 'Ayla'), (791, 'Aymet'), (38501, 'Ayu Fani'), (309990, 'Ayumi'), (11721, 'Azra'), (53401, 'Barbara'), (515957, 'Barbora'), (26624, 'Basak'), (27061, 'Beatrice'), (98798, 'Beatriz'), (75, 'Beatriz Magdalena'), (1920, 'Beatriz Maria'), (26, 'Beauty'), (351, 'Belen'), (137327, 'Belinda'), (11032, 'Benedetta'), (2850, 'Berfu'), (8441, 'Bermet')]","[('Aastha', 68), ('Abbi', 304), ('Abbie', 5214), ('Abigail', 115293), ('Abiodun', 120), ('Abir', 72), ('Adeliya', 490), ('Adnya', 219), ('Adriana', 28045), ('Adrienn', 107), ('Adrijana', 4619), ('Adva', 9), ('Afroditi', 156), ('Agata', 1901), ('Agata Jadwiga', 219), ('Agne', 110), ('Agnes', 390148), ('Agnese', 13717), ('Agni', 2929), ('Agnieszka', 1801033), ('Agustina', 21728), ('Agustina Elena', 158), ('Ah', 141), ('Ahlam', 85), ('Ahsha', 52), ('Ai', 10751), ('Ai Wen', 2217), ('Aida', 703), ('Aiko', 140108), ('Ailen', 288), ('Aimee', 226), ('Aina', 92), ('Ainhoa', 2433), ('Aishwarya', 96), ('Ajla', 116548), ('Akari', 11873), ('Akgul', 228538), ('Aki', 14838), ('Akiho', 83), ('Akiko', 84446), ('Akilah', 742), ('Akvile', 640), ('Alana', 385), ('Alba', 1424), ('Alberta', 238803), ('Albina', 10507), ('Aldana', 71), ('Alejandra', 1578), ('Aleksandra', 451414), ('Aleksandrina', 35957), ('Alena', 8832), ('Alessandra', 235), ('Alessia', 2524), ('Alessondra', 265), ('Alexa', 138782), ('Alexandra', 955267), ('Alexandria', 191), ('Alexia', 12829), ('Alexis', 13389), ('Aliaksandra', 61196), ('Alice', 57745), ('Alice Andrada', 2358), ('Alicia', 993), ('Alicja', 5216), ('Alina', 11393), ('Aliona', 2369), ('Alisa', 369810), ('Alison', 323527), ('Alix', 5422), ('Alize', 596901), ('Alla', 253320), ('Allie', 33054), ('Almudena', 206), ('Alona', 4052), ('Alory Regina Elorriaga', 155), ('Alyona', 25183), ('Amanda', 68207), ('Amandine', 41575), ('Amelie', 887), ('Amina', 1990), ('Aminat', 12708), ('Amira', 157), ('Amra', 60702), ('Amrita', 159), ('Amy', 10616), ('An Sophie', 51803), ('Ana', 1589674), ('Ana Bianca', 2421), ('Ana Clara', 36696), ('Ana Gabriela', 288), ('Ana Luisa', 21), ('Ana Paula', 2141), ('Ana Sofia', 15955), ('Ana Victoria', 1367), ('Anabel', 678793), ('Anaeve', 1962), ('Anais', 46908), ('Anamika', 2338), ('Anastasia', 1433335), ('Anastasia Evgenyevna', 1235), ('Anastasiia', 12), ('Anastasija', 268277), ('Anastasiya', 75850), ('Anca', 101), ('Anda', 160), ('Andie K', 605), ('Andjela', 228), ('Andra Maria', 51), ('Andrea', 920433), ('Andrea Renee', 464), ('Andreea', 1484), ('Andreea Amalia', 1365), ('Andreea Roxana', 12727), ('Andreja', 74453), ('Andressa Cristina', 72), ('Andrina', 159), ('Aneta', 202), ('Anett', 71072), ('Anette', 1657), ('Ange Oby', 36), ('Angela', 245), ('Angelica', 13643), ('Angeliki', 677), ('Angelina', 19048), ('Angelique', 1132514), ('Anhelina', 17967), ('Anhzelika', 836), ('Ani', 48811), ('Anita', 2177), ('Anja', 11596), ('Anke', 54), ('Ankita', 21599), ('Ann', 62), ('Anna', 1017069), ('Anna Arina', 6650), ('Anna Giulia', 49207), ('Anna Karolina', 107880), ('Anna Katalina', 907), ('Anna Lena', 359374), ('Anna Maria', 1427), ('Annalisa', 29442), ('Anne', 647811), ('Anne Liz', 5269), ('Anne Marie', 99), ('Anne Sophie', 33), ('Annie', 172), ('Annika', 169371), ('Anouk', 3621), ('Antonela', 280), ('Antonia', 21624), ('Antonina', 484), ('Anushka', 480), ('Ao', 4941), ('Apichaya', 126), ('Arabela', 11608), ('Arantxa', 434692), ('Aranza', 24184), ('Aravane', 383495), ('Ariadna', 980), ('Arina', 96852), ('Arina Gabriela', 3), ('Arlinda', 154), ('Arthi', 39), ('Aryna', 19446), ('Aselya', 238), ('Asha', 99), ('Ashleigh', 58741), ('Ashley', 49980), ('Ashling', 5155), ('Ashmitha', 648), ('Ashvarya', 2321), ('Asia', 48788), ('Asiya', 802), ('Assia', 141), ('Astra', 1083), ('Astrid Wanja', 269), ('Audrey', 33624), ('Avgusta', 21), ('Axana', 7), ('Ayaka', 7996), ('Ayan', 571), ('Ayano', 5173), ('Ayla', 7444), ('Aymet', 791), ('Ayu Fani', 38501), ('Ayumi', 309990), ('Azra', 11721), ('Barbara', 53401), ('Barbora', 515957), ('Basak', 26624), ('Beatrice', 27061), ('Beatriz', 98798), ('Beatriz Magdalena', 75), ('Beatriz Maria', 1920), ('Beauty', 26), ('Belen', 351), ('Belinda', 137327), ('Benedetta', 11032), ('Berfu', 2850), ('Bermet', 8441)]",True
SPIDER_dev_472,wta_1,"What are the first names of all players, and their total ranking points?","return players ;return first names of #1 ;return ranking points of #1 ;return sum of #3 for each #1 ;return #2, #4","SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","SELECT players.first_name, SUM(rankings.ranking_points) FROM rankings, players WHERE players.player_id = rankings.player_id AND players.first_name IN ( SELECT players.first_name FROM players ) GROUP BY players.first_name","[(68, 'Aastha'), (304, 'Abbi'), (5214, 'Abbie'), (115293, 'Abigail'), (120, 'Abiodun'), (72, 'Abir'), (490, 'Adeliya'), (219, 'Adnya'), (28045, 'Adriana'), (107, 'Adrienn'), (4619, 'Adrijana'), (9, 'Adva'), (156, 'Afroditi'), (1901, 'Agata'), (219, 'Agata Jadwiga'), (110, 'Agne'), (390148, 'Agnes'), (13717, 'Agnese'), (2929, 'Agni'), (1801033, 'Agnieszka'), (21728, 'Agustina'), (158, 'Agustina Elena'), (141, 'Ah'), (85, 'Ahlam'), (52, 'Ahsha'), (10751, 'Ai'), (2217, 'Ai Wen'), (703, 'Aida'), (140108, 'Aiko'), (288, 'Ailen'), (226, 'Aimee'), (92, 'Aina'), (2433, 'Ainhoa'), (96, 'Aishwarya'), (116548, 'Ajla'), (11873, 'Akari'), (228538, 'Akgul'), (14838, 'Aki'), (83, 'Akiho'), (84446, 'Akiko'), (742, 'Akilah'), (640, 'Akvile'), (385, 'Alana'), (1424, 'Alba'), (238803, 'Alberta'), (10507, 'Albina'), (71, 'Aldana'), (1578, 'Alejandra'), (451414, 'Aleksandra'), (35957, 'Aleksandrina'), (8832, 'Alena'), (235, 'Alessandra'), (2524, 'Alessia'), (265, 'Alessondra'), (138782, 'Alexa'), (955267, 'Alexandra'), (191, 'Alexandria'), (12829, 'Alexia'), (13389, 'Alexis'), (61196, 'Aliaksandra'), (57745, 'Alice'), (2358, 'Alice Andrada'), (993, 'Alicia'), (5216, 'Alicja'), (11393, 'Alina'), (2369, 'Aliona'), (369810, 'Alisa'), (323527, 'Alison'), (5422, 'Alix'), (596901, 'Alize'), (253320, 'Alla'), (33054, 'Allie'), (206, 'Almudena'), (4052, 'Alona'), (155, 'Alory Regina Elorriaga'), (25183, 'Alyona'), (68207, 'Amanda'), (41575, 'Amandine'), (887, 'Amelie'), (1990, 'Amina'), (12708, 'Aminat'), (157, 'Amira'), (60702, 'Amra'), (159, 'Amrita'), (10616, 'Amy'), (51803, 'An Sophie'), (1589674, 'Ana'), (2421, 'Ana Bianca'), (36696, 'Ana Clara'), (288, 'Ana Gabriela'), (21, 'Ana Luisa'), (2141, 'Ana Paula'), (15955, 'Ana Sofia'), (1367, 'Ana Victoria'), (678793, 'Anabel'), (1962, 'Anaeve'), (46908, 'Anais'), (2338, 'Anamika'), (1433335, 'Anastasia'), (1235, 'Anastasia Evgenyevna'), (12, 'Anastasiia'), (268277, 'Anastasija'), (75850, 'Anastasiya'), (101, 'Anca'), (160, 'Anda'), (605, 'Andie K'), (228, 'Andjela'), (51, 'Andra Maria'), (920433, 'Andrea'), (464, 'Andrea Renee'), (1484, 'Andreea'), (1365, 'Andreea Amalia'), (12727, 'Andreea Roxana'), (74453, 'Andreja'), (72, 'Andressa Cristina'), (159, 'Andrina'), (202, 'Aneta'), (71072, 'Anett'), (1657, 'Anette'), (36, 'Ange Oby'), (245, 'Angela'), (13643, 'Angelica'), (677, 'Angeliki'), (19048, 'Angelina'), (1132514, 'Angelique'), (17967, 'Anhelina'), (836, 'Anhzelika'), (48811, 'Ani'), (2177, 'Anita'), (11596, 'Anja'), (54, 'Anke'), (21599, 'Ankita'), (62, 'Ann'), (1017069, 'Anna'), (6650, 'Anna Arina'), (49207, 'Anna Giulia'), (107880, 'Anna Karolina'), (907, 'Anna Katalina'), (359374, 'Anna Lena'), (1427, 'Anna Maria'), (29442, 'Annalisa'), (647811, 'Anne'), (5269, 'Anne Liz'), (99, 'Anne Marie'), (33, 'Anne Sophie'), (172, 'Annie'), (169371, 'Annika'), (3621, 'Anouk'), (280, 'Antonela'), (21624, 'Antonia'), (484, 'Antonina'), (480, 'Anushka'), (4941, 'Ao'), (126, 'Apichaya'), (11608, 'Arabela'), (434692, 'Arantxa'), (24184, 'Aranza'), (383495, 'Aravane'), (980, 'Ariadna'), (96852, 'Arina'), (3, 'Arina Gabriela'), (154, 'Arlinda'), (39, 'Arthi'), (19446, 'Aryna'), (238, 'Aselya'), (99, 'Asha'), (58741, 'Ashleigh'), (49980, 'Ashley'), (5155, 'Ashling'), (648, 'Ashmitha'), (2321, 'Ashvarya'), (48788, 'Asia'), (802, 'Asiya'), (141, 'Assia'), (1083, 'Astra'), (269, 'Astrid Wanja'), (33624, 'Audrey'), (21, 'Avgusta'), (7, 'Axana'), (7996, 'Ayaka'), (571, 'Ayan'), (5173, 'Ayano'), (7444, 'Ayla'), (791, 'Aymet'), (38501, 'Ayu Fani'), (309990, 'Ayumi'), (11721, 'Azra'), (53401, 'Barbara'), (515957, 'Barbora'), (26624, 'Basak'), (27061, 'Beatrice'), (98798, 'Beatriz'), (75, 'Beatriz Magdalena'), (1920, 'Beatriz Maria'), (26, 'Beauty'), (351, 'Belen'), (137327, 'Belinda'), (11032, 'Benedetta'), (2850, 'Berfu'), (8441, 'Bermet')]","[('Aastha', 68), ('Abbi', 304), ('Abbie', 5214), ('Abigail', 115293), ('Abiodun', 120), ('Abir', 72), ('Adeliya', 490), ('Adnya', 219), ('Adriana', 28045), ('Adrienn', 107), ('Adrijana', 4619), ('Adva', 9), ('Afroditi', 156), ('Agata', 1901), ('Agata Jadwiga', 219), ('Agne', 110), ('Agnes', 390148), ('Agnese', 13717), ('Agni', 2929), ('Agnieszka', 1801033), ('Agustina', 21728), ('Agustina Elena', 158), ('Ah', 141), ('Ahlam', 85), ('Ahsha', 52), ('Ai', 10751), ('Ai Wen', 2217), ('Aida', 703), ('Aiko', 140108), ('Ailen', 288), ('Aimee', 226), ('Aina', 92), ('Ainhoa', 2433), ('Aishwarya', 96), ('Ajla', 116548), ('Akari', 11873), ('Akgul', 228538), ('Aki', 14838), ('Akiho', 83), ('Akiko', 84446), ('Akilah', 742), ('Akvile', 640), ('Alana', 385), ('Alba', 1424), ('Alberta', 238803), ('Albina', 10507), ('Aldana', 71), ('Alejandra', 1578), ('Aleksandra', 451414), ('Aleksandrina', 35957), ('Alena', 8832), ('Alessandra', 235), ('Alessia', 2524), ('Alessondra', 265), ('Alexa', 138782), ('Alexandra', 955267), ('Alexandria', 191), ('Alexia', 12829), ('Alexis', 13389), ('Aliaksandra', 61196), ('Alice', 57745), ('Alice Andrada', 2358), ('Alicia', 993), ('Alicja', 5216), ('Alina', 11393), ('Aliona', 2369), ('Alisa', 369810), ('Alison', 323527), ('Alix', 5422), ('Alize', 596901), ('Alla', 253320), ('Allie', 33054), ('Almudena', 206), ('Alona', 4052), ('Alory Regina Elorriaga', 155), ('Alyona', 25183), ('Amanda', 68207), ('Amandine', 41575), ('Amelie', 887), ('Amina', 1990), ('Aminat', 12708), ('Amira', 157), ('Amra', 60702), ('Amrita', 159), ('Amy', 10616), ('An Sophie', 51803), ('Ana', 1589674), ('Ana Bianca', 2421), ('Ana Clara', 36696), ('Ana Gabriela', 288), ('Ana Luisa', 21), ('Ana Paula', 2141), ('Ana Sofia', 15955), ('Ana Victoria', 1367), ('Anabel', 678793), ('Anaeve', 1962), ('Anais', 46908), ('Anamika', 2338), ('Anastasia', 1433335), ('Anastasia Evgenyevna', 1235), ('Anastasiia', 12), ('Anastasija', 268277), ('Anastasiya', 75850), ('Anca', 101), ('Anda', 160), ('Andie K', 605), ('Andjela', 228), ('Andra Maria', 51), ('Andrea', 920433), ('Andrea Renee', 464), ('Andreea', 1484), ('Andreea Amalia', 1365), ('Andreea Roxana', 12727), ('Andreja', 74453), ('Andressa Cristina', 72), ('Andrina', 159), ('Aneta', 202), ('Anett', 71072), ('Anette', 1657), ('Ange Oby', 36), ('Angela', 245), ('Angelica', 13643), ('Angeliki', 677), ('Angelina', 19048), ('Angelique', 1132514), ('Anhelina', 17967), ('Anhzelika', 836), ('Ani', 48811), ('Anita', 2177), ('Anja', 11596), ('Anke', 54), ('Ankita', 21599), ('Ann', 62), ('Anna', 1017069), ('Anna Arina', 6650), ('Anna Giulia', 49207), ('Anna Karolina', 107880), ('Anna Katalina', 907), ('Anna Lena', 359374), ('Anna Maria', 1427), ('Annalisa', 29442), ('Anne', 647811), ('Anne Liz', 5269), ('Anne Marie', 99), ('Anne Sophie', 33), ('Annie', 172), ('Annika', 169371), ('Anouk', 3621), ('Antonela', 280), ('Antonia', 21624), ('Antonina', 484), ('Anushka', 480), ('Ao', 4941), ('Apichaya', 126), ('Arabela', 11608), ('Arantxa', 434692), ('Aranza', 24184), ('Aravane', 383495), ('Ariadna', 980), ('Arina', 96852), ('Arina Gabriela', 3), ('Arlinda', 154), ('Arthi', 39), ('Aryna', 19446), ('Aselya', 238), ('Asha', 99), ('Ashleigh', 58741), ('Ashley', 49980), ('Ashling', 5155), ('Ashmitha', 648), ('Ashvarya', 2321), ('Asia', 48788), ('Asiya', 802), ('Assia', 141), ('Astra', 1083), ('Astrid Wanja', 269), ('Audrey', 33624), ('Avgusta', 21), ('Axana', 7), ('Ayaka', 7996), ('Ayan', 571), ('Ayano', 5173), ('Ayla', 7444), ('Aymet', 791), ('Ayu Fani', 38501), ('Ayumi', 309990), ('Azra', 11721), ('Barbara', 53401), ('Barbora', 515957), ('Basak', 26624), ('Beatrice', 27061), ('Beatriz', 98798), ('Beatriz Magdalena', 75), ('Beatriz Maria', 1920), ('Beauty', 26), ('Belen', 351), ('Belinda', 137327), ('Benedetta', 11032), ('Berfu', 2850), ('Bermet', 8441)]",True
SPIDER_dev_473,wta_1,find the number of players for each country.,return countries ;return players of #1 ;return number of #2 for each #1,"SELECT count(*) ,  country_code FROM players GROUP BY country_code","SELECT players.country_code, COUNT(players.player_id) FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players ) GROUP BY players.country_code","[(6, 'AHO'), (2, 'ALB'), (63, 'ALG'), (1, 'AND'), (1, 'ANG'), (8, 'ANT'), (456, 'ARG'), (27, 'ARM'), (742, 'AUS'), (236, 'AUT'), (10, 'AZE'), (22, 'BAH'), (20, 'BAR'), (5, 'BDI'), (247, 'BEL'), (2, 'BEN'), (20, 'BER'), (75, 'BIH'), (144, 'BLR'), (97, 'BOL'), (17, 'BOT'), (456, 'BRA'), (5, 'BRN'), (4, 'BRU'), (181, 'BUL'), (331, 'CAN'), (2, 'CGO'), (114, 'CHI'), (391, 'CHN'), (8, 'CMR'), (240, 'COL'), (24, 'CRC'), (240, 'CRO'), (39, 'CUB'), (22, 'CYP'), (456, 'CZE'), (79, 'DEN'), (38, 'DOM'), (3, 'ECA'), (90, 'ECU'), (112, 'EGY'), (33, 'ESA'), (853, 'ESP'), (48, 'EST'), (8, 'ETH'), (5, 'FIJ'), (103, 'FIN'), (736, 'FRA'), (22, 'FRG'), (660, 'GBR'), (91, 'GEO'), (833, 'GER'), (4, 'GHA'), (163, 'GRE'), (1, 'GRN'), (29, 'GUA'), (8, 'GUD'), (5, 'HAI'), (56, 'HKG'), (8, 'HON'), (169, 'HUN'), (181, 'INA'), (478, 'IND'), (15, 'IRI'), (68, 'IRL'), (7, 'IRQ'), (18, 'ISL'), (232, 'ISR'), (866, 'ITA'), (19, 'JAM'), (6, 'JOR'), (823, 'JPN'), (99, 'KAZ'), (23, 'KEN'), (23, 'KGZ'), (274, 'KOR'), (3, 'KUW'), (56, 'LAT'), (3, 'LES'), (11, 'LIB'), (15, 'LIE'), (31, 'LTU'), (37, 'LUX'), (21, 'MAD'), (97, 'MAR'), (35, 'MAS'), (45, 'MDA'), (416, 'MEX'), (1, 'MGL'), (23, 'MKD'), (17, 'MLT'), (25, 'MNE'), (2, 'MON'), (15, 'MRI'), (4, 'MRN'), (13, 'NAM'), (3, 'NCA'), (342, 'NED'), (80, 'NGR'), (68, 'NOR'), (104, 'NZL'), (3, 'OMA'), (18, 'PAK'), (22, 'PAN'), (56, 'PAR'), (76, 'PER'), (70, 'PHI'), (1, 'PNG'), (12, 'POC'), (266, 'POL'), (142, 'POR'), (43, 'PUR'), (1, 'QAT'), (17, 'REU'), (3, 'RHO'), (422, 'ROU'), (283, 'RSA'), (810, 'RUS'), (3, 'SAM'), (16, 'SCG'), (7, 'SEN'), (44, 'SIN'), (145, 'SLO'), (4, 'SMR'), (224, 'SRB'), (32, 'SRI'), (243, 'SUI'), (247, 'SVK'), (324, 'SWE'), (21, 'SYR'), (21, 'TCH'), (171, 'THA'), (6, 'TJK'), (12, 'TKM'), (2, 'TOG'), (146, 'TPE'), (29, 'TRI'), (1, 'TTO'), (57, 'TUN'), (203, 'TUR'), (1, 'UAE'), (311, 'UKR'), (11, 'UNK'), (22, 'URS'), (56, 'URU'), (2217, 'USA'), (123, 'UZB'), (150, 'VEN'), (19, 'VIE'), (48, 'YUG'), (1, 'ZAM'), (26, 'ZIM'), (4, 'rc=')]","[('AHO', 6), ('ALB', 2), ('ALG', 63), ('AND', 1), ('ANG', 1), ('ANT', 8), ('ARG', 456), ('ARM', 27), ('AUS', 742), ('AUT', 236), ('AZE', 10), ('BAH', 22), ('BAR', 20), ('BDI', 5), ('BEL', 247), ('BEN', 2), ('BER', 20), ('BIH', 75), ('BLR', 144), ('BOL', 97), ('BOT', 17), ('BRA', 456), ('BRN', 5), ('BRU', 4), ('BUL', 181), ('CAN', 331), ('CGO', 2), ('CHI', 114), ('CHN', 391), ('CMR', 8), ('COL', 240), ('CRC', 24), ('CRO', 240), ('CUB', 39), ('CYP', 22), ('CZE', 456), ('DEN', 79), ('DOM', 38), ('ECA', 3), ('ECU', 90), ('EGY', 112), ('ESA', 33), ('ESP', 853), ('EST', 48), ('ETH', 8), ('FIJ', 5), ('FIN', 103), ('FRA', 736), ('FRG', 22), ('GBR', 660), ('GEO', 91), ('GER', 833), ('GHA', 4), ('GRE', 163), ('GRN', 1), ('GUA', 29), ('GUD', 8), ('HAI', 5), ('HKG', 56), ('HON', 8), ('HUN', 169), ('INA', 181), ('IND', 478), ('IRI', 15), ('IRL', 68), ('IRQ', 7), ('ISL', 18), ('ISR', 232), ('ITA', 866), ('JAM', 19), ('JOR', 6), ('JPN', 823), ('KAZ', 99), ('KEN', 23), ('KGZ', 23), ('KOR', 274), ('KUW', 3), ('LAT', 56), ('LES', 3), ('LIB', 11), ('LIE', 15), ('LTU', 31), ('LUX', 37), ('MAD', 21), ('MAR', 97), ('MAS', 35), ('MDA', 45), ('MEX', 416), ('MGL', 1), ('MKD', 23), ('MLT', 17), ('MNE', 25), ('MON', 2), ('MRI', 15), ('MRN', 4), ('NAM', 13), ('NCA', 3), ('NED', 342), ('NGR', 80), ('NOR', 68), ('NZL', 104), ('OMA', 3), ('PAK', 18), ('PAN', 22), ('PAR', 56), ('PER', 76), ('PHI', 70), ('PNG', 1), ('POC', 12), ('POL', 266), ('POR', 142), ('PUR', 43), ('QAT', 1), ('REU', 17), ('RHO', 3), ('ROU', 422), ('RSA', 283), ('RUS', 810), ('SAM', 3), ('SCG', 16), ('SEN', 7), ('SIN', 44), ('SLO', 145), ('SMR', 4), ('SRB', 224), ('SRI', 32), ('SUI', 243), ('SVK', 247), ('SWE', 324), ('SYR', 21), ('TCH', 21), ('THA', 171), ('TJK', 6), ('TKM', 12), ('TOG', 2), ('TPE', 146), ('TRI', 29), ('TTO', 1), ('TUN', 57), ('TUR', 203), ('UAE', 1), ('UKR', 311), ('UNK', 11), ('URS', 22), ('URU', 56), ('USA', 2217), ('UZB', 123), ('VEN', 150), ('VIE', 19), ('YUG', 48), ('ZAM', 1), ('ZIM', 26), ('rc=', 4)]",True
SPIDER_dev_474,wta_1,How many players are from each country?,return countries ;return players from #1 ;return number of #2 for each #1,"SELECT count(*) ,  country_code FROM players GROUP BY country_code","SELECT players.country_code, COUNT(players.country_code) FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players ) GROUP BY players.country_code","[(6, 'AHO'), (2, 'ALB'), (63, 'ALG'), (1, 'AND'), (1, 'ANG'), (8, 'ANT'), (456, 'ARG'), (27, 'ARM'), (742, 'AUS'), (236, 'AUT'), (10, 'AZE'), (22, 'BAH'), (20, 'BAR'), (5, 'BDI'), (247, 'BEL'), (2, 'BEN'), (20, 'BER'), (75, 'BIH'), (144, 'BLR'), (97, 'BOL'), (17, 'BOT'), (456, 'BRA'), (5, 'BRN'), (4, 'BRU'), (181, 'BUL'), (331, 'CAN'), (2, 'CGO'), (114, 'CHI'), (391, 'CHN'), (8, 'CMR'), (240, 'COL'), (24, 'CRC'), (240, 'CRO'), (39, 'CUB'), (22, 'CYP'), (456, 'CZE'), (79, 'DEN'), (38, 'DOM'), (3, 'ECA'), (90, 'ECU'), (112, 'EGY'), (33, 'ESA'), (853, 'ESP'), (48, 'EST'), (8, 'ETH'), (5, 'FIJ'), (103, 'FIN'), (736, 'FRA'), (22, 'FRG'), (660, 'GBR'), (91, 'GEO'), (833, 'GER'), (4, 'GHA'), (163, 'GRE'), (1, 'GRN'), (29, 'GUA'), (8, 'GUD'), (5, 'HAI'), (56, 'HKG'), (8, 'HON'), (169, 'HUN'), (181, 'INA'), (478, 'IND'), (15, 'IRI'), (68, 'IRL'), (7, 'IRQ'), (18, 'ISL'), (232, 'ISR'), (866, 'ITA'), (19, 'JAM'), (6, 'JOR'), (823, 'JPN'), (99, 'KAZ'), (23, 'KEN'), (23, 'KGZ'), (274, 'KOR'), (3, 'KUW'), (56, 'LAT'), (3, 'LES'), (11, 'LIB'), (15, 'LIE'), (31, 'LTU'), (37, 'LUX'), (21, 'MAD'), (97, 'MAR'), (35, 'MAS'), (45, 'MDA'), (416, 'MEX'), (1, 'MGL'), (23, 'MKD'), (17, 'MLT'), (25, 'MNE'), (2, 'MON'), (15, 'MRI'), (4, 'MRN'), (13, 'NAM'), (3, 'NCA'), (342, 'NED'), (80, 'NGR'), (68, 'NOR'), (104, 'NZL'), (3, 'OMA'), (18, 'PAK'), (22, 'PAN'), (56, 'PAR'), (76, 'PER'), (70, 'PHI'), (1, 'PNG'), (12, 'POC'), (266, 'POL'), (142, 'POR'), (43, 'PUR'), (1, 'QAT'), (17, 'REU'), (3, 'RHO'), (422, 'ROU'), (283, 'RSA'), (810, 'RUS'), (3, 'SAM'), (16, 'SCG'), (7, 'SEN'), (44, 'SIN'), (145, 'SLO'), (4, 'SMR'), (224, 'SRB'), (32, 'SRI'), (243, 'SUI'), (247, 'SVK'), (324, 'SWE'), (21, 'SYR'), (21, 'TCH'), (171, 'THA'), (6, 'TJK'), (12, 'TKM'), (2, 'TOG'), (146, 'TPE'), (29, 'TRI'), (1, 'TTO'), (57, 'TUN'), (203, 'TUR'), (1, 'UAE'), (311, 'UKR'), (11, 'UNK'), (22, 'URS'), (56, 'URU'), (2217, 'USA'), (123, 'UZB'), (150, 'VEN'), (19, 'VIE'), (48, 'YUG'), (1, 'ZAM'), (26, 'ZIM'), (4, 'rc=')]","[('AHO', 6), ('ALB', 2), ('ALG', 63), ('AND', 1), ('ANG', 1), ('ANT', 8), ('ARG', 456), ('ARM', 27), ('AUS', 742), ('AUT', 236), ('AZE', 10), ('BAH', 22), ('BAR', 20), ('BDI', 5), ('BEL', 247), ('BEN', 2), ('BER', 20), ('BIH', 75), ('BLR', 144), ('BOL', 97), ('BOT', 17), ('BRA', 456), ('BRN', 5), ('BRU', 4), ('BUL', 181), ('CAN', 331), ('CGO', 2), ('CHI', 114), ('CHN', 391), ('CMR', 8), ('COL', 240), ('CRC', 24), ('CRO', 240), ('CUB', 39), ('CYP', 22), ('CZE', 456), ('DEN', 79), ('DOM', 38), ('ECA', 3), ('ECU', 90), ('EGY', 112), ('ESA', 33), ('ESP', 853), ('EST', 48), ('ETH', 8), ('FIJ', 5), ('FIN', 103), ('FRA', 736), ('FRG', 22), ('GBR', 660), ('GEO', 91), ('GER', 833), ('GHA', 4), ('GRE', 163), ('GRN', 1), ('GUA', 29), ('GUD', 8), ('HAI', 5), ('HKG', 56), ('HON', 8), ('HUN', 169), ('INA', 181), ('IND', 478), ('IRI', 15), ('IRL', 68), ('IRQ', 7), ('ISL', 18), ('ISR', 232), ('ITA', 866), ('JAM', 19), ('JOR', 6), ('JPN', 823), ('KAZ', 99), ('KEN', 23), ('KGZ', 23), ('KOR', 274), ('KUW', 3), ('LAT', 56), ('LES', 3), ('LIB', 11), ('LIE', 15), ('LTU', 31), ('LUX', 37), ('MAD', 21), ('MAR', 97), ('MAS', 35), ('MDA', 45), ('MEX', 416), ('MGL', 1), ('MKD', 23), ('MLT', 17), ('MNE', 25), ('MON', 2), ('MRI', 15), ('MRN', 4), ('NAM', 13), ('NCA', 3), ('NED', 342), ('NGR', 80), ('NOR', 68), ('NZL', 104), ('OMA', 3), ('PAK', 18), ('PAN', 22), ('PAR', 56), ('PER', 76), ('PHI', 70), ('PNG', 1), ('POC', 12), ('POL', 266), ('POR', 142), ('PUR', 43), ('QAT', 1), ('REU', 17), ('RHO', 3), ('ROU', 422), ('RSA', 283), ('RUS', 810), ('SAM', 3), ('SCG', 16), ('SEN', 7), ('SIN', 44), ('SLO', 145), ('SMR', 4), ('SRB', 224), ('SRI', 32), ('SUI', 243), ('SVK', 247), ('SWE', 324), ('SYR', 21), ('TCH', 21), ('THA', 171), ('TJK', 6), ('TKM', 12), ('TOG', 2), ('TPE', 146), ('TRI', 29), ('TTO', 1), ('TUN', 57), ('TUR', 203), ('UAE', 1), ('UKR', 311), ('UNK', 11), ('URS', 22), ('URU', 56), ('USA', 2217), ('UZB', 123), ('VEN', 150), ('VIE', 19), ('YUG', 48), ('ZAM', 1), ('ZIM', 26), ('rc=', 4)]",True
SPIDER_dev_475,wta_1,find the code of the country where has the greatest number of players.,return countries ;return players of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return code of #4,SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,SELECT players.country_code FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players ) GROUP BY players.country_code ORDER BY COUNT(players.player_id) DESC LIMIT 1 ),"[('USA',)]","[('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',)]",True
SPIDER_dev_476,wta_1,What is the code of the country with the most players?,return countries ;return players of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return code of #4,SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,SELECT players.country_code FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players ) GROUP BY players.country_code ORDER BY COUNT(players.player_id) DESC LIMIT 1 ),"[('USA',)]","[('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',)]",True
SPIDER_dev_477,wta_1,Find the codes of countries that have more than 50 players.,return countries ;return players of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 50 ;return codes of #4,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,SELECT players.country_code FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players ) GROUP BY players.country_code HAVING COUNT(players.player_id) > 50 ),"[('ALG',), ('ARG',), ('AUS',), ('AUT',), ('BEL',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BUL',), ('CAN',), ('CHI',), ('CHN',), ('COL',), ('CRO',), ('CZE',), ('DEN',), ('ECU',), ('EGY',), ('ESP',), ('FIN',), ('FRA',), ('GBR',), ('GEO',), ('GER',), ('GRE',), ('HKG',), ('HUN',), ('INA',), ('IND',), ('IRL',), ('ISR',), ('ITA',), ('JPN',), ('KAZ',), ('KOR',), ('LAT',), ('MAR',), ('MEX',), ('NED',), ('NGR',), ('NOR',), ('NZL',), ('PAR',), ('PER',), ('PHI',), ('POL',), ('POR',), ('ROU',), ('RSA',), ('RUS',), ('SLO',), ('SRB',), ('SUI',), ('SVK',), ('SWE',), ('THA',), ('TPE',), ('TUN',), ('TUR',), ('UKR',), ('URU',), ('USA',), ('UZB',), ('VEN',)]","[('SUI',), ('CRO',), ('BEL',), ('AUS',), ('USA',), ('SVK',), ('CRO',), ('AUS',), ('THA',), ('ITA',), ('SLO',), ('CAN',), ('MEX',), ('ISR',), ('HUN',), ('FRA',), ('ESP',), ('GER',), ('FRA',), ('USA',), ('FRA',), ('SUI',), ('AUS',), ('VEN',), ('SVK',), ('ARG',), ('ESP',), ('CAN',), ('AUS',), ('SUI',), ('USA',), ('AUT',), ('USA',), ('AUS',), ('ESP',), ('AUS',), ('BEL',), ('AUS',), ('USA',), ('ISR',), ('USA',), ('BEL',), ('FRA',), ('CZE',), ('USA',), ('USA',), ('NZL',), ('RUS',), ('ESP',), ('CZE',), ('ROU',), ('BLR',), ('BUL',), ('AUT',), ('ARG',), ('CRO',), ('USA',), ('HUN',), ('ROU',), ('ITA',), ('ESP',), ('RUS',), ('RSA',), ('FRA',), ('ESP',), ('SUI',), ('USA',), ('RUS',), ('FRA',), ('CZE',), ('GBR',), ('USA',), ('CHN',), ('BEL',), ('USA',), ('AUT',), ('BEL',), ('BEL',), ('GER',), ('NED',), ('USA',), ('SWE',), ('JPN',), ('BUL',), ('NED',), ('CZE',), ('NED',), ('GER',), ('TPE',), ('FRA',), ('GER',), ('USA',), ('FRA',), ('FRA',), ('SVK',), ('CAN',), ('NED',), ('GER',), ('AUS',), ('AUS',), ('FRA',), ('AUS',), ('ESP',), ('ARG',), ('RUS',), ('FRA',), ('COL',), ('RUS',), ('FRA',), ('RUS',), ('AUT',), ('USA',), ('BLR',), ('CZE',), ('ESP',), ('HUN',), ('AUS',), ('RUS',), ('SLO',), ('GER',), ('USA',), ('USA',), ('FRA',), ('USA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('NED',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('INA',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('AUS',), ('NED',), ('FRA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('NED',), ('AUS',), ('USA',), ('INA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('NED',), ('AUS',), ('AUS',), ('MEX',), ('AUS',), ('AUS',), ('FRA',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('GBR',), ('FRA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',)]",True
SPIDER_dev_478,wta_1,What are the codes of countries with more than 50 players?,return countries ;return players of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 50 ;return codes of #4,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,SELECT players.country_code FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players WHERE players.country_code IN ( SELECT players.country_code FROM players ) GROUP BY players.country_code HAVING COUNT(players.player_id) > 50 ),"[('ALG',), ('ARG',), ('AUS',), ('AUT',), ('BEL',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BUL',), ('CAN',), ('CHI',), ('CHN',), ('COL',), ('CRO',), ('CZE',), ('DEN',), ('ECU',), ('EGY',), ('ESP',), ('FIN',), ('FRA',), ('GBR',), ('GEO',), ('GER',), ('GRE',), ('HKG',), ('HUN',), ('INA',), ('IND',), ('IRL',), ('ISR',), ('ITA',), ('JPN',), ('KAZ',), ('KOR',), ('LAT',), ('MAR',), ('MEX',), ('NED',), ('NGR',), ('NOR',), ('NZL',), ('PAR',), ('PER',), ('PHI',), ('POL',), ('POR',), ('ROU',), ('RSA',), ('RUS',), ('SLO',), ('SRB',), ('SUI',), ('SVK',), ('SWE',), ('THA',), ('TPE',), ('TUN',), ('TUR',), ('UKR',), ('URU',), ('USA',), ('UZB',), ('VEN',)]","[('SUI',), ('CRO',), ('BEL',), ('AUS',), ('USA',), ('SVK',), ('CRO',), ('AUS',), ('THA',), ('ITA',), ('SLO',), ('CAN',), ('MEX',), ('ISR',), ('HUN',), ('FRA',), ('ESP',), ('GER',), ('FRA',), ('USA',), ('FRA',), ('SUI',), ('AUS',), ('VEN',), ('SVK',), ('ARG',), ('ESP',), ('CAN',), ('AUS',), ('SUI',), ('USA',), ('AUT',), ('USA',), ('AUS',), ('ESP',), ('AUS',), ('BEL',), ('AUS',), ('USA',), ('ISR',), ('USA',), ('BEL',), ('FRA',), ('CZE',), ('USA',), ('USA',), ('NZL',), ('RUS',), ('ESP',), ('CZE',), ('ROU',), ('BLR',), ('BUL',), ('AUT',), ('ARG',), ('CRO',), ('USA',), ('HUN',), ('ROU',), ('ITA',), ('ESP',), ('RUS',), ('RSA',), ('FRA',), ('ESP',), ('SUI',), ('USA',), ('RUS',), ('FRA',), ('CZE',), ('GBR',), ('USA',), ('CHN',), ('BEL',), ('USA',), ('AUT',), ('BEL',), ('BEL',), ('GER',), ('NED',), ('USA',), ('SWE',), ('JPN',), ('BUL',), ('NED',), ('CZE',), ('NED',), ('GER',), ('TPE',), ('FRA',), ('GER',), ('USA',), ('FRA',), ('FRA',), ('SVK',), ('CAN',), ('NED',), ('GER',), ('AUS',), ('AUS',), ('FRA',), ('AUS',), ('ESP',), ('ARG',), ('RUS',), ('FRA',), ('COL',), ('RUS',), ('FRA',), ('RUS',), ('AUT',), ('USA',), ('BLR',), ('CZE',), ('ESP',), ('HUN',), ('AUS',), ('RUS',), ('SLO',), ('GER',), ('USA',), ('USA',), ('FRA',), ('USA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('NED',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('INA',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('AUS',), ('NED',), ('FRA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('NED',), ('AUS',), ('USA',), ('INA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('NED',), ('AUS',), ('AUS',), ('MEX',), ('AUS',), ('AUS',), ('FRA',), ('AUS',), ('AUS',), ('AUS',), ('USA',), ('AUS',), ('AUS',), ('GBR',), ('FRA',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',)]",True
SPIDER_dev_479,wta_1,Find the total number of tours for each ranking date.,return ranking dates ;return tours of #1 ;return number of #2 for each #1,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","SELECT rankings.ranking_date, SUM(rankings.tours) FROM rankings WHERE rankings.ranking_date IN ( SELECT rankings.ranking_date FROM rankings ) GROUP BY rankings.ranking_date","[(0, 19870119), (0, 19870126), (0, 19870202), (0, 19870209), (0, 19870302), (0, 19870330), (0, 19870406), (0, 19870413), (0, 19870420), (0, 19870427), (0, 19870504), (0, 19870511), (0, 19870518), (0, 19870525), (0, 19870601), (0, 19870608), (0, 19870615), (0, 19870622), (0, 19870629), (0, 19870706), (0, 19870713), (0, 19870720), (0, 19870727), (0, 19870803), (0, 19870810), (0, 19870817), (0, 19870824), (0, 19870831), (0, 19870907), (0, 19870914), (0, 19870921), (0, 19870928), (0, 19871005), (0, 19871012), (0, 19871019), (0, 19871026), (0, 19871102), (0, 19871109), (0, 19871116), (0, 19871123), (0, 19871130), (0, 19871207), (0, 19871214), (0, 19871221), (0, 19871228), (0, 19880101), (0, 19880104), (0, 19880111), (0, 19880118), (0, 19880125), (0, 19880201), (0, 19880208), (0, 19880215), (0, 19880222), (0, 19880229), (0, 19880307), (0, 19880314), (0, 19880321), (0, 19880328), (0, 19880404), (0, 19880411), (0, 19880418), (0, 19880425), (0, 19880502), (0, 19880509), (0, 19880516), (0, 19880523), (0, 19880530), (0, 19880606), (0, 19880613), (0, 19880620), (0, 19880627), (0, 19880704), (0, 19880711), (0, 19880718), (0, 19880725), (0, 19880801), (0, 19880808), (0, 19880815), (0, 19880822), (0, 19880829), (0, 19880905), (0, 19880912), (0, 19880919), (0, 19880926), (0, 19881003), (0, 19881010), (0, 19881017), (0, 19881024), (0, 19881031), (0, 19881107), (0, 19881114), (29, 19881121), (29, 19881128), (29, 19881205), (29, 19881212), (29, 19881219), (29, 19881226), (28, 19890101), (29, 19890102), (29, 19890109), (29, 19890116), (29, 19890123), (29, 19890130), (29, 19890206), (0, 19890213), (0, 19890220), (0, 19890227), (0, 19890306), (29, 19890313), (29, 19890320), (0, 19890327), (0, 19890403), (29, 19890410), (29, 19890417), (29, 19890424), (29, 19890501), (29, 19890508), (29, 19890515), (29, 19890522), (29, 19890529), (29, 19890605), (29, 19890612), (29, 19890619), (29, 19890626), (29, 19890703), (29, 19890710), (29, 19890717), (29, 19890724), (29, 19890731), (29, 19890807), (29, 19890814), (29, 19890821), (29, 19890828), (29, 19890904), (29, 19890911), (29, 19890918), (29, 19890925), (29, 19891002), (29, 19891009), (29, 19891016), (29, 19891023), (29, 19891030), (29, 19891106), (29, 19891113), (29, 19891120), (29, 19891127), (29, 19891204), (29, 19891211), (29, 19891218), (29, 19891225), (28, 19900101), (29, 19900108), (29, 19900115), (29, 19900122), (29, 19900129), (29, 19900205), (29, 19900212), (29, 19900219), (29, 19900226), (29, 19900305), (29, 19900312), (29, 19900319), (29, 19900326), (29, 19900402), (29, 19900409), (29, 19900416), (29, 19900423), (29, 19900430), (29, 19900507), (29, 19900514), (29, 19900521), (29, 19900528), (29, 19900604), (29, 19900611), (30, 19900618), (30, 19900625), (30, 19900702), (30, 19900709), (30, 19900716), (30, 19900723), (30, 19900730), (30, 19900806), (30, 19900813), (30, 19900820), (30, 19900827), (30, 19900903), (30, 19900910), (30, 19900917), (30, 19900924), (30, 19901001), (30, 19901008), (30, 19901015), (30, 19901022), (30, 19901029), (30, 19901105), (30, 19901112), (30, 19901119), (30, 19901126), (30, 19901203)]","[(19870119, 0), (19870126, 0), (19870202, 0), (19870209, 0), (19870302, 0), (19870330, 0), (19870406, 0), (19870413, 0), (19870420, 0), (19870427, 0), (19870504, 0), (19870511, 0), (19870518, 0), (19870525, 0), (19870601, 0), (19870608, 0), (19870615, 0), (19870622, 0), (19870629, 0), (19870706, 0), (19870713, 0), (19870720, 0), (19870727, 0), (19870803, 0), (19870810, 0), (19870817, 0), (19870824, 0), (19870831, 0), (19870907, 0), (19870914, 0), (19870921, 0), (19870928, 0), (19871005, 0), (19871012, 0), (19871019, 0), (19871026, 0), (19871102, 0), (19871109, 0), (19871116, 0), (19871123, 0), (19871130, 0), (19871207, 0), (19871214, 0), (19871221, 0), (19871228, 0), (19880101, 0), (19880104, 0), (19880111, 0), (19880118, 0), (19880125, 0), (19880201, 0), (19880208, 0), (19880215, 0), (19880222, 0), (19880229, 0), (19880307, 0), (19880314, 0), (19880321, 0), (19880328, 0), (19880404, 0), (19880411, 0), (19880418, 0), (19880425, 0), (19880502, 0), (19880509, 0), (19880516, 0), (19880523, 0), (19880530, 0), (19880606, 0), (19880613, 0), (19880620, 0), (19880627, 0), (19880704, 0), (19880711, 0), (19880718, 0), (19880725, 0), (19880801, 0), (19880808, 0), (19880815, 0), (19880822, 0), (19880829, 0), (19880905, 0), (19880912, 0), (19880919, 0), (19880926, 0), (19881003, 0), (19881010, 0), (19881017, 0), (19881024, 0), (19881031, 0), (19881107, 0), (19881114, 0), (19881121, 29), (19881128, 29), (19881205, 29), (19881212, 29), (19881219, 29), (19881226, 29), (19890101, 28), (19890102, 29), (19890109, 29), (19890116, 29), (19890123, 29), (19890130, 29), (19890206, 29), (19890213, 0), (19890220, 0), (19890227, 0), (19890306, 0), (19890313, 29), (19890320, 29), (19890327, 0), (19890403, 0), (19890410, 29), (19890417, 29), (19890424, 29), (19890501, 29), (19890508, 29), (19890515, 29), (19890522, 29), (19890529, 29), (19890605, 29), (19890612, 29), (19890619, 29), (19890626, 29), (19890703, 29), (19890710, 29), (19890717, 29), (19890724, 29), (19890731, 29), (19890807, 29), (19890814, 29), (19890821, 29), (19890828, 29), (19890904, 29), (19890911, 29), (19890918, 29), (19890925, 29), (19891002, 29), (19891009, 29), (19891016, 29), (19891023, 29), (19891030, 29), (19891106, 29), (19891113, 29), (19891120, 29), (19891127, 29), (19891204, 29), (19891211, 29), (19891218, 29), (19891225, 29), (19900101, 28), (19900108, 29), (19900115, 29), (19900122, 29), (19900129, 29), (19900205, 29), (19900212, 29), (19900219, 29), (19900226, 29), (19900305, 29), (19900312, 29), (19900319, 29), (19900326, 29), (19900402, 29), (19900409, 29), (19900416, 29), (19900423, 29), (19900430, 29), (19900507, 29), (19900514, 29), (19900521, 29), (19900528, 29), (19900604, 29), (19900611, 29), (19900618, 30), (19900625, 30), (19900702, 30), (19900709, 30), (19900716, 30), (19900723, 30), (19900730, 30), (19900806, 30), (19900813, 30), (19900820, 30), (19900827, 30), (19900903, 30), (19900910, 30), (19900917, 30), (19900924, 30), (19901001, 30), (19901008, 30), (19901015, 30), (19901022, 30), (19901029, 30), (19901105, 30), (19901112, 30), (19901119, 30), (19901126, 30), (19901203, 30)]",True
SPIDER_dev_48,pets_1,How much does the youngest dog weigh?,return dogs ;return #1 that is youngest ;return how much #2 weighs,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,SELECT pets.weight FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets ) ORDER BY pets.pet_age ASC LIMIT 1 ),"[(9.3,)]","[(9.3,)]",True
SPIDER_dev_480,wta_1,How many total tours were there for each ranking date?,return ranking dates ;return tours of #1 ;return number of #2 for each #1,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","SELECT rankings.ranking_date, SUM(rankings.tours) FROM rankings WHERE rankings.ranking_date IN ( SELECT rankings.ranking_date FROM rankings ) GROUP BY rankings.ranking_date","[(0, 19870119), (0, 19870126), (0, 19870202), (0, 19870209), (0, 19870302), (0, 19870330), (0, 19870406), (0, 19870413), (0, 19870420), (0, 19870427), (0, 19870504), (0, 19870511), (0, 19870518), (0, 19870525), (0, 19870601), (0, 19870608), (0, 19870615), (0, 19870622), (0, 19870629), (0, 19870706), (0, 19870713), (0, 19870720), (0, 19870727), (0, 19870803), (0, 19870810), (0, 19870817), (0, 19870824), (0, 19870831), (0, 19870907), (0, 19870914), (0, 19870921), (0, 19870928), (0, 19871005), (0, 19871012), (0, 19871019), (0, 19871026), (0, 19871102), (0, 19871109), (0, 19871116), (0, 19871123), (0, 19871130), (0, 19871207), (0, 19871214), (0, 19871221), (0, 19871228), (0, 19880101), (0, 19880104), (0, 19880111), (0, 19880118), (0, 19880125), (0, 19880201), (0, 19880208), (0, 19880215), (0, 19880222), (0, 19880229), (0, 19880307), (0, 19880314), (0, 19880321), (0, 19880328), (0, 19880404), (0, 19880411), (0, 19880418), (0, 19880425), (0, 19880502), (0, 19880509), (0, 19880516), (0, 19880523), (0, 19880530), (0, 19880606), (0, 19880613), (0, 19880620), (0, 19880627), (0, 19880704), (0, 19880711), (0, 19880718), (0, 19880725), (0, 19880801), (0, 19880808), (0, 19880815), (0, 19880822), (0, 19880829), (0, 19880905), (0, 19880912), (0, 19880919), (0, 19880926), (0, 19881003), (0, 19881010), (0, 19881017), (0, 19881024), (0, 19881031), (0, 19881107), (0, 19881114), (29, 19881121), (29, 19881128), (29, 19881205), (29, 19881212), (29, 19881219), (29, 19881226), (28, 19890101), (29, 19890102), (29, 19890109), (29, 19890116), (29, 19890123), (29, 19890130), (29, 19890206), (0, 19890213), (0, 19890220), (0, 19890227), (0, 19890306), (29, 19890313), (29, 19890320), (0, 19890327), (0, 19890403), (29, 19890410), (29, 19890417), (29, 19890424), (29, 19890501), (29, 19890508), (29, 19890515), (29, 19890522), (29, 19890529), (29, 19890605), (29, 19890612), (29, 19890619), (29, 19890626), (29, 19890703), (29, 19890710), (29, 19890717), (29, 19890724), (29, 19890731), (29, 19890807), (29, 19890814), (29, 19890821), (29, 19890828), (29, 19890904), (29, 19890911), (29, 19890918), (29, 19890925), (29, 19891002), (29, 19891009), (29, 19891016), (29, 19891023), (29, 19891030), (29, 19891106), (29, 19891113), (29, 19891120), (29, 19891127), (29, 19891204), (29, 19891211), (29, 19891218), (29, 19891225), (28, 19900101), (29, 19900108), (29, 19900115), (29, 19900122), (29, 19900129), (29, 19900205), (29, 19900212), (29, 19900219), (29, 19900226), (29, 19900305), (29, 19900312), (29, 19900319), (29, 19900326), (29, 19900402), (29, 19900409), (29, 19900416), (29, 19900423), (29, 19900430), (29, 19900507), (29, 19900514), (29, 19900521), (29, 19900528), (29, 19900604), (29, 19900611), (30, 19900618), (30, 19900625), (30, 19900702), (30, 19900709), (30, 19900716), (30, 19900723), (30, 19900730), (30, 19900806), (30, 19900813), (30, 19900820), (30, 19900827), (30, 19900903), (30, 19900910), (30, 19900917), (30, 19900924), (30, 19901001), (30, 19901008), (30, 19901015), (30, 19901022), (30, 19901029), (30, 19901105), (30, 19901112), (30, 19901119), (30, 19901126), (30, 19901203)]","[(19870119, 0), (19870126, 0), (19870202, 0), (19870209, 0), (19870302, 0), (19870330, 0), (19870406, 0), (19870413, 0), (19870420, 0), (19870427, 0), (19870504, 0), (19870511, 0), (19870518, 0), (19870525, 0), (19870601, 0), (19870608, 0), (19870615, 0), (19870622, 0), (19870629, 0), (19870706, 0), (19870713, 0), (19870720, 0), (19870727, 0), (19870803, 0), (19870810, 0), (19870817, 0), (19870824, 0), (19870831, 0), (19870907, 0), (19870914, 0), (19870921, 0), (19870928, 0), (19871005, 0), (19871012, 0), (19871019, 0), (19871026, 0), (19871102, 0), (19871109, 0), (19871116, 0), (19871123, 0), (19871130, 0), (19871207, 0), (19871214, 0), (19871221, 0), (19871228, 0), (19880101, 0), (19880104, 0), (19880111, 0), (19880118, 0), (19880125, 0), (19880201, 0), (19880208, 0), (19880215, 0), (19880222, 0), (19880229, 0), (19880307, 0), (19880314, 0), (19880321, 0), (19880328, 0), (19880404, 0), (19880411, 0), (19880418, 0), (19880425, 0), (19880502, 0), (19880509, 0), (19880516, 0), (19880523, 0), (19880530, 0), (19880606, 0), (19880613, 0), (19880620, 0), (19880627, 0), (19880704, 0), (19880711, 0), (19880718, 0), (19880725, 0), (19880801, 0), (19880808, 0), (19880815, 0), (19880822, 0), (19880829, 0), (19880905, 0), (19880912, 0), (19880919, 0), (19880926, 0), (19881003, 0), (19881010, 0), (19881017, 0), (19881024, 0), (19881031, 0), (19881107, 0), (19881114, 0), (19881121, 29), (19881128, 29), (19881205, 29), (19881212, 29), (19881219, 29), (19881226, 29), (19890101, 28), (19890102, 29), (19890109, 29), (19890116, 29), (19890123, 29), (19890130, 29), (19890206, 29), (19890213, 0), (19890220, 0), (19890227, 0), (19890306, 0), (19890313, 29), (19890320, 29), (19890327, 0), (19890403, 0), (19890410, 29), (19890417, 29), (19890424, 29), (19890501, 29), (19890508, 29), (19890515, 29), (19890522, 29), (19890529, 29), (19890605, 29), (19890612, 29), (19890619, 29), (19890626, 29), (19890703, 29), (19890710, 29), (19890717, 29), (19890724, 29), (19890731, 29), (19890807, 29), (19890814, 29), (19890821, 29), (19890828, 29), (19890904, 29), (19890911, 29), (19890918, 29), (19890925, 29), (19891002, 29), (19891009, 29), (19891016, 29), (19891023, 29), (19891030, 29), (19891106, 29), (19891113, 29), (19891120, 29), (19891127, 29), (19891204, 29), (19891211, 29), (19891218, 29), (19891225, 29), (19900101, 28), (19900108, 29), (19900115, 29), (19900122, 29), (19900129, 29), (19900205, 29), (19900212, 29), (19900219, 29), (19900226, 29), (19900305, 29), (19900312, 29), (19900319, 29), (19900326, 29), (19900402, 29), (19900409, 29), (19900416, 29), (19900423, 29), (19900430, 29), (19900507, 29), (19900514, 29), (19900521, 29), (19900528, 29), (19900604, 29), (19900611, 29), (19900618, 30), (19900625, 30), (19900702, 30), (19900709, 30), (19900716, 30), (19900723, 30), (19900730, 30), (19900806, 30), (19900813, 30), (19900820, 30), (19900827, 30), (19900903, 30), (19900910, 30), (19900917, 30), (19900924, 30), (19901001, 30), (19901008, 30), (19901015, 30), (19901022, 30), (19901029, 30), (19901105, 30), (19901112, 30), (19901119, 30), (19901126, 30), (19901203, 30)]",True
SPIDER_dev_481,wta_1,Find the number of matches happened in each year.,return matches ;return years of #1 ;return number of #1 for each #2,"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","SELECT matches.year, COUNT(matches.loser_id) FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) GROUP BY matches.year","[(12, 2013), (158, 2016), (108, 2017)]","[(2013, 12), (2016, 158), (2017, 108)]",True
SPIDER_dev_482,wta_1,How many matches were played in each year?,return matches ;return years played in of #1 ;return number of #1 for each #2,"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","SELECT matches.year, COUNT(matches.loser_id) FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) GROUP BY matches.year","[(12, 2013), (158, 2016), (108, 2017)]","[(2013, 12), (2016, 158), (2017, 108)]",True
SPIDER_dev_483,wta_1,Find the name and rank of the 3 youngest winners across all matches.,"return matches ;return winners of #1 ;return the 3 youngest #2 ;return names of #3 ;return ranks of #3 ;return #4, #5","SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","SELECT players.first_name, rankings.player_id FROM rankings, matches, players WHERE matches.loser_id = players.player_id AND players.player_id = rankings.player_id AND matches.winner_age IN ( SELECT matches.winner_age FROM matches WHERE matches.winner_entry IN ( SELECT matches.winner_entry FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ) )","[('Madison Keys', 17), ('Madison Keys', 24), ('Madison Keys', 16)]","[('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474)]",False
SPIDER_dev_484,wta_1,What are the names and ranks of the three youngest winners across all matches?,"return matches ;return winners of #1 ;return the three youngest #2 ;return #3 that are across all matches ;return names of #4 ;return ranks of #4 ;return #5, #6","SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","SELECT players.first_name, rankings.player_id FROM rankings, matches, players WHERE matches.loser_id = players.player_id AND players.player_id = rankings.player_id AND matches.winner_age IN ( SELECT matches.winner_age FROM matches WHERE matches.winner_entry IN ( SELECT matches.winner_entry FROM matches WHERE matches.loser_id IN ( SELECT matches.loser_id FROM matches ) ) )","[('Madison Keys', 17), ('Madison Keys', 24), ('Madison Keys', 16)]","[('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474), ('Agnieszka', 201474)]",False
SPIDER_dev_485,wta_1,How many different winners both participated in the WTA Championships and were left handed?,return wta championships ;return winners of #1 ;return #2 that were left handed ;return different #3 ;return number of #4,SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L',SELECT COUNT(DISTINCT matches.winner_name) FROM matches WHERE matches.tourney_name IN ( SELECT matches.tourney_name FROM matches WHERE matches.tourney_name = 'WTA Championships' ) AND matches.winner_hand = 'L',"[(2,)]","[(2,)]",True
SPIDER_dev_486,wta_1,Find the number of left handed winners who participated in the WTA Championships.,return wta championships ;return winners of #1 ;return #2 that are left handed ;return number of #3,SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L',SELECT COUNT(DISTINCT matches.winner_name) FROM matches WHERE matches.tourney_name IN ( SELECT matches.tourney_name FROM matches WHERE matches.tourney_name = 'WTA Championships' ) AND matches.winner_hand = 'L',"[(2,)]","[(2,)]",True
SPIDER_dev_487,wta_1,"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.","return winners ;return rank points of #1 ;return #1 where #2 is highest ;return first name of #3 ;return country code of #3 ;return birth date of #3 ;return #4, #5, #6","SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","SELECT matches.winner_name, players.country_code, players.birth_date FROM matches, players WHERE matches.loser_id = players.player_id AND matches.winner_entry IN ( SELECT matches.winner_entry FROM matches WHERE matches.winner_entry IN ( SELECT matches.winner_entry FROM matches ) ORDER BY matches.winner_rank_points DESC LIMIT 1 )","[('Serena', 'USA', 19810926)]","[('Serena Williams', 'POL', 19890306), ('Serena Williams', 'CZE', 19900308), ('Serena Williams', 'GER', 19880118), ('Petra Kvitova', 'POL', 19890306), ('Angelique Kerber', 'POL', 19890306), ('Petra Kvitova', 'GER', 19880118), ('Na Li', 'BLR', 19890731), ('Victoria Azarenka', 'ITA', 19870429), ('Jelena Jankovic', 'BLR', 19890731), ('Na Li', 'ITA', 19870429), ('Na Li', 'SRB', 19850228), ('Sara Errani', 'SRB', 19850228), ('Sloane Stephens', 'DEN', 19900711), ('Angelique Kerber', 'ESP', 19880903), ('Alize Cornet', 'GER', 19900711), ('Simona Halep', 'CZE', 19920321), ('Ekaterina Makarova', 'CZE', 19920321), ('Madison Keys', 'SRB', 19871106), ('Agnieszka Radwanska', 'ESP', 19880903), ('Angelique Kerber', 'BLR', 19890731), ('Serena Williams', 'POL', 19890306), ('Angelique Kerber', 'USA', 19810926), ('Venus Williams', 'JPN', 19910429), ('Misaki Doi', 'TPE', 19860104), ('Roberta Vinci', 'SRB', 19871106), ('Sloane Stephens', 'BEL', 19891020), ('Yanina Wickmayer', 'RUS', 19910703), ('Carla Suarez Navarro', 'POL', 19890306), ('Agnieszka Radwanska', 'ITA', 19830218), ('Victoria Azarenka', 'USA', 19810926), ('Serena Williams', 'POL', 19890306), ('Victoria Azarenka', 'CZE', 19920321), ('Serena Williams', 'ROU', 19910927), ('Agnieszka Radwanska', 'CZE', 19900308), ('Agnieszka Radwanska', 'SRB', 19850228), ('Victoria Azarenka', 'AUS', 19840330), ('Simona Halep', 'RUS', 19880607), ('Agnieszka Radwanska', 'ROU', 19870925), ('Roberta Vinci', 'UKR', 19940912), ('Karolina Pliskova', 'SRB', 19871106), ('Victoria Azarenka', 'RUS', 19850627), ('Victoria Azarenka', 'GER', 19880118), ('Svetlana Kuznetsova', 'RUS', 19880607), ('Angelique Kerber', 'USA', 19950217), ('Svetlana Kuznetsova', 'USA', 19810926), ('Ekaterina Makarova', 'UKR', 19940912), ('Victoria Azarenka', 'ESP', 19931008), ('Elina Svitolina', 'DEN', 19900711), ('Ekaterina Makarova', 'CZE', 19900308), ('Madison Keys', 'ITA', 19830218), ('Sloane Stephens', 'GER', 19880118), ('Sara Errani', 'AUS', 19840330), ('Dominika Cibulkova', 'ITA', 19911230), ('Camila Giorgi', 'BEL', 19860110), ('Angelique Kerber', 'CZE', 19900308), ('Petra Kvitova', 'ESP', 19931008), ('Angelique Kerber', 'ESP', 19880903), ('Lucie Safarova', 'AUS', 19840330), ('Samantha Stosur', 'RUS', 19850627), ('Lucie Safarova', 'CZE', 19920321), ('Samantha Stosur', 'CZE', 19860328), ('Serena Williams', 'RUS', 19850627), ('Serena Williams', 'FRA', 19930514), ('Elina Svitolina', 'SRB', 19871106), ('Carla Suarez Navarro', 'SVK', 19890506), ('Svetlana Kuznetsova', 'RUS', 19910703), ('Samantha Stosur', 'CZE', 19870204), ('Agnieszka Radwanska', 'CZE', 19860328), ('Serena Williams', 'UKR', 19940912), ('Garbine Muguruza', 'RUS', 19850627), ('Samantha Stosur', 'ROU', 19910927), ('Garbine Muguruza', 'AUS', 19840330), ('Garbine Muguruza', 'USA', 19810926), ('Coco Vandeweghe', 'FRA', 19930514), ('Madison Keys', 'ESP', 19880903), ('Carla Suarez Navarro', 'GER', 19880118), ('Dominika Cibulkova', 'CZE', 19920321), ('Dominika Cibulkova', 'POL', 19890306), ('Svetlana Kuznetsova', 'USA', 19930320), ('Coco Vandeweghe', 'ITA', 19830218), ('Simona Halep', 'NED', 19911210), ('Serena Williams', 'RUS', 19850627), ('Anastasia Pavlyuchenkova', 'USA', 19911206), ('Dominika Cibulkova', 'POL', 19890306), ('Simona Halep', 'USA', 19950217), ('Venus Williams', 'ESP', 19880903), ('Serena Williams', 'RUS', 19910703), ('Angelique Kerber', 'ROU', 19910927), ('Angelique Kerber', 'USA', 19800617), ('Serena Williams', 'GER', 19880118), ('Johanna Larsson', 'GER', 19940216), ('Dominika Cibulkova', 'JPN', 19910429), ('Yanina Wickmayer', 'FRA', 19930514), ('Simona Halep', 'USA', 19950217), ('Simona Halep', 'GER', 19880118), ('Madison Keys', 'RUS', 19910703), ('Simona Halep', 'RUS', 19850627), ('Anastasia Pavlyuchenkova', 'POL', 19890306), ('Madison Keys', 'USA', 19800617), ('Svetlana Kuznetsova', 'CZE', 19900308), ('Simona Halep', 'CZE', 19920321), ('Angelique Kerber', 'UKR', 19940912), ('Irina Camelia Begu', 'HUN', 19930510), ('Elina Svitolina', 'USA', 19810926), ('Madison Keys', 'ESP', 19880903), ('Angelique Kerber', 'AUS', 19840330), ('Petra Kvitova', 'UKR', 19940912), ('Angelique Kerber', 'USA', 19950217), ('Petra Kvitova', 'USA', 19950217), ('Karolina Pliskova', 'GER', 19880118), ('Karolina Pliskova', 'ESP', 19931008), ('Angelique Kerber', 'ROU', 19910927), ('Karolina Pliskova', 'RUS', 19850627), ('Simona Halep', 'POL', 19890306), ('Angelique Kerber', 'ESP', 19880903), ('Garbine Muguruza', 'RUS', 19910703), ('Carla Suarez Navarro', 'ITA', 19830218), ('Agnieszka Radwanska', 'UKR', 19940912), ('Agnieszka Radwanska', 'CZE', 19900308), ('Carla Suarez Navarro', 'RUS', 19860801), ('Simona Halep', 'HUN', 19930510), ('Karolina Pliskova', 'RUS', 19910703), ('Petra Kvitova', 'UKR', 19940912), ('Simona Halep', 'ESP', 19880903), ('Karolina Pliskova', 'USA', 19800617), ('Angelique Kerber', 'CZE', 19900308), ('Serena Williams', 'ROU', 19910927), ('Angelique Kerber', 'ITA', 19830218), ('Karolina Pliskova', 'USA', 19810926), ('Angelique Kerber', 'CZE', 19920321), ('Petra Kvitova', 'SVK', 19890506), ('Petra Kvitova', 'ROU', 19910927), ('Dominika Cibulkova', 'RUS', 19850627), ('Simona Halep', 'USA', 19950217), ('Svetlana Kuznetsova', 'POL', 19890306), ('Petra Kvitova', 'GER', 19880118), ('Svetlana Kuznetsova', 'USA', 19800617), ('Dominika Cibulkova', 'CZE', 19920321), ('Agnieszka Radwanska', 'UKR', 19940912), ('Madison Keys', 'CZE', 19900308), ('Elina Svitolina', 'GER', 19880118), ('Madison Keys', 'RUS', 19850627), ('Petra Kvitova', 'ESP', 19931008), ('Caroline Wozniacki', 'SRB', 19850228), ('Dominika Cibulkova', 'ESP', 19880903), ('Dominika Cibulkova', 'RUS', 19910703), ('Petra Kvitova', 'SWE', 19880817), ('Svetlana Kuznetsova', 'UKR', 19940912), ('Svetlana Kuznetsova', 'HUN', 19930510), ('Dominika Cibulkova', 'GER', 19880118), ('Angelique Kerber', 'POL', 19890306), ('Dominika Cibulkova', 'RUS', 19850627), ('Angelique Kerber', 'ROU', 19910927), ('Angelique Kerber', 'USA', 19950217), ('Angelique Kerber', 'SVK', 19890506), ('Simona Halep', 'USA', 19950217), ('Dominika Cibulkova', 'ROU', 19910927), ('Madison Keys', 'SVK', 19890506), ('Agnieszka Radwanska', 'CZE', 19920321), ('Agnieszka Radwanska', 'ESP', 19931008), ('Svetlana Kuznetsova', 'POL', 19890306), ('Karolina Pliskova', 'ESP', 19931008), ('Svetlana Kuznetsova', 'CZE', 19920321), ('Garbine Muguruza', 'RUS', 19850627), ('Petra Kvitova', 'UKR', 19940912), ('Petra Kvitova', 'ITA', 19830218), ('Petra Kvitova', 'CZE', 19860328), ('Elina Svitolina', 'RUS', 19860801), ('Elena Vesnina', 'NED', 19911210), ('Alize Cornet', 'SUI', 19900310), ('Karolina Pliskova', 'UKR', 19940912), ('Elina Svitolina', 'GER', 19880118), ('Karolina Pliskova', 'ITA', 19830218), ('Garbine Muguruza', 'RUS', 19850627), ('Anastasia Pavlyuchenkova', 'UKR', 19940912), ('Ekaterina Makarova', 'SVK', 19890506), ('Anastasia Pavlyuchenkova', 'RUS', 19850627), ('Serena Williams', 'CZE', 19860328), ('Venus Williams', 'RUS', 19910703), ('Serena Williams', 'USA', 19800617), ('Dominika Cibulkova', 'RUS', 19860801), ('Karolina Pliskova', 'SVK', 19890506), ('Timea Babos', 'CZE', 19870204), ('Timea Babos', 'GER', 19881102), ('Julia Goerges', 'BEL', 19891020), ('Elina Svitolina', 'DEN', 19900711), ('Elina Svitolina', 'GER', 19880118), ('Lesia Tsurenko', 'FRA', 19930514), ('Kristina Mladenovic', 'USA', 19920511), ('Elena Vesnina', 'RUS', 19850627), ('Svetlana Kuznetsova', 'CZE', 19920321), ('Elena Vesnina', 'FRA', 19930514), ('Karolina Pliskova', 'ESP', 19931008), ('Svetlana Kuznetsova', 'RUS', 19910703), ('Kristina Mladenovic', 'DEN', 19900711), ('Elena Vesnina', 'USA', 19800617), ('Garbine Muguruza', 'UKR', 19940912), ('Anastasia Pavlyuchenkova', 'SVK', 19890506), ('Caroline Wozniacki', 'USA', 19950217), ('Elena Vesnina', 'GER', 19880118)]",False
SPIDER_dev_488,wta_1,"What is the first name, country code, and birth date of the player with the most winner rank points across all matches?","return players ;return winner rank points of #1 ;return #1 where #2 is highest ;return first name of #3 ;return country code of #3 ;return birth date of #3 ;return #4, #5, #6","SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","SELECT players.first_name, players.country_code, players.birth_date FROM matches, players WHERE players.player_id = matches.loser_id AND players.player_id IN ( SELECT players.player_id FROM matches, players WHERE players.player_id = matches.loser_id AND players.player_id IN ( SELECT players.player_id FROM players ) ORDER BY matches.loser_rank_points DESC LIMIT 1 )","[('Serena', 'USA', 19810926)]","[('Serena', 'USA', 19810926), ('Serena', 'USA', 19810926), ('Serena', 'USA', 19810926), ('Serena', 'USA', 19810926), ('Serena', 'USA', 19810926), ('Serena', 'USA', 19810926)]",True
SPIDER_dev_489,wta_1,Find the number of players for each hand type.,return hand types ;return players of #1 ;return number of #2 for each #1,"SELECT count(*) ,  hand FROM players GROUP BY hand","SELECT players.hand, COUNT(players.player_id) FROM players WHERE players.hand IN ( SELECT players.hand FROM players ) GROUP BY players.hand","[(954, ''), (487, 'L'), (5028, 'R'), (14193, 'U')]","[('', 954), ('L', 487), ('R', 5028), ('U', 14193)]",True
SPIDER_dev_49,pets_1,Find the maximum weight for each type of pet. List the maximum weight and pet type.,"return pet types ;return weights of #1 ;return maximum of #2 for each #1 ;return maximum of #3 for each #1 ;return #4, #2","SELECT max(weight) ,  petType FROM pets GROUP BY petType","SELECT pets.pettype, MAX(MAX(pets.weight)), pets.weight FROM pets WHERE pets.pettype IN ( SELECT pets.pettype FROM pets ) GROUP BY pets.pettype","[(12.0, 'cat'), (13.4, 'dog')]",ERROR,False
SPIDER_dev_490,wta_1,How many players are there for each hand type?,return hand types ;return players of #1 ;return number of #2 for each #1,"SELECT count(*) ,  hand FROM players GROUP BY hand","SELECT players.hand, COUNT(players.player_id) FROM players WHERE players.hand IN ( SELECT players.hand FROM players ) GROUP BY players.hand","[(954, ''), (487, 'L'), (5028, 'R'), (14193, 'U')]","[('', 954), ('L', 487), ('R', 5028), ('U', 14193)]",True
SPIDER_dev_491,battle_death,How many ships ended up being 'Captured'?,return ships ;return #1 that ended up being 'captured ;return number of #2,SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured',SELECT COUNT(ship.id) FROM ship WHERE ship.disposition_of_ship = 'Captured',"[(4,)]","[(4,)]",True
SPIDER_dev_492,battle_death,List the name and tonnage ordered by in descending alphaetical order for the names.,return names ;return tonnages of #1 ;return #1 sorted by #2 ;return #3 sorted by #2 ;return #4 sorted by #3 in descending alphaetical order,"SELECT name ,  tonnage FROM ship ORDER BY name DESC","SELECT battle.name FROM ship, battle WHERE battle.id = ship.lost_in_battle ORDER BY battle.name DESC","[('Three Brothers', 't'), ('Mary', 't'), ('Lettice', 't'), ('HMS Avon', '391'), ('HMS Atalanta', '225'), ('Bon Accord', 't'), ('Bacchus', 't')]","[('Siege of Constantinople',), ('Siege of Constantinople',), ('Battle of Rodosto',), ('Battle of Philippopolis',), ('Battle of Messinopolis',), ('Battle of Messinopolis',), ('Battle of Boruy',)]",False
SPIDER_dev_493,battle_death,"List the name, date and result of each battle.","return battles ;return names of #1 ;return dates of #1 ;return results of #1 ;return #2, #3, #4","SELECT name ,  date FROM battle","SELECT battle.name, battle.date FROM battle WHERE battle.id IN ( SELECT battle.id FROM battle )","[('Battle of Adrianople', '14 April 1205'), ('Battle of Serres', 'June 1205'), ('Battle of Rusion', '31 January 1206'), ('Battle of Rodosto', 'February 1206'), ('Battle of Messinopolis', '4 September 1207'), ('Battle of Boruy', 'June 1205'), ('Battle of Philippopolis', '31 June 1208'), ('Siege of Constantinople', '1235')]","[('Battle of Adrianople', '14 April 1205'), ('Battle of Serres', 'June 1205'), ('Battle of Rusion', '31 January 1206'), ('Battle of Rodosto', 'February 1206'), ('Battle of Messinopolis', '4 September 1207'), ('Battle of Boruy', 'June 1205'), ('Battle of Philippopolis', '31 June 1208'), ('Siege of Constantinople', '1235')]",True
SPIDER_dev_494,battle_death,What is maximum and minimum death toll caused each time?,"return death tolls ;return #1 caused each time ;return maximum of #2 ;return minimum of #2 ;return #3, #4","SELECT max(killed) ,  min(killed) FROM death","SELECT MAX(death.killed), MIN(death.killed) FROM death","[(29, 0)]","[(29, 0)]",True
SPIDER_dev_495,battle_death,What is the average number of injuries caused each time?,return injuries ;return number of #1 for each time ;return average #2,SELECT avg(injured) FROM death,SELECT AVG(death.injured) FROM death,"[(1.0769230769230769,)]","[(1.0769230769230769,)]",True
SPIDER_dev_496,battle_death,What are the death and injury situations caused by the ship with tonnage 't'?,"return ships ;return tonnages of #1 ;return #1 where #2 is 't ;return deaths caused by #3 ;return injuries caused by #3 ;return #4, #5","SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'","SELECT death.caused_by_ship_id FROM death, ship WHERE ship.id = death.caused_by_ship_id AND ship.id IN ( SELECT ship.id FROM ship WHERE ship.id IN ( SELECT ship.id FROM ship ) AND ship.tonnage = 't' )","[(8, 0), (3, 0), (25, 0), (2, 0), (0, 0), (4, 5), (0, 0), (29, 0), (0, 0), (0, 0), (14, 0)]","[(1,), (2,), (3,), (3,), (5,), (5,), (6,), (1,), (3,), (2,), (5,)]",False
SPIDER_dev_497,battle_death,What are the name and results of the battles when the bulgarian commander is not 'Boril',"return battles ;return bulgarian commanders of #1 ;return #1 where #2 is not 'boril ;return names of #3 ;return results of #3 ;return #4, #5","SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'","SELECT battle.name, battle.result FROM battle WHERE battle.id IN ( SELECT battle.id FROM battle WHERE battle.id IN ( SELECT battle.id FROM battle ) AND battle.bulgarian_commander != 'Boril' )","[('Battle of Adrianople', 'Bulgarian victory'), ('Battle of Serres', 'Bulgarian victory'), ('Battle of Rusion', 'Bulgarian victory'), ('Battle of Rodosto', 'Bulgarian victory'), ('Battle of Messinopolis', 'Bulgarian victory'), ('Siege of Constantinople', 'Two Year Truce')]","[('Battle of Adrianople', 'Bulgarian victory'), ('Battle of Serres', 'Bulgarian victory'), ('Battle of Rusion', 'Bulgarian victory'), ('Battle of Rodosto', 'Bulgarian victory'), ('Battle of Messinopolis', 'Bulgarian victory'), ('Siege of Constantinople', 'Two Year Truce')]",True
SPIDER_dev_498,battle_death,What are the different ids and names of the battles that lost any 'Brig' type shipes?,"return battles ;return shipes #1 lost ;return #1 where #2 is 'brig type ;return ids of #3 ;return names of #3 ;return #4, #5","SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'","SELECT battle.id, battle.name FROM ship, battle WHERE ship.lost_in_battle = battle.id AND battle.id IN ( SELECT battle.id FROM ship, battle WHERE ship.lost_in_battle = battle.id AND battle.id IN ( SELECT battle.id FROM battle ) AND ship.ship_type = 'Brig' )","[(8, 'Siege of Constantinople'), (7, 'Battle of Philippopolis'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis'), (4, 'Battle of Rodosto')]","[(8, 'Siege of Constantinople'), (7, 'Battle of Philippopolis'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis'), (5, 'Battle of Messinopolis'), (4, 'Battle of Rodosto'), (8, 'Siege of Constantinople')]",True
SPIDER_dev_499,battle_death,What are the ids and names of the battles that led to more than 10 people killed in total.,"return battles ;return people killed in #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 10 ;return ids of #4 ;return names of #4 ;return #5, #6","SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10","SELECT battle.id, battle.name FROM death, ship, battle WHERE battle.id = ship.lost_in_battle AND ship.id = death.caused_by_ship_id AND battle.id IN ( SELECT battle.id FROM death, ship, battle WHERE battle.id = ship.lost_in_battle AND ship.id = death.caused_by_ship_id AND battle.id IN ( SELECT battle.id FROM battle ) GROUP BY battle.id HAVING SUM(death.killed) > 10 )","[(5, 'Battle of Messinopolis'), (6, 'Battle of Boruy'), (8, 'Siege of Constantinople')]","[(8, 'Siege of Constantinople'), (6, 'Battle of Boruy'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis'), (5, 'Battle of Messinopolis'), (5, 'Battle of Messinopolis'), (5, 'Battle of Messinopolis'), (8, 'Siege of Constantinople'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis')]",True
SPIDER_dev_5,concert_singer,"What is the average, minimum, and maximum age for all French singers?","return french singers ;return ages of #1 ;return average of #2 ;return minimum of #2 ;return maximum of #2 ;return #3, #4, #5","SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","SELECT AVG(singer.age), MIN(singer.age), MAX(singer.age) FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer )","[(34.5, 25, 43)]","[(37.0, 25, 52)]",False
SPIDER_dev_50,pets_1,List the maximum weight and type for each type of pet.,"return types of pets ;return weights of #1 ;return maximum #2 for each #1 ;return types of #1 ;return maximum #3 for each #4 ;return #4, #5","SELECT max(weight) ,  petType FROM pets GROUP BY petType","SELECT pets.pettype, MAX(MAX(pets.weight)) FROM pets WHERE pets.pettype IN ( SELECT pets.pettype FROM pets ) GROUP BY pets.pettype","[(12.0, 'cat'), (13.4, 'dog')]",ERROR,False
SPIDER_dev_500,battle_death,What is the ship id and name that caused most total injuries?,"return ships ;return injuries of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return ship id of #4 ;return name of #4 ;return #5, #6","SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1","SELECT ship.id, ship.name FROM ship WHERE ship.name IN ( SELECT ship.name FROM ship WHERE ship.name IN ( SELECT ship.name FROM ship ) GROUP BY ship.name ORDER BY COUNT(ship.id) DESC LIMIT 1 )","[(5, 'Three Brothers')]","[(5, 'Three Brothers')]",True
SPIDER_dev_501,battle_death,What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?,return bulgarian commander 'kaloyan ;return latin commander 'baldwin i ;return battles between #1 and #2 ;return distinct battle names of #3,SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I',ERROR,"[('Battle of Adrianople',)]",ERROR,False
SPIDER_dev_502,battle_death,How many different results are there for the battles?,return battles ;return results of #1 ;return different #2 ;return number of #3,SELECT count(DISTINCT RESULT) FROM battle,SELECT COUNT(DISTINCT battle.result) FROM battle WHERE battle.id IN ( SELECT battle.id FROM battle ),"[(3,)]","[(3,)]",True
SPIDER_dev_503,battle_death,How many battles did not lose any ship with tonnage '225'?,return battles ;return ships lost in #1 ;return tonnages of #2 ;return #1 where #3 is '225 ;return #1 besides #4 ;return number of #5,SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );,"SELECT COUNT(battle.id) FROM battle WHERE battle.id NOT IN ( SELECT battle.id FROM ship, battle WHERE ship.lost_in_battle = battle.id AND ship.lost_in_battle IN ( SELECT ship.lost_in_battle FROM ship, battle WHERE battle.id = ship.lost_in_battle AND battle.id IN ( SELECT battle.id FROM battle ) ) AND ship.tonnage = 225 )","[(7,)]","[(7,)]",True
SPIDER_dev_504,battle_death,List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta',"return battles ;return ships lost in #1 ;return #2 where #1 is 'lettice ;return #2 where #1 is 'hms atalanta ;return #1 of both #3 and #4 ;return name of #5 ;return date of #5 ;return #6, #7","SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'","SELECT battle.name, battle.date FROM ship, battle WHERE battle.id = ship.lost_in_battle AND battle.id IN ( SELECT DISTINCT battle.id FROM ship, battle WHERE battle.id = ship.lost_in_battle AND battle.id IN ( SELECT battle.id FROM battle ) AND ship.name = 'Lettice' AND battle.id IN ( SELECT battle.id FROM ship, battle WHERE battle.id = ship.lost_in_battle AND battle.id IN ( SELECT battle.id FROM battle ) AND ship.name = 'HMS Atalanta' ) )","[('Siege of Constantinople', '1235')]","[('Siege of Constantinople', '1235'), ('Siege of Constantinople', '1235')]",True
SPIDER_dev_505,battle_death,"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.","return battles ;return ships of #1 ;return #2 lost in the 'english channel ;return number of #3 for each #1 ;return #1 where #4 is zero ;return names of #5 ;return results of #5 ;return bulgarian commanders of #5 ;return #6, #7, #8","SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'","SELECT battle.name, battle.result, battle.bulgarian_commander FROM ship, battle WHERE battle.id = ship.lost_in_battle AND battle.id IN ( SELECT battle.id FROM ship, battle WHERE battle.id = ship.lost_in_battle AND battle.id IN ( SELECT battle.id FROM battle ) AND ship.location = 'English Channel' GROUP BY battle.id HAVING COUNT(ship.id) = 0 )","[('Battle of Adrianople', 'Bulgarian victory', 'Kaloyan'), ('Battle of Rusion', 'Bulgarian victory', 'Kaloyan'), ('Battle of Serres', 'Bulgarian victory', 'Kaloyan')]",[],False
SPIDER_dev_506,battle_death,What are the notes of the death events which has substring 'East'?,return death events ;return #1 with substring 'east ;return notes of #2,SELECT note FROM death WHERE note LIKE '%East%',SELECT death.note FROM death WHERE death.id IN ( SELECT death.id FROM death WHERE death.note LIKE '%East%' ),"[('East Champaran, Bihar',)]","[('East Champaran, Bihar',)]",True
SPIDER_dev_507,student_transcripts_tracking,what are all the addresses including line 1 and line 2?,return addresses ;return #1 including line 1 ;return #1 including line 2 ;return #1 in both #2 and #3,"SELECT line_1 ,  line_2 FROM addresses",SELECT DISTINCT addresses.address_id FROM addresses,"[('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]","[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,)]",False
SPIDER_dev_508,student_transcripts_tracking,What is the first and second line for all addresses?,"return addresses ;return first line of #1 ;return second line of #1 ;return #2, #3","SELECT line_1 ,  line_2 FROM addresses",SELECT addresses.line_3 FROM addresses WHERE addresses.address_id IN ( SELECT addresses.address_id FROM addresses ),"[('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]","[(None,), (None,), (None,), (None,), (None,), (None,), (None,), (None,), (None,), (None,), (None,), (None,), (None,), (None,), (None,)]",False
SPIDER_dev_509,student_transcripts_tracking,How many courses in total are listed?,return courses ;return number of #1,SELECT count(*) FROM Courses,SELECT COUNT(courses.course_id) FROM courses,"[(15,)]","[(15,)]",True
SPIDER_dev_51,pets_1,Find number of pets owned by students who are older than 20.,return students ;return #1 who are older than 20 ;return pets owned by #2 ;return number of #3,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,"SELECT COUNT(pets.petid) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student WHERE student.age > 20 )","[(0,)]","[(0,)]",True
SPIDER_dev_510,student_transcripts_tracking,How many courses are there?,return courses ;return number of #1,SELECT count(*) FROM Courses,SELECT COUNT(courses.course_id) FROM courses,"[(15,)]","[(15,)]",True
SPIDER_dev_511,student_transcripts_tracking,How is the math course described?,return courses ;return #1 that are math ;return how is #2 described,SELECT course_description FROM Courses WHERE course_name  =  'math',SELECT courses.course_description FROM courses WHERE courses.course_id IN ( SELECT courses.course_id FROM courses WHERE courses.course_name = 'math' ),"[('q',)]","[('q',)]",True
SPIDER_dev_512,student_transcripts_tracking,What are the descriptions for all the math courses?,return courses ;return #1 in math ;return descriptions of #2,SELECT course_description FROM Courses WHERE course_name  =  'math',SELECT courses.course_description FROM courses WHERE courses.course_id IN ( SELECT courses.course_id FROM courses WHERE courses.course_name = 'math' ),"[('q',)]","[('q',)]",True
SPIDER_dev_513,student_transcripts_tracking,What is the zip code of the address in the city Port Chelsea?,return addresses ;return cities of #1 ;return #1 where #2 is port chelsea ;return zip code of #3,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',SELECT addresses.zip_postcode FROM addresses WHERE addresses.address_id IN ( SELECT addresses.address_id FROM addresses WHERE addresses.address_id IN ( SELECT addresses.address_id FROM addresses ) AND addresses.city = 'Port Chelsea' ),"[('148',)]","[('148',)]",True
SPIDER_dev_514,student_transcripts_tracking,What is the zip code for Port Chelsea?,return port chelsea ;return zip code of #1,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',SELECT addresses.zip_postcode FROM addresses WHERE addresses.city IN ( SELECT addresses.city FROM addresses WHERE addresses.city = 'Port Chelsea' ),"[('148',)]","[('148',)]",True
SPIDER_dev_515,student_transcripts_tracking,Which department offers the most number of degrees? List department name and id.,"return departments ;return degrees #1 offer ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4 ;return id of #4 ;return #5, #6","SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1","SELECT departments.department_name, departments.department_id FROM departments, degree_programs WHERE departments.department_id = degree_programs.department_id AND departments.department_id IN ( SELECT departments.department_id FROM departments, degree_programs WHERE departments.department_id = degree_programs.department_id AND departments.department_id IN ( SELECT departments.department_id FROM departments ) GROUP BY departments.department_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1 )","[('statistics', 8)]","[('statistics', 8), ('statistics', 8), ('statistics', 8)]",True
SPIDER_dev_516,student_transcripts_tracking,"For each department id, what is the name of the department with the most number of degrees?",return departments ;return department ids of #1 ;return degrees of #2 ;return number of #3 for each #2 ;return #2 where #4 is highest ;return name of #5,"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1","SELECT departments.department_id FROM departments, degree_programs WHERE departments.department_id = degree_programs.department_id AND departments.department_id IN ( SELECT departments.department_id FROM departments, degree_programs WHERE departments.department_id = degree_programs.department_id AND departments.department_id IN ( SELECT departments.department_id FROM departments WHERE departments.department_id IN ( SELECT departments.department_id FROM departments ) ) AND departments.department_id IN ( SELECT departments.department_id FROM departments ) GROUP BY departments.department_id ORDER BY COUNT(degree_programs.department_id) DESC LIMIT 1 )","[('statistics', 8)]","[(8,), (8,), (8,)]",False
SPIDER_dev_517,student_transcripts_tracking,How many departments offer any degree?,return departments ;return #1 that offer any degree ;return number of #2,SELECT count(DISTINCT department_id) FROM Degree_Programs,"SELECT COUNT(DISTINCT departments.department_id) FROM departments, degree_programs WHERE departments.department_id = degree_programs.department_id","[(10,)]","[(10,)]",True
SPIDER_dev_518,student_transcripts_tracking,How many different departments offer degrees?,return departments ;return #1 that offer degrees ;return different #2 ;return number of #3,SELECT count(DISTINCT department_id) FROM Degree_Programs,"SELECT COUNT(DISTINCT departments.department_id) FROM departments, degree_programs WHERE departments.department_id = degree_programs.department_id","[(10,)]","[(10,)]",True
SPIDER_dev_519,student_transcripts_tracking,How many different degree names are offered?,return degrees offered ;return different names of #1 ;return number of #2,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,SELECT COUNT(DISTINCT degree_programs.degree_summary_name) FROM degree_programs WHERE degree_programs.degree_program_id IN ( SELECT degree_programs.degree_program_id FROM degree_programs ),"[(3,)]","[(3,)]",True
SPIDER_dev_52,pets_1,How many pets are owned by students that have an age greater than 20?,return students ;return ages of #1 ;return #1 where #2 is higher than 20 ;return pets owned by #3 ;return number of #4,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,"SELECT COUNT(pets.petid) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student WHERE student.stuid IN ( SELECT student.stuid FROM student ) AND student.age > 20 )","[(0,)]","[(0,)]",True
SPIDER_dev_520,student_transcripts_tracking,How many different degrees are offered?,return degrees offered ;return different #1 ;return number of #2,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,SELECT COUNT(DISTINCT degree_programs.degree_summary_name) FROM degree_programs,"[(3,)]","[(3,)]",True
SPIDER_dev_521,student_transcripts_tracking,How many degrees does the engineering department offer?,return departments ;return degrees of #1 ;return #2 where #1 is engineering ;return number of #3,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',"SELECT COUNT(degree_programs.department_id) FROM departments, degree_programs WHERE departments.department_id = degree_programs.department_id AND departments.department_id IN ( SELECT departments.department_id FROM departments ) AND departments.department_name = 'engineer'","[(0,)]","[(0,)]",True
SPIDER_dev_522,student_transcripts_tracking,How many degrees does the engineering department have?,return departments ;return degrees of #1 ;return #2 where #1 is engineering ;return number of #3,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',"SELECT COUNT(degree_programs.department_id) FROM departments, degree_programs WHERE departments.department_id = degree_programs.department_id AND departments.department_id IN ( SELECT departments.department_id FROM departments ) AND departments.department_name = 'engineer'","[(0,)]","[(0,)]",True
SPIDER_dev_523,student_transcripts_tracking,What are the names and descriptions of all the sections?,"return sections ;return names of #1 ;return descriptions of #1 ;return #2, #3","SELECT section_name ,  section_description FROM Sections","SELECT sections.section_name, sections.section_description FROM sections WHERE sections.section_id IN ( SELECT sections.section_id FROM sections )","[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]","[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]",True
SPIDER_dev_524,student_transcripts_tracking,What are the names and descriptions for all the sections?,"return sections ;return names of #1 ;return descriptions of #1 ;return #2, #3","SELECT section_name ,  section_description FROM Sections","SELECT sections.section_name, sections.section_description FROM sections WHERE sections.section_id IN ( SELECT sections.section_id FROM sections )","[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]","[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]",True
SPIDER_dev_525,student_transcripts_tracking,What are the names and id of courses having at most 2 sections?,"return courses ;return sections of #1 ;return number of #2 for each #1 ;return #1 where #3 is at most 2 ;return names of #4 ;return ids of #4 ;return #5, #6","SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","SELECT courses.course_name, courses.course_id FROM courses, sections WHERE courses.course_id = sections.course_id AND courses.course_id IN ( SELECT courses.course_id FROM courses, sections WHERE courses.course_id = sections.course_id AND courses.course_id IN ( SELECT courses.course_id FROM courses ) GROUP BY courses.course_id HAVING COUNT(sections.section_id) <= 2 )","[('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]","[('dl', 9), ('math', 2), ('nlp', 8), ('ds', 1), ('fr', 5), ('cal', 7), ('db', 12), ('pl', 14), ('nlp', 8), ('pl', 14), ('ds', 1), ('en', 4), ('fr', 5), ('la', 6), ('ml', 10)]",True
SPIDER_dev_526,student_transcripts_tracking,What are the names and ids of every course with less than 2 sections?,"return courses ;return sections of #1 ;return number of #2 for each #1 ;return #1 where #3 is lower than 2 ;return names of #4 ;return ids of #4 ;return #5, #6","SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","SELECT courses.course_name, courses.course_id FROM courses, sections WHERE courses.course_id = sections.course_id AND courses.course_id IN ( SELECT courses.course_id FROM courses, sections WHERE courses.course_id = sections.course_id AND courses.course_id IN ( SELECT courses.course_id FROM courses ) GROUP BY courses.course_id HAVING COUNT(sections.other_details) < 2 )","[('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]","[('dl', 9), ('math', 2), ('nlp', 8), ('ds', 1), ('fr', 5), ('cal', 7), ('db', 12), ('pl', 14), ('nlp', 8), ('pl', 14), ('ds', 1), ('en', 4), ('fr', 5), ('la', 6), ('ml', 10)]",True
SPIDER_dev_527,student_transcripts_tracking,List the section_name in reversed lexicographical order.,return section_names ;return #1 sorted by reversed lexicographical order,SELECT section_name FROM Sections ORDER BY section_name DESC,SELECT sections.section_name FROM sections ORDER BY sections.section_name ASC,"[('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]","[('a',), ('b',), ('c',), ('d',), ('e',), ('f',), ('g',), ('h',), ('j',), ('k',), ('l',), ('o',), ('p',), ('u',), ('y',)]",True
SPIDER_dev_528,student_transcripts_tracking,What are the names of the sections in reverse alphabetical order?,return sections ;return names of #1 ;return #2 sorted by reverse alphabetical order,SELECT section_name FROM Sections ORDER BY section_name DESC,SELECT sections.section_name FROM sections WHERE sections.section_id IN ( SELECT sections.section_id FROM sections ) ORDER BY sections.section_name ASC,"[('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]","[('a',), ('b',), ('c',), ('d',), ('e',), ('f',), ('g',), ('h',), ('j',), ('k',), ('l',), ('o',), ('p',), ('u',), ('y',)]",True
SPIDER_dev_529,student_transcripts_tracking,What is the semester which most student registered in? Show both the name and the id.,"return semesters ;return students registered in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4 ;return id of #4 ;return #5, #6","SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","SELECT semesters.semester_name, semesters.semester_id FROM students, student_enrolment, semesters WHERE semesters.semester_id = student_enrolment.semester_id AND student_enrolment.student_id = students.student_id AND semesters.semester_id IN ( SELECT semesters.semester_id FROM students, student_enrolment, semesters WHERE semesters.semester_id = student_enrolment.semester_id AND student_enrolment.student_id = students.student_id AND semesters.semester_id IN ( SELECT semesters.semester_id FROM semesters ) GROUP BY semesters.semester_id ORDER BY COUNT(students.date_first_registered) DESC LIMIT 1 )","[('summer 2010', 2)]","[('summer 2010', 2), ('summer 2010', 2), ('summer 2010', 2), ('summer 2010', 2)]",True
SPIDER_dev_53,pets_1,Find the number of dog pets that are raised by female students (with sex F).,return students ;return sex of #1 ;return #1 where #2 is f ;return dog pets raised by #3 ;return number of #4,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',"SELECT COUNT(DISTINCT pets.pettype) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student WHERE student.stuid IN ( SELECT student.stuid FROM student ) AND student.sex = 'F' )","[(2,)]","[(2,)]",True
SPIDER_dev_530,student_transcripts_tracking,"For each semester, what is the name and id of the one with the most students registered?","return semesters ;return students registered in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest for each #1 ;return name of #4 ;return id of #4 ;return #5, #6","SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",SELECT MAX(semesters.semester_id) FROM semesters GROUP BY semesters.semester_id,"[('summer 2010', 2)]","[(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,)]",False
SPIDER_dev_531,student_transcripts_tracking,What is the description of the department whose name has the substring the computer?,return departments ;return names of #1 ;return #1 where #2 has substring computer ;return description of #3,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',SELECT departments.department_description FROM departments WHERE departments.department_id IN ( SELECT departments.department_id FROM departments WHERE departments.department_id IN ( SELECT departments.department_id FROM departments ) AND departments.department_name LIKE '%computer%' ),"[('error',)]","[('error',)]",True
SPIDER_dev_532,student_transcripts_tracking,What is the department description for the one whose name has the word computer?,return departments ;return names of #1 ;return #1 where #2 has the word computer ;return department description of #3,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',SELECT departments.department_description FROM departments WHERE departments.department_id IN ( SELECT departments.department_id FROM departments WHERE departments.department_id IN ( SELECT departments.department_id FROM departments ) AND departments.department_name LIKE '%computer%' ),"[('error',)]","[('error',)]",True
SPIDER_dev_533,student_transcripts_tracking,"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.","return who are enrolled in 2 degree programs ;return #1 in one semester ;return first name of #2 ;return middle name of #2 ;return last name of #2 ;return id of #2 ;return #3, #4, #5, #6","SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","SELECT students.first_name, students.middle_name, degree_programs.degree_summary_name, degree_programs.degree_program_id FROM degree_programs, student_enrolment, students, semesters WHERE degree_programs.other_details = student_enrolment.other_details AND student_enrolment.student_id = students.student_id AND degree_programs.other_details = semesters.other_details AND degree_programs.other_details IN ( SELECT degree_programs.other_details FROM degree_programs, semesters WHERE degree_programs.other_details = semesters.other_details )","[('Jarvis', 'Aaliyah', 'Carroll', 4), ('Reva', 'Golda', 'Osinski', 9), ('Jordy', 'Osborne', 'Rempel', 14)]",[],False
SPIDER_dev_534,student_transcripts_tracking,"What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?","return students ;return semesters of #1 ;return number of #2 for each #1 ;return #1 where #3 is 2 ;return #1 where #3 is equal to one ;return #1 in both #4 and #5 ;return first names of #6 ;return middle names of #6 ;return last names of #6 ;return ids of #6 ;return #7, #8, #9, #10","SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","SELECT students.first_name, students.middle_name, students.last_name, students.student_id FROM students, student_enrolment, semesters WHERE students.student_id = student_enrolment.student_id AND student_enrolment.semester_id = semesters.semester_id AND students.student_id IN ( SELECT DISTINCT students.student_id FROM students, student_enrolment, semesters WHERE students.student_id = student_enrolment.student_id AND student_enrolment.semester_id = semesters.semester_id AND students.student_id IN ( SELECT students.student_id FROM students ) GROUP BY students.student_id HAVING COUNT(semesters.semester_id) = 2 AND COUNT(semesters.semester_id) = 1 )","[('Jarvis', 'Aaliyah', 'Carroll', 4), ('Reva', 'Golda', 'Osinski', 9), ('Jordy', 'Osborne', 'Rempel', 14)]",[],False
SPIDER_dev_535,student_transcripts_tracking,"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.","return who is enrolled in a bachelor degree program ;return first name of #1 ;return middle name of #1 ;return last name of #1 ;return #2, #3, #4","SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","SELECT degree_programs.degree_summary_name, students.middle_name FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_summary_name IN ( SELECT degree_programs.degree_summary_name FROM degree_programs WHERE degree_programs.degree_summary_name = 'Bachelor' )","[('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]","[('Bachelor', 'Golda'), ('Bachelor', 'Aisha'), ('Bachelor', 'Golda'), ('Bachelor', 'Aaliyah'), ('Bachelor', 'Aisha'), ('Bachelor', 'Aaliyah'), ('Bachelor', 'Vaughn'), ('Bachelor', 'Mona')]",False
SPIDER_dev_536,student_transcripts_tracking,"What are the first, middle, and last names for everybody enrolled in a Bachelors program?","return everybody enrolled in a bachelors program ;return first names of #1 ;return middle names of #1 ;return last names of #1 ;return #2, #3, #4","SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","SELECT degree_programs.degree_summary_name, students.middle_name FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_summary_name IN ( SELECT degree_programs.degree_summary_name FROM degree_programs WHERE degree_programs.degree_summary_name = 'Bachelor' )","[('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]","[('Bachelor', 'Golda'), ('Bachelor', 'Aisha'), ('Bachelor', 'Golda'), ('Bachelor', 'Aaliyah'), ('Bachelor', 'Aisha'), ('Bachelor', 'Aaliyah'), ('Bachelor', 'Vaughn'), ('Bachelor', 'Mona')]",False
SPIDER_dev_537,student_transcripts_tracking,Find the kind of program which most number of students are enrolled in?,return programs ;return students enrolled in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return kind of #4,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,"SELECT degree_programs.degree_summary_name FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_program_id IN ( SELECT degree_programs.degree_program_id FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_program_id IN ( SELECT degree_programs.degree_program_id FROM degree_programs ) GROUP BY degree_programs.degree_program_id ORDER BY COUNT(students.student_id) DESC LIMIT 1 )","[('Bachelor',)]","[('Bachelor',), ('Bachelor',), ('Bachelor',)]",True
SPIDER_dev_538,student_transcripts_tracking,What is the degree summary name that has the most number of students enrolled?,return degree summary ;return students enrolled in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,"SELECT degree_programs.degree_summary_name FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_summary_description IN ( SELECT degree_programs.degree_summary_description FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_summary_description IN ( SELECT degree_programs.degree_summary_description FROM degree_programs ) GROUP BY degree_programs.degree_summary_description ORDER BY COUNT(students.student_id) DESC LIMIT 1 )","[('Bachelor',)]","[('Bachelor',), ('Bachelor',), ('Bachelor',)]",True
SPIDER_dev_539,student_transcripts_tracking,Find the program which most number of students are enrolled in. List both the id and the summary.,"return programs ;return students enrolled in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return id of #4 ;return summary of #4 ;return #5, #6","SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_program_id IN ( SELECT degree_programs.degree_program_id FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_program_id IN ( SELECT degree_programs.degree_program_id FROM degree_programs ) GROUP BY degree_programs.degree_program_id ORDER BY COUNT(students.student_id) DESC LIMIT 1 )","[(9, 'Bachelor')]","[(9, 'Bachelor'), (9, 'Bachelor'), (9, 'Bachelor')]",True
SPIDER_dev_54,pets_1,How many dog pets are raised by female students?,return students ;return #1 that are female ;return dog pets raised by #2 ;return number of #3,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',"SELECT COUNT(DISTINCT pets.pettype) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student WHERE student.sex = 'F' )","[(2,)]","[(2,)]",True
SPIDER_dev_540,student_transcripts_tracking,What is the program id and the summary of the degree that has the most students enrolled?,"return degrees ;return students enrolled in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return program id of #4 ;return summary of #4 ;return #5, #6","SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_program_id IN ( SELECT degree_programs.degree_program_id FROM degree_programs, student_enrolment, students WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.student_id = students.student_id AND degree_programs.degree_program_id IN ( SELECT degree_programs.degree_program_id FROM degree_programs ) GROUP BY degree_programs.degree_program_id ORDER BY COUNT(students.student_id) DESC LIMIT 1 )","[(9, 'Bachelor')]","[(9, 'Bachelor'), (9, 'Bachelor'), (9, 'Bachelor')]",True
SPIDER_dev_541,student_transcripts_tracking,"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.","return students ;return times #1 enrolled in any program ;return number of #2 for each #1 ;return #1 where #3 is highest ;return id of #4 ;return first name of #4 ;return middle name of #4 ;return last name of #4 ;return enrollments of #4 ;return number of #7 ;return student id of #8 ;return #5, #6, #9, #10, #11","SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","SELECT students.student_id, students.first_name, student_enrolment.student_enrolment_id, COUNT(students.middle_name) FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.other_details = degree_programs.other_details AND students.student_id IN ( SELECT students.student_id FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.other_details = degree_programs.other_details AND students.student_id IN ( SELECT students.student_id FROM students ) GROUP BY students.student_id ORDER BY COUNT(degree_programs.other_details) DESC LIMIT 1 ) AND students.last_name IN ( SELECT students.last_name FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.other_details = degree_programs.other_details AND students.student_id IN ( SELECT students.student_id FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.other_details = degree_programs.other_details AND students.student_id IN ( SELECT students.student_id FROM students ) GROUP BY students.student_id ORDER BY COUNT(degree_programs.other_details) DESC LIMIT 1 ) )","[(7, 'Frida', 'Aisha', 'Huel', 3, 7)]","[(None, None, None, 0)]",False
SPIDER_dev_542,student_transcripts_tracking,"What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?","return students ;return programs #1 enrolled in ;return number of #2 for each #1 ;return #1 where #3 is highest ;return first name of #4 ;return middle name of #4 ;return last name of #4 ;return id of #4 ;return enrollments of #4 ;return number of #7 for each #4 ;return #5, #6, #8, #9","SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","SELECT students.first_name, students.middle_name, students.student_id, student_enrolment.student_enrolment_id FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id AND students.student_id IN ( SELECT students.student_id FROM students, student_enrolment, degree_programs WHERE students.student_id = student_enrolment.student_id AND student_enrolment.degree_program_id = degree_programs.degree_program_id AND students.student_id IN ( SELECT students.student_id FROM students ) GROUP BY students.student_id ORDER BY COUNT(degree_programs.degree_program_id) DESC LIMIT 1 )","[(7, 'Frida', 'Aisha', 'Huel', 3, 7)]","[('Stanford', 'Mona', 6, 13), ('Stanford', 'Mona', 6, 14), ('Stanford', 'Mona', 6, 15)]",False
SPIDER_dev_543,student_transcripts_tracking,Which semesters do not have any student enrolled? List the semester name.,return semesters ;return students enrolled in #1 ;return number of #2 for each #1 ;return #1 where #3 is zero ;return names of #4,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),"SELECT semesters.semester_name FROM students, student_enrolment, semesters WHERE semesters.semester_id = student_enrolment.semester_id AND student_enrolment.student_id = students.student_id AND semesters.semester_id IN ( SELECT semesters.semester_id FROM students, student_enrolment, semesters WHERE semesters.semester_id = student_enrolment.semester_id AND student_enrolment.student_id = students.student_id AND semesters.semester_id IN ( SELECT semesters.semester_id FROM semesters ) GROUP BY semesters.semester_id HAVING COUNT(students.student_id) = 0 )","[('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]",[],False
SPIDER_dev_544,student_transcripts_tracking,What is the name of the semester with no students enrolled?,return semesters ;return students enrolled in #1 ;return number of #2 for each #1 ;return #1 where #3 is zero ;return name of #4,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),"SELECT semesters.semester_name FROM students, student_enrolment, semesters WHERE semesters.semester_id = student_enrolment.semester_id AND student_enrolment.student_id = students.student_id AND semesters.semester_id IN ( SELECT semesters.semester_id FROM students, student_enrolment, semesters WHERE semesters.semester_id = student_enrolment.semester_id AND student_enrolment.student_id = students.student_id AND semesters.semester_id IN ( SELECT semesters.semester_id FROM semesters ) GROUP BY semesters.semester_id HAVING COUNT(students.student_id) = 0 )","[('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]",[],False
SPIDER_dev_545,student_transcripts_tracking,What are all the course names of the courses which ever have students enrolled in?,return courses ;return #1 which have students enrolled in ;return course names of #2,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,"SELECT courses.course_name FROM student_enrolment, student_enrolment_courses, courses, students WHERE student_enrolment_courses.course_id = courses.course_id AND student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id AND student_enrolment.student_id = students.student_id AND student_enrolment_courses.student_course_id IN ( SELECT student_enrolment_courses.student_course_id FROM student_enrolment, student_enrolment_courses, students WHERE student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id AND student_enrolment.student_id = students.student_id )","[('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]","[('la',), ('la',), ('pl',), ('ai',), ('math',), ('ml',), ('math',), ('pl',), ('os',), ('en',), ('ml',), ('nlp',), ('rs',), ('rs',), ('db',)]",True
SPIDER_dev_546,student_transcripts_tracking,What are the names of all courses that have some students enrolled?,return courses ;return students enrolled in #1 ;return number of #2 for each #1 ;return #1 where #3 is at least one ;return names of #4,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,"SELECT courses.course_name FROM student_enrolment_courses, courses WHERE courses.course_id = student_enrolment_courses.course_id AND courses.course_id IN ( SELECT courses.course_id FROM student_enrolment_courses, courses WHERE courses.course_id = student_enrolment_courses.course_id AND courses.course_id IN ( SELECT courses.course_id FROM courses ) GROUP BY courses.course_id HAVING COUNT(student_enrolment_courses.student_course_id) >= 1 )","[('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]","[('la',), ('la',), ('pl',), ('ai',), ('math',), ('ml',), ('math',), ('pl',), ('os',), ('en',), ('ml',), ('nlp',), ('rs',), ('rs',), ('db',)]",True
SPIDER_dev_547,student_transcripts_tracking,What's the name of the course with most number of enrollments?,return courses ;return enrollments of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"SELECT courses.course_name FROM student_enrolment_courses, courses WHERE courses.course_id = student_enrolment_courses.course_id AND courses.course_name IN ( SELECT courses.course_name FROM student_enrolment_courses, courses WHERE courses.course_id = student_enrolment_courses.course_id AND courses.course_name IN ( SELECT courses.course_name FROM courses ) GROUP BY courses.course_name ORDER BY COUNT(student_enrolment_courses.student_course_id) DESC LIMIT 1 )","[('rs',)]","[('rs',), ('rs',)]",True
SPIDER_dev_548,student_transcripts_tracking,What is the name of the course with the most students enrolled?,return courses ;return students enrolled in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"SELECT courses.course_name FROM student_enrolment_courses, courses WHERE courses.course_id = student_enrolment_courses.course_id AND courses.course_id IN ( SELECT courses.course_id FROM student_enrolment_courses, courses WHERE courses.course_id = student_enrolment_courses.course_id AND courses.course_id IN ( SELECT courses.course_id FROM courses ) GROUP BY courses.course_id ORDER BY SUM(student_enrolment_courses.student_course_id) DESC LIMIT 1 )","[('rs',)]","[('rs',), ('rs',)]",True
SPIDER_dev_549,student_transcripts_tracking,Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.,return students ;return #1 who currently live in north carolina ;return #2 who have not registered in any degree program ;return last names of #3,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,"SELECT students.last_name FROM student_enrolment, degree_programs, addresses, students WHERE students.student_id = student_enrolment.student_id AND student_enrolment.other_details = degree_programs.other_details AND students.permanent_address_id = addresses.address_id AND students.student_id IN ( SELECT students.student_id FROM student_enrolment, degree_programs, addresses, students WHERE students.student_id = student_enrolment.student_id AND student_enrolment.other_details = degree_programs.other_details AND students.permanent_address_id = addresses.address_id AND addresses.state_province_county = 'NorthCarolina' )","[('Gleichner',), ('Weimann',)]",[],False
SPIDER_dev_55,pets_1,Find the number of distinct type of pets.,return pets ;return type of #1 ;return distinct #2 ;return number of #3,SELECT count(DISTINCT pettype) FROM pets,SELECT COUNT(DISTINCT pets.pettype) FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets ),"[(2,)]","[(2,)]",True
SPIDER_dev_550,student_transcripts_tracking,What are the last name of the students who live in North Carolina but have not registered in any degree programs?,return students ;return #1 who live in north carolina ;return #2 who have registered in any degree programs ;return #2 besides #3 ;return last names of #4,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,"SELECT students.last_name FROM addresses, students WHERE students.permanent_address_id = addresses.address_id AND students.student_id IN ( SELECT students.student_id FROM addresses, students WHERE students.permanent_address_id = addresses.address_id AND addresses.state_province_county = 'NorthCarolina' AND students.student_id NOT IN ( SELECT students.student_id FROM student_enrolment, degree_programs, addresses, students WHERE students.student_id = student_enrolment.student_id AND student_enrolment.other_details = degree_programs.other_details AND students.permanent_address_id = addresses.address_id AND addresses.state_province_county = 'NorthCarolina' ) )","[('Gleichner',), ('Weimann',)]","[('Christiansen',), ('Kemmer',), ('Jaskolski',)]",False
SPIDER_dev_551,student_transcripts_tracking,Show the date and id of the transcript with at least 2 course results.,"return transcripts ;return course results of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 2 ;return date of #4 ;return id of #4 ;return #5, #6","SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2","SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts, transcript_contents WHERE transcripts.transcript_id = transcript_contents.transcript_id AND transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts, transcript_contents WHERE transcripts.transcript_id = transcript_contents.transcript_id AND transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts ) GROUP BY transcripts.transcript_id HAVING COUNT(transcript_contents.student_course_id) >= 2 )","[('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]","[('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15), ('1998-11-22 12:18:29', 15), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('2013-06-30 13:01:40', 5), ('2013-06-30 13:01:40', 5), ('1975-05-06 12:04:47', 8), ('2010-12-13 10:55:15', 6)]",True
SPIDER_dev_552,student_transcripts_tracking,What is the date and id of the transcript with at least 2 courses listed?,"return transcripts ;return courses listed on #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 2 ;return date of #4 ;return id of #4 ;return #5, #6","SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2","SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts, transcript_contents WHERE transcripts.transcript_id = transcript_contents.transcript_id AND transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts, transcript_contents WHERE transcripts.transcript_id = transcript_contents.transcript_id AND transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts ) GROUP BY transcripts.transcript_id HAVING COUNT(transcript_contents.student_course_id) >= 2 )","[('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]","[('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15), ('1998-11-22 12:18:29', 15), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('2013-06-30 13:01:40', 5), ('2013-06-30 13:01:40', 5), ('1975-05-06 12:04:47', 8), ('2010-12-13 10:55:15', 6)]",True
SPIDER_dev_553,student_transcripts_tracking,What is the phone number of the man with the first name Timmothy and the last name Ward?,return men ;return first names of #1 ;return #1 where #2 is timmothy ;return last names of #1 ;return #1 where #4 is ward ;return #1 of both #3 and #5 ;return phone number of #6,SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward',"SELECT DISTINCT students.cell_mobile_number FROM students, student_enrolment, student_enrolment_courses WHERE students.student_id = student_enrolment.student_id AND student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id AND student_enrolment_courses.student_enrolment_id IN ( SELECT DISTINCT student_enrolment_courses.student_enrolment_id FROM students, student_enrolment, student_enrolment_courses WHERE students.student_id = student_enrolment.student_id AND student_enrolment.student_enrolment_id = student_enrolment_courses.student_enrolment_id AND student_enrolment_courses.student_enrolment_id IN ( SELECT student_enrolment_courses.student_enrolment_id FROM student_enrolment_courses ) AND students.first_name = 'Timmothy' AND students.last_name = 'Ward' )","[('(096)889-8954x524',)]","[('(096)889-8954x524',)]",True
SPIDER_dev_554,student_transcripts_tracking,What is the mobile phone number of the student named Timothy Ward?,return students ;return #1 named timothy ward ;return mobile phone number of #2,select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward',SELECT students.cell_mobile_number FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students WHERE students.last_name = 'ward' ),[],[],True
SPIDER_dev_555,student_transcripts_tracking,"Who is the first student to register? List the first name, middle name and last name.","return students ;return the first #1 to register ;return the first #2 ;return the middle name of #3 ;return the last name of #3 ;return #4, #5, #6","SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",ERROR,"[('Timmothy', 'Anna', 'Ward')]",ERROR,False
SPIDER_dev_556,student_transcripts_tracking,"What is the first, middle, and last name of the first student to register?","return students ;return #1 that register ;return the first #2 ;return the first middle name of #3 ;return the first last name of #3 ;return #4, #5, #6","SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",ERROR,"[('Timmothy', 'Anna', 'Ward')]",ERROR,False
SPIDER_dev_557,student_transcripts_tracking,"Who is the earliest graduate of the school? List the first name, middle name and last name.","return graduates of the school ;return when was #1 ;return #1 where #2 is the lowest ;return first name of #3 ;return middle name of #3 ;return last name of #3 ;return #4, #5, #6","SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","SELECT students.first_name, students.middle_name, students.last_name FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students ) ORDER BY students.student_id ASC LIMIT 1 )","[('Timmothy', 'Anna', 'Ward')]","[('Timmothy', 'Anna', 'Ward')]",True
SPIDER_dev_558,student_transcripts_tracking,"What is the first, middle, and last name of the earliest school graduate?","return school graduates ;return the earliest #1 ;return the first name of #2 ;return the middle name of #2 ;return the last name of #2 ;return #3, #4, #5","SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","SELECT students.first_name, students.middle_name, students.last_name FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students ORDER BY students.student_id ASC LIMIT 1 )","[('Timmothy', 'Anna', 'Ward')]","[('Timmothy', 'Anna', 'Ward')]",True
SPIDER_dev_559,student_transcripts_tracking,Whose permanent address is different from his or her current address? List his or her first name.,return permanent addresses ;return current addresses ;return #1 that is different than #2 ;return #1 besides #3 ;return first name of #4,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,SELECT students.first_name FROM students WHERE students.permanent_address_id IN ( SELECT students.permanent_address_id FROM students WHERE students.permanent_address_id NOT IN ( SELECT DISTINCT students.permanent_address_id FROM students ) ),"[('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]",[],False
SPIDER_dev_56,pets_1,How many different types of pet are there?,return pets ;return types of #1 ;return different #2 ;return number of #3,SELECT count(DISTINCT pettype) FROM pets,SELECT COUNT(DISTINCT pets.pettype) FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets ),"[(2,)]","[(2,)]",True
SPIDER_dev_560,student_transcripts_tracking,What is the first name of the student whose permanent address is different from his or her current one?,return students ;return permanent addresses of #1 ;return current addresses of #1 ;return #1 where #2 is different than #3 ;return first name of #4,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,SELECT students.first_name FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students ) AND students.permanent_address_id = 'different than #3' ),"[('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]",[],False
SPIDER_dev_561,student_transcripts_tracking,Which address holds the most number of students currently? List the address id and all lines.,"return addresses ;return students currently at #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return address id of #4 ;return lines of #4 ;return #5, #6","SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","SELECT addresses.address_id, addresses.line_3 FROM addresses, students WHERE addresses.address_id = students.current_address_id AND addresses.address_id IN ( SELECT addresses.address_id FROM addresses, students WHERE addresses.address_id = students.current_address_id AND addresses.address_id IN ( SELECT addresses.address_id FROM addresses ) GROUP BY addresses.address_id ORDER BY COUNT(students.last_name) DESC LIMIT 1 )","[(9, '0643 Muller Vista', 'Suite 383')]","[(9, None), (9, None), (9, None)]",False
SPIDER_dev_562,student_transcripts_tracking,"What is the id, line 1, and line 2 of the address with the most students?","return addresses ;return students of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return id of #4 ;return line 1 of #4 ;return line 2 of #4 ;return #5, #6, #7","SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","SELECT addresses.address_id, addresses.line_1, addresses.line_2 FROM addresses, students WHERE addresses.address_id = students.current_address_id AND addresses.address_id IN ( SELECT addresses.address_id FROM addresses, students WHERE addresses.address_id = students.current_address_id AND addresses.address_id IN ( SELECT addresses.address_id FROM addresses ) GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1 )","[(9, '0643 Muller Vista', 'Suite 383')]","[(9, '0643 Muller Vista', 'Suite 383'), (9, '0643 Muller Vista', 'Suite 383'), (9, '0643 Muller Vista', 'Suite 383')]",True
SPIDER_dev_563,student_transcripts_tracking,"On average, when were the transcripts printed?",return transcripts ;return when were #1 printed ;return average of #2,SELECT avg(transcript_date) FROM Transcripts,SELECT AVG(transcripts.transcript_date) FROM transcripts WHERE transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts ),"[(1989.9333333333334,)]","[(1989.9333333333334,)]",True
SPIDER_dev_564,student_transcripts_tracking,What is the average transcript date?,return transcripts ;return dates of #1 ;return average of #2,SELECT avg(transcript_date) FROM Transcripts,SELECT AVG(transcripts.transcript_date) FROM transcripts WHERE transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts ),"[(1989.9333333333334,)]","[(1989.9333333333334,)]",True
SPIDER_dev_565,student_transcripts_tracking,When is the first transcript released? List the date and details.,"return transcripts ;return the first #1 ;return when was #2 released ;return the date of #3 ;return the details of #3 ;return #4, #5","SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",SELECT MIN(transcripts.transcript_id) FROM transcripts,"[('1975-05-06 12:04:47', None)]","[(1,)]",False
SPIDER_dev_566,student_transcripts_tracking,"What is the earliest date of a transcript release, and what details can you tell me?","return transcript releases ;return dates of #1 ;return the earliest #2 ;return details of #3 ;return #3, #4","SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","SELECT transcripts.transcript_date, transcripts.other_details FROM transcripts WHERE transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts ) AND transcripts.transcript_date IN ( SELECT transcripts.transcript_date FROM transcripts WHERE transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts ) ORDER BY transcripts.transcript_date ASC LIMIT 1 ) ORDER BY transcripts.transcript_date ASC LIMIT 1","[('1975-05-06 12:04:47', None)]","[('1975-05-06 12:04:47', None)]",True
SPIDER_dev_567,student_transcripts_tracking,How many transcripts are released?,return transcripts ;return #1 that are released ;return number of #2,SELECT count(*) FROM Transcripts,SELECT COUNT(transcripts.transcript_id) FROM transcripts,"[(15,)]","[(15,)]",True
SPIDER_dev_568,student_transcripts_tracking,How many transcripts are listed?,return transcripts ;return number of #1,SELECT count(*) FROM Transcripts,SELECT COUNT(transcripts.transcript_id) FROM transcripts,"[(15,)]","[(15,)]",True
SPIDER_dev_569,student_transcripts_tracking,What is the last transcript release date?,return transcripts ;return release dates of #1 ;return #2 that is the last,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,"SELECT transcripts.transcript_date FROM students, student_enrolment, transcripts WHERE transcripts.other_details = student_enrolment.other_details AND student_enrolment.student_id = students.student_id AND transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts )","[('2013-06-30 13:01:40',)]",[],False
SPIDER_dev_57,pets_1,Find the first name of students who have cat or dog pet.,return students ;return pets of #1 ;return #1 where #2 is cat ;return #1 where #2 is dog ;return #3 or #4 ;return first names of #5,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',"SELECT student.fname FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student ) AND ((pets.pettype = 'cat') OR (pets.pettype = 'dog')) )","[('Linda',), ('Tracy',)]","[('Linda',), ('Tracy',), ('Tracy',)]",True
SPIDER_dev_570,student_transcripts_tracking,When was the last transcript released?,return transcripts ;return the last #1 ;return when was #2 released,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,SELECT MAX(transcripts.transcript_date) FROM transcripts,"[('2013-06-30 13:01:40',)]","[('2013-06-30 13:01:40',)]",True
SPIDER_dev_572,student_transcripts_tracking,What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?,"return courses ;return transcripts of #1 ;return #1 where #2 shows up ;return number of #3 for each #1 ;return enrollment ids of #1 ;return #4, #5","SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","SELECT courses.course_id, COUNT(courses.course_id), student_enrolment_courses.course_id FROM student_enrolment, student_enrolment_courses, courses, addresses, students WHERE courses.other_details = student_enrolment.other_details AND student_enrolment.student_id = students.student_id AND students.permanent_address_id = addresses.address_id AND courses.course_id = student_enrolment_courses.course_id AND courses.course_id IN ( SELECT courses.course_id FROM courses ) GROUP BY courses.course_id","[(4, 0)]",[],False
SPIDER_dev_573,student_transcripts_tracking,"Show the date of the transcript which shows the least number of results, also list the id.","return transcripts ;return results of #1 ;return number of #2 for each #1 ;return #1 where #3 is lowest ;return date of #4 ;return id of #4 ;return #5, #6","SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts, transcript_contents WHERE transcripts.transcript_id = transcript_contents.transcript_id AND transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts, transcript_contents WHERE transcripts.transcript_id = transcript_contents.transcript_id AND transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts ) GROUP BY transcripts.transcript_id ORDER BY COUNT(transcript_contents.student_course_id) ASC LIMIT 1 )","[('1975-10-28 15:16:51', 2)]","[('1975-10-28 15:16:51', 2)]",True
SPIDER_dev_574,student_transcripts_tracking,What is the date and id of the transcript with the least number of results?,"return transcripts ;return results of #1 ;return number of #2 for each #1 ;return #1 where #3 is lowest ;return date of #4 ;return id of #4 ;return #5, #6","SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts, transcript_contents WHERE transcripts.transcript_id = transcript_contents.transcript_id AND transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts, transcript_contents WHERE transcripts.transcript_id = transcript_contents.transcript_id AND transcripts.transcript_id IN ( SELECT transcripts.transcript_id FROM transcripts ) GROUP BY transcripts.transcript_id ORDER BY COUNT(transcript_contents.student_course_id) ASC LIMIT 1 )","[('1975-10-28 15:16:51', 2)]","[('1975-10-28 15:16:51', 2)]",True
SPIDER_dev_575,student_transcripts_tracking,Find the semester when both Master students and Bachelor students got enrolled in.,return master students ;return bachelor students ;return semesters of both #1 and #2,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',"SELECT DISTINCT semesters.semester_id FROM degree_programs, semesters WHERE degree_programs.other_details = semesters.other_details AND degree_programs.degree_summary_name = 'Master' AND semesters.semester_id IN ( SELECT semesters.semester_id FROM degree_programs, semesters WHERE degree_programs.other_details = semesters.other_details AND degree_programs.degree_summary_name = 'Bachelor' )","[(13,)]",[],False
SPIDER_dev_576,student_transcripts_tracking,What is the id of the semester that had both Masters and Bachelors students enrolled?,return semesters ;return students enrolled in #1 ;return #1 where #2 are masters ;return #1 where #2 are bachelors ;return #1 in both #3 and #4 ;return id of #5,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',"SELECT DISTINCT semesters.semester_id FROM student_enrolment, degree_programs, semesters WHERE student_enrolment.semester_id = semesters.semester_id AND degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.semester_id IN ( SELECT DISTINCT student_enrolment.semester_id FROM degree_programs, student_enrolment WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.semester_id IN ( SELECT student_enrolment.semester_id FROM student_enrolment ) AND degree_programs.degree_summary_name = 'Master' AND student_enrolment.semester_id IN ( SELECT student_enrolment.semester_id FROM degree_programs, student_enrolment WHERE degree_programs.degree_program_id = student_enrolment.degree_program_id AND student_enrolment.semester_id IN ( SELECT student_enrolment.semester_id FROM student_enrolment ) AND degree_programs.degree_summary_name = 'Bachelor' ) )","[(13,)]","[(13,)]",True
SPIDER_dev_577,student_transcripts_tracking,How many different addresses do the students currently live?,return students ;return addresses of #1 ;return different #2 ;return number of #3,SELECT count(DISTINCT current_address_id) FROM Students,SELECT COUNT(DISTINCT students.current_address_id) FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students ),"[(9,)]","[(9,)]",True
SPIDER_dev_578,student_transcripts_tracking,What are the different addresses that have students living there?,return students ;return addresses that have #1 living ;return different #2,SELECT count(DISTINCT current_address_id) FROM Students,SELECT DISTINCT students.current_address_id FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students ),"[(9,)]","[(10,), (12,), (9,), (7,), (6,), (15,), (1,), (2,), (14,)]",False
SPIDER_dev_579,student_transcripts_tracking,List all the student details in reversed lexicographical order.,return students ;return details of #1 ;return #2 sorted by reversed lexicographical order,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,SELECT students.other_student_details FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students ) ORDER BY students.other_student_details ASC,"[('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',), ('et',), ('dolorum',), ('autem',), ('atque',), ('assumenda',)]","[('assumenda',), ('atque',), ('autem',), ('dolorum',), ('et',), ('facilis',), ('laborum',), ('nesciunt',), ('non',), ('omnis',), ('omnis',), ('qui',), ('quia',), ('rerum',), ('voluptatem',)]",True
SPIDER_dev_58,pets_1,What are the first names of every student who has a cat or dog as a pet?,return students ;return pets of #1 ;return #1 where #2 is a cat ;return #1 where #2 is a dog ;return #3 or #4 ;return first names of #5,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',"SELECT student.fname FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student ) AND ((pets.pettype = 'cat') OR (pets.pettype = 'dog')) )","[('Linda',), ('Tracy',)]","[('Linda',), ('Tracy',), ('Tracy',)]",True
SPIDER_dev_580,student_transcripts_tracking,What other details can you tell me about students in reverse alphabetical order?,return students ;return details of #1 ;return #2 sorted by reverse alphabetical order,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,SELECT students.other_student_details FROM students WHERE students.student_id IN ( SELECT students.student_id FROM students ) ORDER BY students.other_student_details ASC,"[('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',), ('et',), ('dolorum',), ('autem',), ('atque',), ('assumenda',)]","[('assumenda',), ('atque',), ('autem',), ('dolorum',), ('et',), ('facilis',), ('laborum',), ('nesciunt',), ('non',), ('omnis',), ('omnis',), ('qui',), ('quia',), ('rerum',), ('voluptatem',)]",True
SPIDER_dev_581,student_transcripts_tracking,Describe the section h.,return sections ;return #1 that is h ;return describe #2,SELECT section_description FROM Sections WHERE section_name  =  'h',SELECT sections.section_description FROM sections WHERE sections.section_id IN ( SELECT sections.section_id FROM sections WHERE sections.section_name = 'h' ),"[('et',)]","[('et',)]",True
SPIDER_dev_582,student_transcripts_tracking,What is the description for the section named h?,return sections ;return #1 named h ;return description for #2,SELECT section_description FROM Sections WHERE section_name  =  'h',SELECT sections.section_description FROM sections WHERE sections.section_id IN ( SELECT sections.section_id FROM sections WHERE sections.section_name = 'h' ),"[('et',)]","[('et',)]",True
SPIDER_dev_583,student_transcripts_tracking,Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.,return students ;return countries #1 permanently live in ;return #1 where #2 is haiti ;return cell phone numbers of #1 ;return #1 where #4 is 09700166582 ;return #3 or #5 ;return first names of #6,select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',"SELECT students.first_name FROM addresses, students WHERE addresses.address_id = students.current_address_id AND students.student_id IN ( SELECT students.student_id FROM addresses, students WHERE addresses.address_id = students.current_address_id AND students.student_id IN ( SELECT students.student_id FROM students ) AND ((addresses.country = 'haiti') OR (students.cell_mobile_number = 09700166582)) )","[('Jarvis',)]",[],False
SPIDER_dev_584,student_transcripts_tracking,What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582?,"return students ;return #1 who live in haiti permanently ;return #1 who have the cell phone number 09700166582 ;return #2, #3 ;return the first names of #4",select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',"SELECT students.first_name FROM addresses, students WHERE students.permanent_address_id = addresses.address_id AND students.student_id IN ( SELECT students.student_id FROM addresses, students WHERE students.permanent_address_id = addresses.address_id AND ((addresses.country = 'haiti') OR (students.cell_mobile_number LIKE '%09700166582%')) )","[('Jarvis',)]","[('Jarvis',)]",True
SPIDER_dev_585,tvshow,List the title of all cartoons in alphabetical order.,return cartoons ;return titles of #1 ;return #2 sorted by alphabetical order,SELECT Title FROM Cartoon ORDER BY title,SELECT cartoon.title FROM cartoon WHERE cartoon.id IN ( SELECT cartoon.id FROM cartoon ) ORDER BY cartoon.title ASC,"[('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]","[('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]",True
SPIDER_dev_586,tvshow,What are the titles of the cartoons sorted alphabetically?,return cartoons ;return titles of #1 ;return #2 sorted alphabetically,SELECT Title FROM Cartoon ORDER BY title,SELECT cartoon.title FROM cartoon WHERE cartoon.id IN ( SELECT cartoon.id FROM cartoon ),"[('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]","[('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Evil Under the Sea!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Enter the Outsiders!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('Journey to the Center of the Bat!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',), ('Deep Cover for Batman!',)]",True
SPIDER_dev_587,tvshow,"List all cartoon directed by ""Ben Jones"".",return cartoons ;return #1 directed by ben jones,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"";",SELECT cartoon.title FROM cartoon WHERE cartoon.directed_by = 'Ben Jones',"[('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]","[('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]",True
SPIDER_dev_588,tvshow,What are the names of all cartoons directed by Ben Jones?,return cartoons ;return #1 directed by ben jones ;return names of #2,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"";",SELECT cartoon.title FROM cartoon WHERE cartoon.id IN ( SELECT cartoon.id FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' ),"[('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]","[('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]",True
SPIDER_dev_589,tvshow,"How many cartoons were written by ""Joseph Kuhr""?",return cartoons ;return #1 written by joseph kuhr ;return number of #2,"SELECT count(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr"";",SELECT COUNT(cartoon.id) FROM cartoon WHERE cartoon.written_by = 'Joseph Kuhr',"[(2,)]","[(2,)]",True
SPIDER_dev_59,pets_1,Find the name of students who have both cat and dog pets.,return students ;return pets of #1 ;return #1 where #2 is cat ;return #1 where #2 is dog ;return #1 in both #3 and #4 ;return names of #5,select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog',"SELECT DISTINCT student.lname FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT DISTINCT student.stuid FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student ) AND pets.pettype = 'cat' AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student ) AND pets.pettype = 'dog' ) )",[],[],True
SPIDER_dev_590,tvshow,What is the number of cartoones written by Joseph Kuhr?,return cartoones ;return #1 written by joseph kuhr ;return number of #2,"SELECT count(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr"";",SELECT COUNT(cartoon.title) FROM cartoon WHERE cartoon.written_by = 'Joseph Kuhr',"[(2,)]","[(2,)]",True
SPIDER_dev_591,tvshow,list all cartoon titles and their directors ordered by their air date,"return cartoon titles ;return directors of #1 ;return #1, #2 ;return air dates of #1 ;return #4 sorted by #3","SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","SELECT tv_series.air_date FROM tv_channel, tv_series, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id = tv_series.channel AND cartoon.title IN ( SELECT cartoon.title FROM cartoon ) ORDER BY cartoon.title ASC","[('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]","[('November 12, 2007',), ('October 8, 2007',), ('November 12, 2007',), ('October 8, 2007',), ('November 5, 2007',), ('November 12, 2007',), ('October 8, 2007',), ('October 29, 2007',), ('September 24, 2007',), ('October 1, 2007',), ('December 10, 2007',), ('October 29, 2007',), ('September 24, 2007',)]",False
SPIDER_dev_592,tvshow,What is the name and directors of all the cartoons that are ordered by air date?,"return cartoons ;return air dates of #1 ;return names of #1 ;return directors of #1 ;return #2, #3 ;return #5 sorted by #4","SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","SELECT cartoon.directed_by, cartoon.title FROM cartoon WHERE cartoon.id IN ( SELECT cartoon.id FROM cartoon ) ORDER BY cartoon.id ASC","[('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]","[('Ben Jones', 'The Rise of the Blue Beetle!'), ('Brandon Vietti', 'Terror on Dinosaur Island!'), ('Michael Chang', 'Evil Under the Sea!'), ('Ben Jones', 'Day of the Dark Knight!'), ('Brandon Vietti', 'Invasion of the Secret Santas!'), ('Michael Chang', 'Enter the Outsiders!'), ('Ben Jones', 'Dawn of the Dead Man!'), ('Brandon Vietti', 'Fall of the Blue Beetle!'), ('Michael Chang', 'Journey to the Center of the Bat!'), ('Ben Jones', 'The Eyes of Despero!'), ('Brandon Vietti', 'Return of the Fearsome Fangs!'), ('Michael Chang', 'Deep Cover for Batman!')]",True
SPIDER_dev_593,tvshow,"List the title of all cartoon directed by ""Ben Jones"" or ""Brandon Vietti"".",return cartoons ;return #1 directed by ben jones ;return #1 directed by brandon vietti ;return #2 or #3 ;return titles of #4,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti"";",SELECT cartoon.title FROM cartoon WHERE cartoon.id IN ( SELECT cartoon.id FROM cartoon WHERE ((cartoon.directed_by = 'Ben Jones') OR (cartoon.directed_by = 'Brandon Vietti')) ),"[('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]","[('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]",True
SPIDER_dev_594,tvshow,What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?,return cartoons ;return #1 directed by ben jones ;return #1 directed by brandon vietti ;return #2 or #3 ;return titles of #4,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti"";",SELECT cartoon.title FROM cartoon WHERE cartoon.id IN ( SELECT cartoon.id FROM cartoon WHERE ((cartoon.directed_by = 'Ben Jones') OR (cartoon.directed_by = 'Brandon Vietti')) ),"[('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]","[('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]",True
SPIDER_dev_595,tvshow,Which country has the most of TV Channels? List the country and number of TV Channels it has.,"return countries ;return tv channels of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return country of #4 ;return tv channels of #4 ;return number of #6 ;return #5, #7","SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","SELECT tv_channel.country, COUNT(tv_channel.id) FROM tv_channel WHERE tv_channel.country IN ( SELECT tv_channel.country FROM tv_channel WHERE tv_channel.country IN ( SELECT tv_channel.country FROM tv_channel ) GROUP BY tv_channel.country ORDER BY COUNT(tv_channel.id) DESC LIMIT 1 )","[('Italy', 12)]","[('Italy', 12)]",True
SPIDER_dev_596,tvshow,What is the country with the most number of TV Channels and how many does it have?,"return countries ;return tv channels of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return number of #4 ;return #4, #5","SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","SELECT tv_channel.country, COUNT(tv_channel.country) FROM tv_channel WHERE tv_channel.country IN ( SELECT tv_channel.country FROM tv_channel ) AND tv_channel.country IN ( SELECT tv_channel.country FROM tv_channel WHERE tv_channel.country IN ( SELECT tv_channel.country FROM tv_channel ) GROUP BY tv_channel.country ORDER BY COUNT(tv_channel.id) DESC LIMIT 1 ) GROUP BY tv_channel.country ORDER BY COUNT(tv_channel.id) DESC LIMIT 1","[('Italy', 12)]","[('Italy', 12)]",True
SPIDER_dev_597,tvshow,List the number of different series names and contents in the TV Channel table.,"return series ;return tv channel table ;return names of #1 ;return contents of #1 ;return #2, #3 ;return number of #4","SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","SELECT COUNT(DISTINCT tv_channel.content) FROM tv_channel, tv_series WHERE tv_series.channel = tv_channel.id AND tv_series.id IN ( SELECT DISTINCT tv_series.id FROM tv_series )","[(15, 1)]","[(1,)]",False
SPIDER_dev_598,tvshow,How many different series and contents are listed in the TV Channel table?,"return tv channel table ;return series in #1 ;return contents of #1 ;return #2, #3 ;return different #4 ;return number of #5","SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","SELECT COUNT(DISTINCT tv_series.id) FROM tv_channel, tv_series WHERE tv_channel.id = tv_series.channel AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel )","[(15, 1)]","[(12,)]",False
SPIDER_dev_599,tvshow,"What is the content of TV Channel with serial name ""Sky Radio""?",return tv channels ;return serial names of #1 ;return #1 where #2 is sky radio ;return content of #3,"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";",SELECT tv_channel.content FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND tv_channel.series_name = 'Sky Radio' ),"[('music',)]","[('music',)]",True
SPIDER_dev_6,concert_singer,Show the name and the release year of the song by the youngest singer.,"return singers ;return #1 that is youngest ;return song by #2 ;return name of #3 ;return release year of #3 ;return #4, #5","SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","SELECT singer.song_name, singer.song_release_year FROM singer WHERE singer.song_name IN ( SELECT singer.song_name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ORDER BY singer.name DESC LIMIT 1 ) )","[('Love', '2016')]","[('Love', '2016')]",True
SPIDER_dev_60,pets_1,What are the students' first names who have both cats and dogs as pets?,return students ;return pets of #1 ;return #1 where #2 is cats ;return #1 where #2 is dogs ;return #1 in both #3 and #4 ;return first names of #5,SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog',"SELECT DISTINCT student.fname FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT DISTINCT student.stuid FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student ) AND pets.pettype = 'cat' AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student ) AND pets.pettype = 'dog' ) )",[],[],True
SPIDER_dev_600,tvshow,What is the content of the series Sky Radio?,return series sky radio ;return content of #1,"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";",SELECT tv_channel.content FROM tv_channel WHERE tv_channel.series_name IN ( SELECT tv_channel.series_name FROM tv_channel WHERE tv_channel.series_name = 'Sky Radio' ),"[('music',)]","[('music',)]",True
SPIDER_dev_601,tvshow,"What is the Package Option of TV Channel with serial name ""Sky Radio""?",return tv channels ;return serial names of #1 ;return #1 where #2 is sky radio ;return package option of #3,"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio"";",SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND tv_channel.series_name = 'Sky Radio' ),"[('Sky Famiglia',)]","[('Sky Famiglia',)]",True
SPIDER_dev_602,tvshow,What are the Package Options of the TV Channels whose series names are Sky Radio?,return tv channels ;return series names of #1 ;return #1 where #2 is sky radio ;return package options of #3,"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio"";",SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND tv_channel.series_name = 'Sky Radio' ),"[('Sky Famiglia',)]","[('Sky Famiglia',)]",True
SPIDER_dev_603,tvshow,How many TV Channel using language English?,return tv channel ;return languages of #1 ;return #1 where #2 is english ;return number of #3,"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";",SELECT COUNT(tv_channel.id) FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND tv_channel.language = 'English',"[(3,)]","[(3,)]",True
SPIDER_dev_604,tvshow,How many TV Channels use the English language?,return tv channels ;return #1 that use the english language ;return number of #2,"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";",SELECT COUNT(tv_channel.id) FROM tv_channel WHERE tv_channel.language = 'English',"[(3,)]","[(3,)]",True
SPIDER_dev_605,tvshow,List the language used least number of TV Channel. List language and number of TV Channel.,"return languages ;return tv channels of #1 ;return number of #2 for each #1 ;return #1 where #3 is lowest ;return tv channels of #4 ;return number of #5 ;return #4, #6","SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;","SELECT tv_channel.language, COUNT(tv_channel.id) FROM tv_channel WHERE tv_channel.language IN ( SELECT tv_channel.language FROM tv_channel ) AND tv_channel.language IN ( SELECT tv_channel.language FROM tv_channel WHERE tv_channel.language IN ( SELECT tv_channel.language FROM tv_channel ) GROUP BY tv_channel.language ORDER BY COUNT(tv_channel.id) ASC LIMIT 1 ) GROUP BY tv_channel.language ORDER BY COUNT(tv_channel.id) ASC LIMIT 1","[('English', 3)]","[('English', 3)]",True
SPIDER_dev_606,tvshow,What are the languages used by the least number of TV Channels and how many channels use it?,"return tv channels ;return languages of #1 ;return number of #1 for each #2 ;return #2 where #3 is the lowest ;return #2, #4","SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",SELECT tv_channel.language FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) GROUP BY tv_channel.language ORDER BY COUNT(tv_channel.id) ASC LIMIT 1,"[('English', 3)]","[('English',)]",False
SPIDER_dev_607,tvshow,List each language and the number of TV Channels using it.,"return languages ;return tv channels using #1 ;return number of #2 for each #1 ;return #1, #3","SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","SELECT tv_channel.language, COUNT(tv_channel.language) FROM tv_channel WHERE tv_channel.language IN ( SELECT tv_channel.language FROM tv_channel ) GROUP BY tv_channel.language","[('English', 3), ('Italian', 12)]","[('English', 3), ('Italian', 12)]",True
SPIDER_dev_608,tvshow,"For each language, list the number of TV Channels that use it.",return languages ;return tv channels that use #1 ;return number of #2 for each #1,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","SELECT tv_channel.language, COUNT(tv_channel.language) FROM tv_channel WHERE tv_channel.language IN ( SELECT tv_channel.language FROM tv_channel ) GROUP BY tv_channel.language","[('English', 3), ('Italian', 12)]","[('English', 3), ('Italian', 12)]",True
SPIDER_dev_609,tvshow,"What is the TV Channel that shows the cartoon ""The Rise of the Blue Beetle!""? List the TV Channel's series name.",return tv channels ;return cartoons of #1 ;return #1 where #2 is the rise of the blue beetle ;return series name of #3,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!"";","SELECT tv_channel.series_name FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND cartoon.title = 'The Rise of the Blue Beetle!' )","[('Sky Radio',)]","[('Sky Radio',), ('Sky Radio',)]",True
SPIDER_dev_61,pets_1,Find the major and age of students who do not have a cat pet.,"return students ;return #1 who do not have a cat pet ;return major of #2 ;return ages of #2 ;return #3, #4","SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","SELECT student.major, student.age FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype LIKE '%cat%' )","[(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]","[(600, 18)]",False
SPIDER_dev_610,tvshow,"What is the series name of the TV Channel that shows the cartoon ""The Rise of the Blue Beetle""?",return tv channels ;return cartoons of #1 ;return #1 where #2 is the rise of the blue beetle ;return series name of #3,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!"";","SELECT tv_channel.series_name FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND cartoon.title = 'The Rise of the Blue Beetle!' )","[('Sky Radio',)]","[('Sky Radio',), ('Sky Radio',)]",True
SPIDER_dev_611,tvshow,"List the title of all  Cartoons showed on TV Channel with series name ""Sky Radio"".",return tv channels ;return series names of #1 ;return #1 where #2 is sky radio ;return cartoons shown on #3 ;return titles of #4,"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","SELECT cartoon.title FROM tv_channel, cartoon WHERE tv_channel.id = cartoon.channel AND cartoon.channel IN ( SELECT cartoon.channel FROM tv_channel, cartoon WHERE tv_channel.id = cartoon.channel AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND tv_channel.series_name = 'Sky Radio' ) )","[('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]","[('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]",True
SPIDER_dev_612,tvshow,"What is the title of all the cartools that are on the TV Channel with the series name ""Sky Radio""?",return tv channels ;return series names of #1 ;return #1 where #2 is sky radio ;return cartools on #3 ;return titles of #4,"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","SELECT cartoon.title FROM tv_channel, cartoon WHERE tv_channel.id = cartoon.channel AND cartoon.production_code IN ( SELECT cartoon.production_code FROM tv_channel, cartoon WHERE tv_channel.id = cartoon.channel AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND tv_channel.series_name = 'Sky Radio' ) )","[('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]","[('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]",True
SPIDER_dev_613,tvshow,List the Episode of all TV series sorted by rating.,return tv series ;return episodes of #1 ;return ratings of #1 ;return #2 sorted by #3,SELECT Episode FROM TV_series ORDER BY rating,SELECT tv_series.episode FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series ) ORDER BY tv_series.rating ASC,"[('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]","[('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]",True
SPIDER_dev_614,tvshow,What are all of the episodes ordered by ratings?,return episodes ;return ratings of #1 ;return #1 sorted by #2,SELECT Episode FROM TV_series ORDER BY rating,SELECT tv_series.episode FROM tv_series ORDER BY tv_series.rating ASC,"[('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]","[('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]",True
SPIDER_dev_615,tvshow,List top 3 highest Rating  TV series. List the TV series's Episode and Rating.,"return tv series ;return ratings of #1 ;return #1 where #2 is highest ;return #1 besides #3 ;return #4 where #2 is highest ;return #4 besides #5 ;return #6 where #2 is highest ;return #3, #5, #7","SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",SELECT tv_series.id FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series ) ORDER BY tv_series.rating DESC LIMIT 1,"[('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]","[(1.0,)]",False
SPIDER_dev_616,tvshow,What are 3 most highly rated episodes in the TV series table and what were those ratings?,"return tv series table ;return episodes of #1 ;return ratings of #2 ;return the 3 highest of #3 ;return #2 where #3 is equal to any of #4 ;return ratings of #5 ;return #5, #6","SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","SELECT tv_series.episode, tv_series.rating FROM tv_series WHERE tv_series.episode IN ( SELECT tv_series.episode FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series ) ) AND tv_series.id IN ( SELECT tv_series.id FROM tv_series ) AND tv_series.rating = 'any of #4' AND tv_series.episode IN ( SELECT tv_series.episode FROM tv_series WHERE tv_series.episode IN ( SELECT tv_series.episode FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series ) ) AND tv_series.id IN ( SELECT tv_series.id FROM tv_series ) AND tv_series.rating = 'any of #4' )","[('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]",[],False
SPIDER_dev_617,tvshow,What is minimum and maximum share of TV series?,"return tv series ;return shares of #1 ;return minimum of #2 ;return maximum of #2 ;return #3, #4","SELECT max(SHARE) , min(SHARE) FROM TV_series;","SELECT MIN(tv_series.share), MAX(tv_series.share) FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series )","[(9.0, 5.0)]","[(5.0, 9.0)]",True
SPIDER_dev_618,tvshow,What is the maximum and minimum share for the TV series?,"return tv series ;return shares of #1 ;return maximum of #2 ;return minimum of #2 ;return #3, #4","SELECT max(SHARE) , min(SHARE) FROM TV_series;","SELECT MAX(tv_series.share), MIN(tv_series.share) FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series )","[(9.0, 5.0)]","[(9.0, 5.0)]",True
SPIDER_dev_619,tvshow,"What is the air date of TV series with Episode ""A Love of a Lifetime""?",return tv series ;return episodes of #1 ;return #1 where #2 is a love of a lifetime ;return air dates of #3,"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";",SELECT tv_series.air_date FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series ) AND tv_series.episode = 'A Love of a Lifetime' ),"[('September 24, 2007',)]","[('September 24, 2007',)]",True
SPIDER_dev_62,pets_1,"What major is every student who does not own a cat as a pet, and also how old are they?","return students ;return #1 who do not own a cat as a pet ;return major of #2 ;return how old are #2 ;return #3, #4","SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","SELECT student.major, student.lname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype = 'cat' )","[(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]","[(600, 'Smith')]",False
SPIDER_dev_620,tvshow,"When did the episode ""A Love of a Lifetime"" air?",return the episode a love of a lifetime ;return when did #1 air,"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";",SELECT tv_series.air_date FROM tv_series WHERE tv_series.episode IN ( SELECT tv_series.episode FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime' ),"[('September 24, 2007',)]","[('September 24, 2007',)]",True
SPIDER_dev_621,tvshow,"What is Weekly Rank of TV series with Episode ""A Love of a Lifetime""?",return tv series ;return episodes of #1 ;return #1 where #2 is a love of a lifetime ;return weekly rank of #3,"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime"";",SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series ) AND tv_series.episode = 'A Love of a Lifetime' ),"[(43.0,)]","[(43.0,)]",True
SPIDER_dev_622,tvshow,"What is the weekly rank for the episode ""A Love of a Lifetime""?",return episodes ;return #1 that is a love of a lifetime ;return weekly rank of #2,"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime"";",SELECT tv_series.weekly_rank FROM tv_series WHERE tv_series.episode IN ( SELECT tv_series.episode FROM tv_series WHERE tv_series.episode = 'A Love of a Lifetime' ),"[(43.0,)]","[(43.0,)]",True
SPIDER_dev_623,tvshow,"What is the TV Channel of TV series with Episode ""A Love of a Lifetime""? List the TV Channel's series name.","return tv series ;return episodes of #1 ;return #1 where #2 is a love of a lifetime ;return tv channel of #3 ;return series name of #3 ;return #4, #5","SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime"";","SELECT tv_channel.series_name FROM tv_channel, tv_series WHERE tv_series.channel = tv_channel.id AND tv_series.id IN ( SELECT tv_series.id FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series ) AND tv_series.episode = 'A Love of a Lifetime' )","[('Sky Radio',)]","[('Sky Radio',)]",True
SPIDER_dev_624,tvshow,"What is the name of the series that has the episode ""A Love of a Lifetime""?",return series ;return episodes of #1 ;return #1 where #2 is a love of a lifetime ;return name of #3,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime"";","SELECT tv_channel.series_name FROM tv_channel, tv_series WHERE tv_series.channel = tv_channel.id AND tv_series.id IN ( SELECT tv_series.id FROM tv_series WHERE tv_series.id IN ( SELECT tv_series.id FROM tv_series ) AND tv_series.episode = 'A Love of a Lifetime' )","[('Sky Radio',)]","[('Sky Radio',)]",True
SPIDER_dev_625,tvshow,"List the Episode of all  TV series showed on TV Channel with series name ""Sky Radio"".",return tv channels ;return series names of #1 ;return #1 where #2 is sky radio ;return tv series of #3 ;return episodes of #4,"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","SELECT tv_series.episode FROM tv_channel, tv_series WHERE tv_channel.id = tv_series.channel AND tv_series.id IN ( SELECT tv_series.id FROM tv_channel, tv_series WHERE tv_channel.id = tv_series.channel AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND tv_channel.series_name = 'Sky Radio' ) )","[('A Love of a Lifetime',), ('Keepers',)]","[('A Love of a Lifetime',), ('Keepers',)]",True
SPIDER_dev_626,tvshow,"What is the episode for the TV series named ""Sky Radio""?",return tv series ;return #1 named sky radio ;return episode for #2,"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","SELECT tv_series.episode FROM tv_channel, tv_series WHERE tv_series.channel = tv_channel.id AND tv_series.id IN ( SELECT tv_series.id FROM tv_channel, tv_series WHERE tv_series.channel = tv_channel.id AND tv_channel.series_name = 'Sky Radio' )","[('A Love of a Lifetime',), ('Keepers',)]","[('A Love of a Lifetime',), ('Keepers',)]",True
SPIDER_dev_627,tvshow,Find the number of cartoons directed by each of the listed directors.,return directors ;return cartoons directed by #1 ;return number of #2 for each #1,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","SELECT cartoon.directed_by, COUNT(cartoon.directed_by) FROM cartoon WHERE cartoon.directed_by IN ( SELECT cartoon.directed_by FROM cartoon ) GROUP BY cartoon.directed_by","[(4, 'Ben Jones'), (4, 'Brandon Vietti'), (4, 'Michael Chang')]","[('Ben Jones', 4), ('Brandon Vietti', 4), ('Michael Chang', 4)]",True
SPIDER_dev_628,tvshow,How many cartoons did each director create?,return directors ;return cartoons of #1 ;return number of #2 for each #1,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","SELECT cartoon.directed_by, COUNT(cartoon.id) FROM cartoon WHERE cartoon.directed_by IN ( SELECT cartoon.directed_by FROM cartoon ) GROUP BY cartoon.directed_by","[(4, 'Ben Jones'), (4, 'Brandon Vietti'), (4, 'Michael Chang')]","[('Ben Jones', 4), ('Brandon Vietti', 4), ('Michael Chang', 4)]",True
SPIDER_dev_629,tvshow,Find the production code and channel of the most recently aired cartoon.,"return cartoons ;return #1 that is most recently aired ;return production code of #2 ;return channel of #2 ;return #3, #4","select production_code ,  channel from cartoon order by original_air_date desc limit 1","SELECT cartoon.production_code, cartoon.channel FROM cartoon WHERE cartoon.id IN ( SELECT cartoon.id FROM cartoon WHERE cartoon.id IN ( SELECT cartoon.id FROM cartoon ) ORDER BY cartoon.original_air_date DESC LIMIT 1 )","[(102.0, '701')]","[(102.0, '701')]",True
SPIDER_dev_63,pets_1,Find the id of students who do not have a cat pet.,return students ;return pets of #1 ;return #1 where #2 is not cat ;return ids of #3,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',"SELECT student.stuid FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE pets.petid = has_pet.petid AND has_pet.stuid = student.stuid AND student.stuid IN ( SELECT student.stuid FROM student ) AND pets.pettype != 'cat' )","[(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]","[(1002,), (1002,)]",False
SPIDER_dev_630,tvshow,What is the produdction code and channel of the most recent cartoon?,"return cartoons ;return the most recent #1 ;return the produdction code of #2 ;return the channel of #2 ;return #3, #4","select production_code ,  channel from cartoon order by original_air_date desc limit 1","SELECT cartoon.production_code, cartoon.channel FROM cartoon WHERE cartoon.id IN ( SELECT cartoon.id FROM cartoon ORDER BY cartoon.original_air_date DESC LIMIT 1 )","[(102.0, '701')]","[(102.0, '701')]",True
SPIDER_dev_631,tvshow,Find the package choice and series name of the TV channel that has high definition TV.,"return tv channels ;return #1 that has high definition tv ;return package choice of #2 ;return series name of #2 ;return #3, #4","SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  ""yes""","SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel )","[('Sky Famiglia + Sky HD', 'MTV Live HD')]","[('Sky Famiglia', 'Sky Radio'), ('Sky Famiglia', 'Sky Music'), ('Sky Famiglia', 'Music Box Italia'), ('Sky Famiglia', 'MTV Hits'), ('Sky Famiglia', 'MTV Classic'), ('Sky Famiglia', 'MTV Rocks'), ('Sky Famiglia', 'MTV Dance'), ('no ( FTV )', 'MTV Music'), ('Sky Famiglia + Sky HD', 'MTV Live HD'), ('no ( FTV )', 'Radio Capital TiVù'), ('Sky Famiglia', 'myDeejay'), ('Sky Famiglia', 'Match Music'), ('Sky Famiglia', 'Rock TV'), ('Sky Famiglia', 'Hip Hop TV'), ('Option', 'Classica')]",False
SPIDER_dev_632,tvshow,What are the package options and the name of the series for the TV Channel that supports high definition TV?,"return tv channels ;return #1 that support high definition tv ;return package options of #2 ;return series of #2 ;return name of #4 ;return #3, #5","SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  ""yes""","SELECT tv_channel.package_option, tv_channel.series_name FROM tv_channel, tv_series WHERE tv_channel.id = tv_series.channel AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND tv_series.channel IN ( SELECT tv_series.channel FROM tv_channel, tv_series WHERE tv_channel.id = tv_series.channel AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) )","[('Sky Famiglia + Sky HD', 'MTV Live HD')]","[('Sky Famiglia', 'Sky Radio'), ('Sky Famiglia', 'Sky Music'), ('Sky Famiglia', 'MTV Dance'), ('no ( FTV )', 'Radio Capital TiVù'), ('Sky Famiglia', 'myDeejay'), ('Sky Famiglia', 'Sky Radio'), ('no ( FTV )', 'MTV Music'), ('Sky Famiglia', 'MTV Dance'), ('Sky Famiglia', 'Rock TV'), ('Sky Famiglia', 'Hip Hop TV'), ('Option', 'Classica'), ('Sky Famiglia', 'myDeejay')]",False
SPIDER_dev_633,tvshow,which countries' tv channels are playing some cartoon written by Todd Casey?,return countries ;return tv channels of #1 ;return cartoons that #2 are playing ;return #3 written by todd casey,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"SELECT tv_channel.country FROM tv_channel, cartoon WHERE tv_channel.id = cartoon.channel AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.country IN ( SELECT tv_channel.country FROM tv_channel ) ) AND cartoon.written_by = 'Todd Casey'","[('United Kingdom',), ('Italy',)]","[('United Kingdom',), ('Italy',)]",True
SPIDER_dev_634,tvshow,What are the countries that have cartoons on TV that were written by Todd Casey?,return cartoons ;return #1 on tv ;return #2 that were written by todd casey ;return countries that have #3,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"SELECT tv_channel.country FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.id IN ( SELECT cartoon.id FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.written_by = 'Todd Casey' )","[('United Kingdom',), ('Italy',)]","[('United Kingdom',), ('Italy',)]",True
SPIDER_dev_635,tvshow,which countries' tv channels are not playing any cartoon written by Todd Casey?,return countries ;return tv channels of #1 ;return cartoons that #2 are playing ;return #3 written by todd casey ;return number of #4 for each #1 ;return #1 where #5 is at least one ;return #1 besides #6,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"SELECT tv_channel.country FROM tv_channel WHERE tv_channel.country NOT IN ( SELECT tv_channel.country FROM tv_channel, cartoon WHERE tv_channel.id = cartoon.channel AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.country IN ( SELECT tv_channel.country FROM tv_channel ) ) AND cartoon.written_by = 'Todd Casey' GROUP BY tv_channel.country HAVING COUNT(cartoon.channel) >= 1 )","[('Poland',)]","[('Poland',)]",True
SPIDER_dev_636,tvshow,What are the countries that are not playing cartoons written by Todd Casey?,return cartoons ;return #1 written by todd casey ;return countries playing #2 ;return countries besides #3,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"SELECT tv_channel.country FROM tv_channel WHERE tv_channel.country NOT IN ( SELECT tv_channel.country FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.id IN ( SELECT cartoon.id FROM cartoon WHERE cartoon.written_by = 'Todd Casey' ) )","[('Poland',)]","[('Poland',)]",True
SPIDER_dev_637,tvshow,Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?,"return cartoons ;return #1 directed by ben jones ;return #1 directed by michael chang ;return #1 in both #2 and #3 ;return tv channels playing #4 ;return series name of #5 ;return country of #5 ;return #6, #7","SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","SELECT tv_channel.series_name, tv_channel.country FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id IN ( SELECT DISTINCT tv_channel.id FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.channel IN ( SELECT DISTINCT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' AND cartoon.channel IN ( SELECT cartoon.channel FROM cartoon WHERE cartoon.directed_by = 'Michael Chang' ) ) )","[('MTV Dance', 'United Kingdom')]","[('MTV Dance', 'United Kingdom'), ('MTV Dance', 'United Kingdom'), ('MTV Dance', 'United Kingdom')]",True
SPIDER_dev_638,tvshow,What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?,"return cartoons ;return #1 directed by ben jones ;return #1 directed by michael chang ;return tv channels playing #2 ;return tv channels playing #3 ;return series names of #4 ;return countries of #4 ;return #5, #6 ;return #7, #8","SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","SELECT tv_channel.country, tv_channel.series_name FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.id IN ( SELECT cartoon.id FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' ) ) AND cartoon.id IN ( SELECT cartoon.id FROM cartoon WHERE cartoon.directed_by = 'Michael Chang' )","[('MTV Dance', 'United Kingdom')]","[('United Kingdom', 'MTV Dance'), ('United Kingdom', 'MTV Dance')]",True
SPIDER_dev_639,tvshow,find the pixel aspect ratio and nation of the tv channels that do not use English.,"return tv channels ;return #1 that do not use english ;return pixel aspect ratio of #2 ;return nation of #2 ;return #3, #4","SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.language = 'English' )","[('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]","[('16:9', 'United Kingdom'), ('16:9', 'United Kingdom'), ('16:9', 'Poland')]",False
SPIDER_dev_64,pets_1,What are the ids of the students who do not own cats as pets?,return students ;return #1 who own cats as pets ;return #1 besides #2 ;return ids of #3,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',"SELECT student.stuid FROM student WHERE student.stuid IN ( SELECT student.stuid FROM student WHERE student.stuid NOT IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype = 'cat' ) )","[(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]","[(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]",True
SPIDER_dev_640,tvshow,What is the pixel aspect ratio and country of origin for all TV channels that do not use English?,"return tv channels ;return #1 that do not use english ;return pixel aspect ratio of #2 ;return country of origin of #2 ;return #3, #4","SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.language = 'English' )","[('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]","[('16:9', 'United Kingdom'), ('16:9', 'United Kingdom'), ('16:9', 'Poland')]",False
SPIDER_dev_641,tvshow,find id of the tv channels that from the countries where have more than two tv channels.,return countries ;return tv channels of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than two ;return ids of #4,SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,SELECT tv_channel.country FROM tv_channel WHERE tv_channel.country IN ( SELECT tv_channel.country FROM tv_channel WHERE tv_channel.country IN ( SELECT tv_channel.country FROM tv_channel ) GROUP BY tv_channel.country HAVING COUNT(tv_channel.id) > 2 ),"[('700',)]","[('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',), ('Italy',)]",False
SPIDER_dev_642,tvshow,What are the ids of all tv channels that have more than 2 TV channels?,return tv channels ;return number of #1 ;return #1 where #2 is higher than 2 ;return ids of #3,SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE COUNT(tv_channel.id) > 2 ),"[('700',)]",ERROR,False
SPIDER_dev_643,tvshow,find the id of tv channels that do not play any cartoon directed by Ben Jones.,return cartoons ;return #1 directed by ben jones ;return tv channels that play #2 ;return tv channels besides #3 ;return ids of #4,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',"SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT tv_channel.id FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND cartoon.id IN ( SELECT cartoon.id FROM cartoon WHERE cartoon.directed_by = 'Ben Jones' ) ) )","[('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]","[('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]",True
SPIDER_dev_644,tvshow,What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?,return tv channels ;return cartoons of #1 ;return #1 directed by ben jones ;return #1 besides #2 ;return ids of #3,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',"SELECT tv_channel.id FROM tv_channel, cartoon WHERE tv_channel.id = cartoon.channel AND cartoon.directed_by = 'Ben Jones'","[('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]","[('700',), ('704',), ('707',), ('728',)]",False
SPIDER_dev_645,tvshow,find the package option of the tv channel that do not have any cartoon directed by Ben Jones.,return tv channels ;return cartoons of #1 ;return #1 where #2 is directed by ben jones ;return #1 besides #3 ;return package option of #4,SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),"SELECT tv_channel.package_option FROM tv_channel WHERE tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN ( SELECT tv_channel.id FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND cartoon.directed_by = 'Ben Jones' ) )","[('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]","[('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]",True
SPIDER_dev_646,tvshow,What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?,return tv channels ;return cartoons that #1 are playing ;return #1 where #2 is not directed by ben jones ;return package options of #3,SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),"SELECT tv_channel.package_option FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel, cartoon WHERE cartoon.channel = tv_channel.id AND tv_channel.id IN ( SELECT tv_channel.id FROM tv_channel ) AND cartoon.directed_by != 'Ben Jones' )","[('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]","[('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]",False
SPIDER_dev_647,poker_player,How many poker players are there?,return poker players ;return number of #1,SELECT count(*) FROM poker_player,SELECT COUNT(poker_player.poker_player_id) FROM poker_player,"[(5,)]","[(5,)]",True
SPIDER_dev_648,poker_player,Count the number of poker players.,return poker players ;return number of #1,SELECT count(*) FROM poker_player,SELECT COUNT(poker_player.poker_player_id) FROM poker_player,"[(5,)]","[(5,)]",True
SPIDER_dev_649,poker_player,List the earnings of poker players in descending order.,return poker players ;return earnings of #1 ;return #2 sorted by descending order,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,SELECT poker_player.earnings FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.earnings DESC,"[(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]","[(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]",True
SPIDER_dev_65,pets_1,Find the first name and age of students who have a dog but do not have a cat as a pet.,"return students ;return #1 who have a dog ;return #1 who do not have a cat as a pet ;return #1 in both #2 and #3 ;return first names of #4 ;return ages of #4 ;return #5, #6","SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","SELECT student.fname, student.age FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT DISTINCT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype LIKE '%dog%' AND pets.pettype LIKE '%cat%' )","[('Tracy', 19), ('Tracy', 19)]",[],False
SPIDER_dev_650,poker_player,"What are the earnings of poker players, ordered descending by value?",return poker players ;return earnings of #1 ;return values of #1 ;return #2 sorted by #3 in descending order,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,SELECT poker_player.earnings FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.poker_player_id DESC,"[(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]","[(142800.0,), (596462.0,), (104871.0,), (189233.0,), (476090.0,)]",True
SPIDER_dev_651,poker_player,List the final tables made and the best finishes of poker players.,"return poker players ;return final tables made of #1 ;return finishes of #1 ;return #2, #3","SELECT Final_Table_Made ,  Best_Finish FROM poker_player","SELECT poker_player.final_table_made, poker_player.best_finish FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player )","[(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]","[(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]",True
SPIDER_dev_652,poker_player,What are the final tables made and best finishes for all poker players?,"return poker players ;return final tables made of #1 ;return finishes of #1 ;return #2, #3","SELECT Final_Table_Made ,  Best_Finish FROM poker_player","SELECT poker_player.final_table_made, poker_player.best_finish FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player )","[(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]","[(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]",True
SPIDER_dev_653,poker_player,What is the average earnings of poker players?,return poker players ;return earnings of #1 ;return average of #2,SELECT avg(Earnings) FROM poker_player,SELECT AVG(poker_player.earnings) FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ),"[(301891.2,)]","[(301891.2,)]",True
SPIDER_dev_654,poker_player,Return the average earnings across all poker players.,return poker players ;return earnings of #1 ;return average of #2,SELECT avg(Earnings) FROM poker_player,SELECT AVG(poker_player.earnings) FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ),"[(301891.2,)]","[(301891.2,)]",True
SPIDER_dev_655,poker_player,What is the money rank of the poker player with the highest earnings?,return poker players ;return earnings of #1 ;return #1 where #2 is highest ;return money rank of #3,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,SELECT poker_player.money_rank FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.earnings DESC LIMIT 1 ),"[(58.0,)]","[(58.0,)]",True
SPIDER_dev_656,poker_player,Return the money rank of the player with the greatest earnings.,return players ;return earnings of #1 ;return #1 where #2 is highest ;return money rank of #3,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,SELECT poker_player.money_rank FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.earnings DESC LIMIT 1 ),"[(58.0,)]","[(58.0,)]",True
SPIDER_dev_657,poker_player,What is the maximum number of final tables made among poker players with earnings less than 200000?,return poker players ;return earnings of #1 ;return #1 where #2 is lower than 200000 ;return final tables made among #3 ;return number of #4,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,SELECT COUNT(poker_player.final_table_made) FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) AND poker_player.earnings < 200000 ),"[(26.0,)]","[(3,)]",False
SPIDER_dev_658,poker_player,Return the maximum final tables made across all poker players who have earnings below 200000.,return poker players ;return earnings of #1 ;return #1 where #2 is lower than 200000 ;return final tables made of #3 ;return number of #4 for each #3 ;return maximum of #5,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,SELECT SUM(poker_player.final_table_made) FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) AND poker_player.earnings < 200000 ) AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) AND poker_player.earnings < 200000 GROUP BY poker_player.poker_player_id ORDER BY SUM(poker_player.final_table_made) DESC LIMIT 1,"[(26.0,)]","[(26.0,)]",True
SPIDER_dev_659,poker_player,What are the names of poker players?,return poker players ;return names of #1,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,"SELECT people.name FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player )","[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]","[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]",True
SPIDER_dev_66,pets_1,What is the first name of every student who has a dog but does not have a cat?,return students ;return #1 who have a dog ;return #1 who have a cat ;return #1 besides #3 ;return #1 in both #2 and #4 ;return the first names of #5,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","SELECT DISTINCT student.fname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT DISTINCT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.pettype LIKE '%dog%' )","[('Tracy', 19), ('Tracy', 19)]","[('Tracy',)]",False
SPIDER_dev_660,poker_player,Return the names of all the poker players.,return poker players ;return names of #1,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,"SELECT people.name FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player )","[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]","[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]",True
SPIDER_dev_661,poker_player,What are the names of poker players whose earnings is higher than 300000?,return poker players ;return earnings of #1 ;return #1 where #2 is higher than 300000 ;return names of #3,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,"SELECT people.name FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) AND poker_player.earnings > 300000 )","[('Aleksey Ostapenko',), ('Maksim Botin',)]","[('Aleksey Ostapenko',), ('Maksim Botin',)]",True
SPIDER_dev_662,poker_player,Give the names of poker players who have earnings above 300000.,return poker players ;return earnings of #1 ;return #1 where #2 is higher than 300000 ;return names of #3,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,"SELECT people.name FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) AND poker_player.earnings > 300000 )","[('Aleksey Ostapenko',), ('Maksim Botin',)]","[('Aleksey Ostapenko',), ('Maksim Botin',)]",True
SPIDER_dev_663,poker_player,List the names of poker players ordered by the final tables made in ascending order.,return poker players ;return names of #1 ;return final tables of #1 ;return #2 sorted by #3 in ascending order,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,"SELECT people.name FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.final_table_made ASC","[('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]","[('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]",True
SPIDER_dev_664,poker_player,"What are the names of poker players, ordered ascending by the number of final tables they have made?",return poker players ;return names of #1 ;return final tables #1 have made ;return number of #3 for each #1 ;return #2 sorted by #4 in ascending order,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,"SELECT people.name FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.final_table_made ASC","[('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]","[('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]",True
SPIDER_dev_665,poker_player,What is the birth date of the poker player with the lowest earnings?,return poker players ;return earnings of #1 ;return #1 where #2 is lowest ;return birth date of #3,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,"SELECT people.birth_date FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.earnings ASC LIMIT 1 )","[('August 8, 1986',)]","[('August 8, 1986',)]",True
SPIDER_dev_666,poker_player,Return the birth date of the poker player with the lowest earnings.,return poker players ;return earnings of #1 ;return #1 where #2 is lowest ;return birth date of #3,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,"SELECT people.birth_date FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.earnings ASC LIMIT 1 )","[('August 8, 1986',)]","[('August 8, 1986',)]",True
SPIDER_dev_667,poker_player,What is the money rank of the tallest poker player?,return poker players ;return tallest of #1 ;return money rank of #2,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,SELECT poker_player.money_rank FROM poker_player WHERE poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ORDER BY poker_player.poker_player_id ASC LIMIT 1 ),"[(68.0,)]","[(68.0,)]",True
SPIDER_dev_668,poker_player,Return the money rank of the poker player with the greatest height.,return poker players ;return heights of #1 ;return #1 where #2 is highest ;return money rank of #3,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,"SELECT poker_player.money_rank FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY people.height DESC LIMIT 1 )","[(68.0,)]","[(68.0,)]",True
SPIDER_dev_669,poker_player,What is the average earnings of poker players with height higher than 200?,return poker players ;return heights of #1 ;return #1 where #2 is higher than 200 ;return earnings of #3 ;return average of #4,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,"SELECT AVG(poker_player.earnings) FROM poker_player, people WHERE people.people_id = poker_player.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player, people WHERE people.people_id = poker_player.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) AND people.height > 200 )","[(309445.0,)]","[(309445.0,)]",True
SPIDER_dev_67,pets_1,Find the type and weight of the youngest pet.,"return pets ;return #1 that is youngest ;return type of #2 ;return weight of #2 ;return #3, #4","SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","SELECT pets.pettype, pets.weight FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets ) ORDER BY pets.petid DESC LIMIT 1 )","[('dog', 9.3)]","[('dog', 9.3)]",True
SPIDER_dev_670,poker_player,Give average earnings of poker players who are taller than 200.,return poker players ;return #1 taller than 200 ;return earnings of #2 ;return average of #3,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,"SELECT AVG(poker_player.earnings) FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player, people WHERE poker_player.people_id = people.people_id AND people.height = 200 )","[(309445.0,)]","[(None,)]",False
SPIDER_dev_671,poker_player,What are the names of poker players in descending order of earnings?,return poker players ;return names of #1 ;return earnings of #1 ;return #2 sorted by #3 in descending order,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,"SELECT people.name FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.earnings DESC","[('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]","[('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]",True
SPIDER_dev_672,poker_player,Return the names of poker players sorted by their earnings descending.,return poker players ;return names of #1 ;return earnings of #1 ;return #2 sorted by #3 descending,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,"SELECT people.name FROM poker_player, people WHERE poker_player.people_id = people.people_id AND poker_player.poker_player_id IN ( SELECT poker_player.poker_player_id FROM poker_player ) ORDER BY poker_player.earnings DESC","[('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]","[('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]",True
SPIDER_dev_673,poker_player,What are different nationalities of people and the corresponding number of people from each nation?,"return people ;return different nationalities of #1 ;return number of #1 for each #2 ;return #2, #3","SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","SELECT people.nationality, COUNT(people.people_id) FROM people WHERE people.people_id IN ( SELECT people.people_id FROM people ) GROUP BY people.nationality","[('Bulgaria', 1), ('Russia', 6)]","[('Bulgaria', 1), ('Russia', 6)]",True
SPIDER_dev_674,poker_player,How many people are there of each nationality?,return nationalities ;return people of #1 ;return number of #2 for each #1,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","SELECT people.nationality, COUNT(people.people_id) FROM people WHERE people.nationality IN ( SELECT people.nationality FROM people ) GROUP BY people.nationality","[('Bulgaria', 1), ('Russia', 6)]","[('Bulgaria', 1), ('Russia', 6)]",True
SPIDER_dev_675,poker_player,What is the most common nationality of people?,return nationalities ;return people of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,SELECT people.nationality FROM people WHERE people.nationality IN ( SELECT people.nationality FROM people ) GROUP BY people.nationality ORDER BY COUNT(people.people_id) DESC LIMIT 1,"[('Russia',)]","[('Russia',)]",True
SPIDER_dev_676,poker_player,Give the nationality that is most common across all people.,return nationalities ;return people with #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,SELECT people.nationality FROM people WHERE people.nationality IN ( SELECT people.nationality FROM people ) GROUP BY people.nationality ORDER BY COUNT(people.people_id) DESC LIMIT 1,"[('Russia',)]","[('Russia',)]",True
SPIDER_dev_677,poker_player,What are the nationalities that are shared by at least two people?,return nationalities ;return people with #1 ;return number of #2 for each #1 ;return #1 where #3 is at least two,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,SELECT people.nationality FROM people WHERE people.nationality IN ( SELECT people.nationality FROM people ) GROUP BY people.nationality HAVING COUNT(people.people_id) >= 2,"[('Russia',)]","[('Russia',)]",True
SPIDER_dev_678,poker_player,Return the nationalities for which there are two or more people.,return nationalities ;return people of #1 ;return number of #2 for each #1 ;return #1 where #3 is two or more,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,SELECT people.nationality FROM people WHERE people.nationality IN ( SELECT people.nationality FROM people ) GROUP BY people.nationality HAVING COUNT(people.people_id) >= 2,"[('Russia',)]","[('Russia',)]",True
SPIDER_dev_679,poker_player,List the names and birth dates of people in ascending alphabetical order of name.,"return people ;return names of #1 ;return birth dates of #1 ;return #2, #3 ;return #4 sorted by #2 in ascending alphabetical order","SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","SELECT people.name, people.birth_date FROM people WHERE people.people_id IN ( SELECT people.people_id FROM people ) ORDER BY people.name ASC","[('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]","[('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]",True
SPIDER_dev_68,pets_1,"What type of pet is the youngest animal, and how much does it weigh?","return animals ;return #1 that is youngest ;return type of pet of #2 ;return weight of #2 ;return #3, #4","SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","SELECT pets.pettype, pets.weight FROM student, has_pet, pets WHERE has_pet.petid = pets.petid AND student.stuid = has_pet.stuid AND student.lname IN ( SELECT student.lname FROM student, has_pet WHERE student.stuid = has_pet.stuid )","[('dog', 9.3)]","[('cat', 12.0), ('dog', 13.4), ('dog', 9.3)]",False
SPIDER_dev_680,poker_player,"What are the names and birth dates of people, ordered by their names in alphabetical order?","return people ;return names of #1 ;return birth dates of #1 ;return #2, #3 ;return #4 sorted by #2 in alphabetical order","SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","SELECT people.name, people.birth_date FROM people WHERE people.people_id IN ( SELECT people.people_id FROM people ) ORDER BY people.name ASC","[('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]","[('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]",True
SPIDER_dev_681,poker_player,"Show names of people whose nationality is not ""Russia"".",return people ;return nationalities of #1 ;return #1 where #2 is not russia ;return names of #3,"SELECT Name FROM people WHERE Nationality != ""Russia""",SELECT people.name FROM people WHERE people.people_id IN ( SELECT people.people_id FROM people WHERE people.people_id IN ( SELECT people.people_id FROM people ) AND people.nationality != 'Russia' ),"[('Teodor Salparov',)]","[('Teodor Salparov',)]",True
SPIDER_dev_682,poker_player,What are the names of people who are not from Russia?,return people ;return #1 from russia ;return #1 besides #2 ;return names of #3,"SELECT Name FROM people WHERE Nationality != ""Russia""",SELECT people.name FROM people WHERE people.people_id IN ( SELECT people.people_id FROM people WHERE people.people_id NOT IN ( SELECT people.people_id FROM people WHERE people.nationality = 'Russia' ) ),"[('Teodor Salparov',)]","[('Teodor Salparov',)]",True
SPIDER_dev_683,poker_player,List the names of people that are not poker players.,return people ;return #1 that are not poker players ;return names of #2,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),"SELECT people.name FROM poker_player, people WHERE people.people_id = poker_player.people_id AND people.people_id IN ( SELECT people.people_id FROM poker_player, people WHERE people.people_id = poker_player.people_id )","[('Roman Bragin',), ('Sergey Grankin',)]","[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]",False
SPIDER_dev_684,poker_player,What are the names of people who do not play poker?,return people ;return #1 who do not play poker ;return names of #2,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),"SELECT people.name FROM poker_player, people WHERE people.people_id = poker_player.people_id AND people.people_id IN ( SELECT people.people_id FROM poker_player, people WHERE people.people_id = poker_player.people_id )","[('Roman Bragin',), ('Sergey Grankin',)]","[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]",False
SPIDER_dev_685,poker_player,How many distinct nationalities are there?,return nationalities ;return distinct #1 ;return number of #2,SELECT count(DISTINCT Nationality) FROM people,SELECT COUNT(DISTINCT people.nationality) FROM people,"[(2,)]","[(2,)]",True
SPIDER_dev_686,poker_player,Count the number of different nationalities.,return different nationalities ;return count the number of #1,SELECT count(DISTINCT Nationality) FROM people,SELECT DISTINCT people.nationality FROM people WHERE people.nationality IN ( SELECT DISTINCT people.nationality FROM people ),"[(2,)]","[('Russia',), ('Bulgaria',)]",False
SPIDER_dev_687,voter_1,How many states are there?,return states ;return number of #1,SELECT count(*) FROM area_code_state,SELECT COUNT(area_code_state.state) FROM area_code_state,"[(305,)]","[(305,)]",True
SPIDER_dev_688,voter_1,"List the contestant numbers and names, ordered by contestant name descending.","return contestants ;return numbers of #1 ;return names of #1 ;return #2, #3 ;return #4 sorted by #3 descending","SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC","SELECT contestants.contestant_number, contestants.contestant_name FROM contestants WHERE contestants.contestant_number IN ( SELECT contestants.contestant_number FROM contestants ) ORDER BY contestants.contestant_name DESC","[(2, 'Tabatha Gehling'), (8, 'Nita Coster'), (11, 'Loraine NygrenTania Mattioli'), (9, 'Kurt Walser'), (3, 'Kelly Clauss'), (6, 'Jessie Eichman'), (4, 'Jessie Alloway'), (10, 'Ericka Dieter'), (1, 'Edwina Burnam'), (7, 'Allie Rogalski'), (5, 'Alana Bregman')]","[(2, 'Tabatha Gehling'), (8, 'Nita Coster'), (11, 'Loraine NygrenTania Mattioli'), (9, 'Kurt Walser'), (3, 'Kelly Clauss'), (6, 'Jessie Eichman'), (4, 'Jessie Alloway'), (10, 'Ericka Dieter'), (1, 'Edwina Burnam'), (7, 'Allie Rogalski'), (5, 'Alana Bregman')]",True
SPIDER_dev_689,voter_1,"List the vote ids, phone numbers and states of all votes.","return votes ;return vote ids of #1 ;return phone numbers of #1 ;return states of #1 ;return #2, #3, #4","SELECT vote_id ,  phone_number ,  state FROM votes","SELECT votes.vote_id, votes.phone_number, votes.state FROM votes WHERE votes.vote_id IN ( SELECT votes.vote_id FROM votes )","[(1, 7182887233, 'NY'), (2, 7148407040, 'NY'), (3, 6209222712, 'CA'), (5, 5112677315, 'NJ\n')]","[(1, 7182887233, 'NY'), (2, 7148407040, 'NY'), (3, 6209222712, 'CA'), (5, 5112677315, 'NJ\n')]",True
SPIDER_dev_69,pets_1,Find the id and weight of all pets whose age is older than 1.,"return pets ;return ages of #1 ;return #1 where #2 is higher than 1 ;return ids of #3 ;return weights of #3 ;return #4, #5","SELECT petid ,  weight FROM pets WHERE pet_age  >  1","SELECT pets.petid, pets.weight FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets ) AND pets.pet_age > 1 )","[(2001, 12.0), (2002, 13.4)]","[(2001, 12.0), (2002, 13.4)]",True
SPIDER_dev_690,voter_1,What are the maximum and minimum values of area codes?,"return area codes ;return values of #1 ;return maximum of #2 ;return minimum of #2 ;return #3, #4","SELECT max(area_code) ,  min(area_code) FROM area_code_state","SELECT MAX(area_code_state.area_code), MIN(area_code_state.area_code) FROM area_code_state WHERE area_code_state.area_code IN ( SELECT area_code_state.area_code FROM area_code_state )","[(989, 201)]","[(989, 201)]",True
SPIDER_dev_691,voter_1,What is last date created of votes from the state 'CA'?,return votes ;return states of #1 ;return #1 where #2 is 'ca ;return dates created of #3 ;return the last #4,SELECT max(created) FROM votes WHERE state  =  'CA',SELECT MAX(votes.created) FROM votes WHERE votes.vote_id IN ( SELECT votes.vote_id FROM votes WHERE votes.vote_id IN ( SELECT votes.vote_id FROM votes ) AND votes.state = 'CA' ),"[('2018-03-09 19:03:39',)]","[('2018-03-09 19:03:39',)]",True
SPIDER_dev_692,voter_1,What are the names of the contestants whose names are not 'Jessie Alloway',return contestants ;return names of #1 ;return #1 where #2 is not 'jessie alloway ;return names of #3,SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway',SELECT contestants.contestant_name FROM contestants WHERE contestants.contestant_number IN ( SELECT contestants.contestant_number FROM contestants WHERE contestants.contestant_number IN ( SELECT contestants.contestant_number FROM contestants ) AND contestants.contestant_name != 'Jessie Alloway' ),"[('Edwina Burnam',), ('Tabatha Gehling',), ('Kelly Clauss',), ('Alana Bregman',), ('Jessie Eichman',), ('Allie Rogalski',), ('Nita Coster',), ('Kurt Walser',), ('Ericka Dieter',), ('Loraine NygrenTania Mattioli',)]","[('Edwina Burnam',), ('Tabatha Gehling',), ('Kelly Clauss',), ('Alana Bregman',), ('Jessie Eichman',), ('Allie Rogalski',), ('Nita Coster',), ('Kurt Walser',), ('Ericka Dieter',), ('Loraine NygrenTania Mattioli',)]",True
SPIDER_dev_693,voter_1,What are the distinct states and create time of all votes?,"return votes ;return distinct states of #1 ;return create times of #1 ;return #2, #3","SELECT DISTINCT state ,  created FROM votes","SELECT votes.state, votes.created FROM votes WHERE votes.vote_id IN ( SELECT votes.vote_id FROM votes )","[('NY', '2018-03-09 19:03:21'), ('NY', '2018-03-09 19:03:36'), ('CA', '2018-03-09 19:03:39'), ('NJ\n', '2018-03-09 19:03:40')]","[('NY', '2018-03-09 19:03:21'), ('NY', '2018-03-09 19:03:36'), ('CA', '2018-03-09 19:03:39'), ('NJ\n', '2018-03-09 19:03:40')]",True
SPIDER_dev_694,voter_1,What are the contestant numbers and names of the contestants who had at least two votes?,"return contestants ;return votes of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least two ;return contestant numbers of #4 ;return names of #4 ;return #5, #6","SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2","SELECT contestants.contestant_number, contestants.contestant_name FROM votes, contestants WHERE contestants.contestant_number = votes.contestant_number AND contestants.contestant_number IN ( SELECT contestants.contestant_number FROM votes, contestants WHERE contestants.contestant_number = votes.contestant_number AND contestants.contestant_number IN ( SELECT contestants.contestant_number FROM contestants ) GROUP BY contestants.contestant_number HAVING COUNT(votes.vote_id) >= 2 )","[(3, 'Kelly Clauss')]","[(3, 'Kelly Clauss'), (3, 'Kelly Clauss')]",True
SPIDER_dev_695,voter_1,"Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?","return contestants ;return #1 who got voted ;return #1 besides #2 ;return number of #2 for each #3 ;return #3 where #4 is lowest ;return contestant number of #5 ;return name of #5 ;return #6, #7","SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1","SELECT contestants.contestant_number, contestants.contestant_name FROM votes, contestants WHERE contestants.contestant_number = votes.contestant_number AND contestants.contestant_number IN ( SELECT contestants.contestant_number FROM votes, contestants WHERE contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number ORDER BY COUNT(contestants.contestant_number) ASC LIMIT 1 )","[(2, 'Tabatha Gehling')]","[(2, 'Tabatha Gehling')]",True
SPIDER_dev_696,voter_1,What are the number of votes from state 'NY' or 'CA'?,return votes ;return states of #1 ;return #1 where #2 is 'ny ;return #1 where #2 is 'ca ;return #3 or #4 ;return number of #5,SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA',SELECT COUNT(votes.vote_id) FROM votes WHERE votes.vote_id IN ( SELECT votes.vote_id FROM votes ) AND ((votes.state = 'NY') OR (votes.state = 'CA')),"[(3,)]","[(3,)]",True
SPIDER_dev_697,voter_1,How many contestants did not get voted?,return contestants ;return #1 that did get voted ;return #1 besides #2 ;return number of #3,SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ),"SELECT COUNT(contestants.contestant_number) FROM contestants WHERE contestants.contestant_number NOT IN ( SELECT contestants.contestant_number FROM votes, contestants WHERE contestants.contestant_number = votes.contestant_number )","[(8,)]","[(8,)]",True
SPIDER_dev_698,voter_1,What is the area code in which the most voters voted?,return area codes ;return voters that voted in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1,"SELECT area_code_state.area_code FROM votes, area_code_state WHERE area_code_state.state = votes.state AND area_code_state.area_code IN ( SELECT area_code_state.area_code FROM area_code_state ) GROUP BY area_code_state.area_code ORDER BY COUNT(votes.state) DESC LIMIT 1","[(212,)]","[(212,)]",True
SPIDER_dev_699,voter_1,"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?","return votes ;return contestant of #1 ;return #1 where #2 is 'tabatha gehling ;return create dates of #3 ;return states of #3 ;return phone numbers of #3 ;return #4, #5, #6","SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'","SELECT votes.created, votes.state, votes.phone_number FROM votes, contestants WHERE contestants.contestant_number = votes.contestant_number AND votes.vote_id IN ( SELECT votes.vote_id FROM votes, contestants WHERE contestants.contestant_number = votes.contestant_number AND votes.vote_id IN ( SELECT votes.vote_id FROM votes ) AND contestants.contestant_name = 'Tabatha Gehling' )","[('2018-03-09 19:03:21', 'NY', 7182887233)]","[('2018-03-09 19:03:21', 'NY', 7182887233)]",True
SPIDER_dev_7,concert_singer,What are the names and release years for all the songs of the youngest singer?,"return singers ;return #1 that is youngest ;return songs of #2 ;return names of #3 ;return release years of #3 ;return #4, #5","SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","SELECT singer.song_name, singer.song_release_year FROM singer WHERE singer.song_name IN ( SELECT singer.song_name FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) ORDER BY singer.age ASC LIMIT 1 ) )","[('Love', '2016')]","[('Love', '2016')]",True
SPIDER_dev_70,pets_1,What is the id and weight of every pet who is older than 1?,"return pets ;return #1 older than 1 ;return ids of #2 ;return weights of #2 ;return #3, #4","SELECT petid ,  weight FROM pets WHERE pet_age  >  1","SELECT pets.petid, pets.weight FROM pets WHERE pets.petid IN ( SELECT pets.petid FROM pets WHERE pets.pet_age > 1 )","[(2001, 12.0), (2002, 13.4)]","[(2001, 12.0), (2002, 13.4)]",True
SPIDER_dev_700,voter_1,List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.,return voters ;return #1 for contestant 'tabatha gehling ;return #1 for contestant 'kelly clauss ;return #1 of both #2 and #3 ;return area codes of #4,SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss',"SELECT DISTINCT area_code_state.area_code FROM votes, contestants, area_code_state WHERE votes.state = area_code_state.state AND votes.contestant_number = contestants.contestant_number AND votes.state IN ( SELECT DISTINCT votes.state FROM votes, contestants WHERE votes.contestant_number = contestants.contestant_number AND contestants.contestant_name = 'Tabatha Gehling' AND votes.state IN ( SELECT votes.state FROM votes, contestants WHERE votes.contestant_number = contestants.contestant_number AND contestants.contestant_name = 'Kelly Clauss' ) )","[(212,), (315,), (347,), (516,), (518,), (585,), (607,), (631,), (646,), (716,), (718,), (845,), (914,), (917,)]","[(212,), (315,), (347,), (516,), (518,), (585,), (607,), (631,), (646,), (716,), (718,), (845,), (914,), (917,)]",True
SPIDER_dev_701,voter_1,Return the names the contestants whose names contain the substring 'Al'.,return contestants ;return names of #1 ;return #1 where #2 contain substring 'al ;return names of #3,"select contestant_name from contestants where contestant_name like ""%al%""",SELECT contestants.contestant_name FROM contestants WHERE contestants.contestant_number IN ( SELECT contestants.contestant_number FROM contestants WHERE contestants.contestant_number IN ( SELECT contestants.contestant_number FROM contestants ) AND contestants.contestant_name LIKE '%al%' ),"[('Jessie Alloway',), ('Alana Bregman',), ('Allie Rogalski',), ('Kurt Walser',)]","[('Jessie Alloway',), ('Alana Bregman',), ('Allie Rogalski',), ('Kurt Walser',)]",True
SPIDER_dev_702,world_1,What are the names of all the countries that became independent after 1950?,return countries ;return #1 that became independent after 1950 ;return names of #2,SELECT Name FROM country WHERE IndepYear  >  1950,SELECT country.name FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.indepyear > 1950 ),"[('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]","[('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]",True
SPIDER_dev_703,world_1,Give the names of the nations that were founded after 1950.,return nations ;return #1 founded after 1950 ;return names of #2,SELECT Name FROM country WHERE IndepYear  >  1950,SELECT country.name FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.indepyear > 1950 ),"[('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]","[('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]",True
SPIDER_dev_704,world_1,How many countries have a republic as their form of government?,return countries ;return forms of government of #1 ;return #1 where #2 is republic ;return number of #3,"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""",SELECT COUNT(country.code) FROM country WHERE country.code IN ( SELECT country.code FROM country ) AND country.governmentform = 'Republic',"[(122,)]","[(122,)]",True
SPIDER_dev_705,world_1,How many countries have governments that are republics?,return countries ;return governments of #1 ;return #1 where #2 are republics ;return number of #3,"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""",SELECT COUNT(country.code) FROM country WHERE country.code IN ( SELECT country.code FROM country ) AND country.governmentform = 'Republic',"[(122,)]","[(122,)]",True
SPIDER_dev_706,world_1,What is the total surface area of the countries in the Caribbean region?,return countries ;return #1 in the caribbean region ;return surface area of #2 ;return sum of #3,"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""",SELECT SUM(country.surfacearea) FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.region = 'Caribbean' ),"[(234423.0,)]","[(234423.0,)]",True
SPIDER_dev_707,world_1,How much surface area do the countires in the Carribean cover together?,return the carribean ;return countires of #1 ;return surface area that #2 cover together ;return sum of #3,"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""",SELECT sqlite_sequence.seq FROM sqlite_sequence,"[(234423.0,)]","[(4079,)]",False
SPIDER_dev_708,world_1,Which continent is Anguilla in?,return anguilla ;return continent of #1,"SELECT Continent FROM country WHERE Name  =  ""Anguilla""",SELECT country.continent FROM country WHERE country.name IN ( SELECT country.name FROM country WHERE country.name = 'Anguilla' ),"[('North America',)]","[('North America',)]",True
SPIDER_dev_709,world_1,What is the continent name which Anguilla belongs to?,return anguilla ;return continent of #1 ;return name of #2,"SELECT Continent FROM country WHERE Name  =  ""Anguilla""",SELECT country.continent FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.name IN ( SELECT country.name FROM country WHERE country.name = 'Anguilla' ) ),"[('North America',)]","[('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',), ('North America',)]",True
SPIDER_dev_71,pets_1,Find the average and maximum age for each type of pet.,"return types of pets ;return ages of #1 ;return average of #2 for each #1 ;return maximum of #2 for each #1 ;return #3, #4","SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets WHERE pets.pettype IN ( SELECT pets.pettype FROM pets ) GROUP BY pets.pettype","[(3.0, 3, 'cat'), (1.5, 2, 'dog')]","[('cat', 3.0, 3), ('dog', 1.5, 2)]",True
SPIDER_dev_710,world_1,Which region is the city Kabul located in?,return the city kabul ;return region of #1,"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""","SELECT country.region FROM country, city WHERE city.countrycode = country.code AND city.name IN ( SELECT city.name FROM city WHERE city.name = 'Kabul' )","[('Southern and Central Asia',)]","[('Southern and Central Asia',)]",True
SPIDER_dev_711,world_1,What region is Kabul in?,return kabul ;return region of #1,"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""","SELECT country.region FROM country, city WHERE city.countrycode = country.code AND city.name IN ( SELECT city.name FROM city WHERE city.name = 'Kabul' )","[('Southern and Central Asia',)]","[('Southern and Central Asia',)]",True
SPIDER_dev_712,world_1,Which language is the most popular in Aruba?,return aruba ;return languages of #1 ;return how popular #2 are ;return #2 where #3 is the most popular,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1","SELECT countrylanguage.countrycode FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.countrycode IN ( SELECT countrylanguage.countrycode FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.name IN ( SELECT country.name FROM country WHERE country.name = 'Aruba' ) ) AND country.name IN ( SELECT country.name FROM country WHERE country.name = 'Aruba' ) ORDER BY countrylanguage.isofficial DESC LIMIT 1","[('Papiamento',)]","[('ABW',)]",False
SPIDER_dev_713,world_1,What language is predominantly spoken in Aruba?,return aruba ;return predominantly spoken languages of #1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1","SELECT countrylanguage.countrycode FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.name IN ( SELECT country.name FROM country WHERE country.name = 'Aruba' )","[('Papiamento',)]","[('ABW',), ('ABW',), ('ABW',), ('ABW',)]",False
SPIDER_dev_714,world_1,What are the population and life expectancies in Brazil?,"return brazil ;return population of #1 ;return life expectancies of #1 ;return #2, #3","SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  ""Brazil""","SELECT country.population, country.lifeexpectancy FROM country WHERE country.name IN ( SELECT country.name FROM country WHERE country.name = 'Brazil' )","[(170115000, 62.9)]","[(170115000, 62.9)]",True
SPIDER_dev_715,world_1,Give me Brazil’s population and life expectancies.,"return brazil ;return population of #1 ;return life expectancies of #1 ;return #2, #3","SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  ""Brazil""","SELECT country.population, country.lifeexpectancy FROM country WHERE country.name IN ( SELECT country.name FROM country WHERE country.name = 'Brazil' )","[(170115000, 62.9)]","[(170115000, 62.9)]",True
SPIDER_dev_716,world_1,What are the region and population of Angola?,"return angola ;return region of #1 ;return population of #1 ;return #2, #3","SELECT Population ,  Region FROM country WHERE Name  =  ""Angola""","SELECT country.region, country.population FROM country WHERE country.name IN ( SELECT country.name FROM country WHERE country.name = 'Angola' )","[(12878000, 'Central Africa')]","[('Central Africa', 12878000)]",True
SPIDER_dev_717,world_1,What region does Angola belong to and what is its population?,"return angola ;return region of #1 ;return population of #2 ;return #2, #3","SELECT Population ,  Region FROM country WHERE Name  =  ""Angola""","SELECT country.region, country.population FROM country WHERE country.name IN ( SELECT country.name FROM country WHERE country.name = 'Angola' ) AND country.region IN ( SELECT country.region FROM country WHERE country.name IN ( SELECT country.name FROM country WHERE country.name = 'Angola' ) )","[(12878000, 'Central Africa')]","[('Central Africa', 12878000)]",True
SPIDER_dev_718,world_1,What is the average expected life expectancy for countries in the region of Central Africa?,return countries ;return #1 in the region of central africa ;return expected life expectancy of #2 ;return average of #3,"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""",SELECT AVG(country.lifeexpectancy) FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.region = 'Central Africa' ),"[(50.31111111111111,)]","[(50.31111111111111,)]",True
SPIDER_dev_719,world_1,How long is the people’s average life expectancy in Central Africa?,return central africa ;return people of #1 ;return life expectancy of #2 ;return average of #3,"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""",SELECT AVG(country.lifeexpectancy) FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.region IN ( SELECT country.region FROM country WHERE country.region = 'Central Africa' ) ),"[(50.31111111111111,)]","[(50.31111111111111,)]",True
SPIDER_dev_72,pets_1,What is the average and maximum age for each pet type?,"return pet types ;return ages of #1 ;return average of #2 for each #1 ;return maximum of #2 for each #1 ;return #3, #4","SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","SELECT pets.pettype, AVG(pets.pet_age), MAX(pets.pet_age) FROM pets WHERE pets.pettype IN ( SELECT pets.pettype FROM pets ) GROUP BY pets.pettype","[(3.0, 3, 'cat'), (1.5, 2, 'dog')]","[('cat', 3.0, 3), ('dog', 1.5, 2)]",True
SPIDER_dev_720,world_1,What is the name of country that has the shortest life expectancy in Asia?,return countries ;return life expectancy of #1 ;return #2 in asia ;return #1 where #3 is shortest ;return name of #4,"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1",SELECT country.name FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) AND country.continent = 'Asia' ORDER BY country.lifeexpectancy ASC LIMIT 1 ),"[('Afghanistan',)]","[('Afghanistan',)]",True
SPIDER_dev_721,world_1,Give the name of the country in Asia with the lowest life expectancy.,return countries ;return #1 in asia ;return life expectancy of #2 ;return #2 where #3 is lowest ;return name of #4,"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1",SELECT country.name FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.continent = 'Asia' ) AND country.continent = 'Asia' ORDER BY country.lifeexpectancy ASC LIMIT 1 ),"[('Afghanistan',)]","[('Afghanistan',)]",True
SPIDER_dev_722,world_1,What is the total population and maximum GNP in Asia?,"return asia ;return population of #1 ;return sum of #2 ;return gnp of #1 ;return maximum of #4 ;return #3, #5","SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  ""Asia""","SELECT SUM(country.population), MAX(country.gnp) FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Asia' )","[(3705025700, 3787042.0)]","[(3705025700, 3787042.0)]",True
SPIDER_dev_723,world_1,"How many people live in Asia, and what is the largest GNP among them?","return asia ;return people that live in #1 ;return number of #2 ;return gnps of #2 ;return the largest #4 ;return #3, #5","SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  ""Asia""","SELECT SUM(country.population), MAX(country.gnp) FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Asia' ) AND country.population IN ( SELECT country.population FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Asia' ) )","[(3705025700, 3787042.0)]","[(3705025700, 3787042.0)]",True
SPIDER_dev_724,world_1,What is the average life expectancy in African countries that are republics?,return african countries ;return #1 that are republics ;return life expectancy of #2 ;return average of #3,"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""",SELECT AVG(country.lifeexpectancy) FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Africa' AND country.governmentform = 'Republic' ),"[(50.84347826086956,)]","[(52.571929824561394,)]",False
SPIDER_dev_725,world_1,Give the average life expectancy for countries in Africa which are republics?,return africa ;return countries of #1 ;return #2 which are republics ;return life expectancy of #3 ;return average of #4,"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""",SELECT AVG(country.lifeexpectancy) FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Africa' ) AND country.governmentform = 'Republic' ),"[(50.84347826086956,)]","[(50.84347826086956,)]",True
SPIDER_dev_726,world_1,What is the total surface area of the continents Asia and Europe?,return continents ;return surface areas of #1 ;return #2 where #1 is asia ;return #2 where #1 is europe ;return sum of #3 and #4,"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""",SELECT (SELECT country.surfacearea FROM country WHERE country.continent IN ( SELECT country.continent FROM country ) AND country.continent = 'Asia') + (SELECT country.surfacearea FROM country WHERE country.continent IN ( SELECT country.continent FROM country ) AND country.continent = 'Europe'),"[(54930138.9,)]","[(680838.0,)]",False
SPIDER_dev_727,world_1,Give the total surface area covered by countries in Asia or Europe.,return countries ;return #1 in asia ;return #1 in europe ;return #2 or #3 ;return surface area covered of #4 ;return sum of #5,"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""",SELECT SUM(country.surfacearea) FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE ((country.continent = 'Asia') OR (country.continent = 'Europe')) ),"[(54930138.9,)]","[(54930138.9,)]",True
SPIDER_dev_728,world_1,How many people live in Gelderland district?,return people ;return districts of #1 ;return #1 where #2 is gelderland ;return number of #3,"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""",SELECT SUM(city.population) FROM city WHERE city.population IN ( SELECT city.population FROM city ) AND city.district = 'Gelderland',"[(545548,)]","[(545548,)]",True
SPIDER_dev_729,world_1,What is the total population of Gelderland district?,return gelderland district ;return population of #1,"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""",SELECT city.population FROM city WHERE city.district IN ( SELECT city.district FROM city WHERE city.district = 'Gelderland' ),"[(545548,)]","[(153491,), (152463,), (138020,), (101574,)]",False
SPIDER_dev_73,pets_1,Find the average weight for each pet type.,return pet types ;return weights of #1 ;return average of #2 for each #1,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","SELECT pets.pettype, AVG(pets.weight) FROM pets WHERE pets.pettype IN ( SELECT pets.pettype FROM pets ) GROUP BY pets.pettype","[(12.0, 'cat'), (11.350000000000001, 'dog')]","[('cat', 12.0), ('dog', 11.350000000000001)]",True
SPIDER_dev_730,world_1,What is the average GNP and total population in all nations whose government is US territory?,"return nations ;return governments of #1 ;return #1 where #2 is us territory ;return gnp of #3 ;return average of #4 ;return populations of #3 ;return sum of #6 ;return #5, #7","SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  ""US Territory""","SELECT AVG(country.gnp), SUM(country.population) FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) AND country.governmentform = 'US Territory' )","[(510.3333333333333, 329000)]","[(510.3333333333333, 329000)]",True
SPIDER_dev_731,world_1,Give the mean GNP and total population of nations which are considered US territory.,"return nations ;return #1 which are considered us territory ;return mean gnp of #2 ;return total population of #2 ;return #3, #4","SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  ""US Territory""","SELECT country.gnp, country.population FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.governmentform = 'US Territory' )","[(510.3333333333333, 329000)]","[(334.0, 68000), (1197.0, 168000), (0.0, 93000)]",False
SPIDER_dev_732,world_1,How many unique languages are spoken in the world?,return languages ;return unique #1 ;return number of #2,SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,SELECT COUNT(DISTINCT countrylanguage.language) FROM countrylanguage WHERE countrylanguage.language IN ( SELECT countrylanguage.language FROM countrylanguage ),"[(457,)]","[(457,)]",True
SPIDER_dev_733,world_1,What is the number of distinct languages used around the world?,return languages ;return #1 used around the world ;return distinct #2 ;return number of #3,SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,SELECT COUNT(DISTINCT countrylanguage.language) FROM countrylanguage,"[(457,)]","[(457,)]",True
SPIDER_dev_734,world_1,How many type of governments are in Africa?,return governments ;return #1 in africa ;return types of #2 ;return number of #3,"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""",SELECT COUNT(DISTINCT country.governmentform) FROM country WHERE country.governmentform IN ( SELECT country.governmentform FROM country WHERE country.continent = 'Africa' ),"[(10,)]","[(10,)]",True
SPIDER_dev_735,world_1,How many different forms of governments are there in Africa?,return africa ;return forms of governments in #1 ;return different #2 ;return number of #3,"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""",SELECT COUNT(DISTINCT country.governmentform) FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Africa' ),"[(10,)]","[(10,)]",True
SPIDER_dev_736,world_1,What is the total number of languages used in Aruba?,return aruba ;return languages used in #1 ;return number of #2,"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""","SELECT COUNT(countrylanguage.countrycode) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.name IN ( SELECT country.name FROM country WHERE country.name = 'Aruba' )","[(4,)]","[(4,)]",True
SPIDER_dev_737,world_1,How many languages are spoken in Aruba?,return aruba ;return languages spoken in #1 ;return number of #2,"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""","SELECT COUNT(countrylanguage.countrycode) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.name IN ( SELECT country.name FROM country WHERE country.name = 'Aruba' )","[(4,)]","[(4,)]",True
SPIDER_dev_738,world_1,How many official languages does Afghanistan have?,return afghanistan ;return official languages of #1 ;return number of #2,"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""",,"[(2,)]",ERROR,False
SPIDER_dev_739,world_1,How many official languages are spoken in Afghanistan?,return afghanistan ;return official languages of #1 ;return number of #2,"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""",,"[(2,)]",ERROR,False
SPIDER_dev_74,pets_1,What is the average weight for each type of pet?,return types of pets ;return pets with #1 ;return weight of #2 ;return average of #3 for each #1,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","SELECT pets.pettype, AVG(pets.weight) FROM pets WHERE pets.pettype IN ( SELECT pets.pettype FROM pets WHERE pets.pettype IN ( SELECT pets.pettype FROM pets ) ) GROUP BY pets.pettype","[(12.0, 'cat'), (11.350000000000001, 'dog')]","[('cat', 12.0), ('dog', 11.350000000000001)]",True
SPIDER_dev_740,world_1,What is name of the country that speaks the largest number of languages?,return countries ;return languages of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,"SELECT country.name FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.capital IN ( SELECT country.capital FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.capital IN ( SELECT country.capital FROM country ) GROUP BY country.capital ORDER BY COUNT(countrylanguage.countrycode) DESC LIMIT 1 )","[('United States',)]","[('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',)]",True
SPIDER_dev_741,world_1,Give the name of the nation that uses the greatest amount of languages.,return nations ;return languages of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,"SELECT country.name FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.capital IN ( SELECT country.capital FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.capital IN ( SELECT country.capital FROM country ) GROUP BY country.capital ORDER BY COUNT(countrylanguage.language) DESC LIMIT 1 )","[('United States',)]","[('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',), ('United States',)]",True
SPIDER_dev_742,world_1,Which continent has the most diverse languages?,return continents ;return languages of #1 ;return number of diverse #2 for each #1 ;return #1 where #3 is highest,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"SELECT country.continent FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.continent IN ( SELECT country.continent FROM country ) GROUP BY country.continent ORDER BY COUNT(countrylanguage.language) DESC LIMIT 1","[('Africa',)]","[('Africa',)]",True
SPIDER_dev_743,world_1,Which continent speaks the most languages?,return continents ;return languages of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"SELECT country.continent FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.continent IN ( SELECT country.continent FROM country ) GROUP BY country.continent ORDER BY COUNT(countrylanguage.language) DESC LIMIT 1","[('Africa',)]","[('Africa',)]",True
SPIDER_dev_744,world_1,How many countries speak both English and Dutch?,return countries ;return #1 that speak english ;return #1 that speak dutch ;return #1 in both #2 and #3 ;return number of #4,"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"")","SELECT COUNT(DISTINCT country.code) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' AND country.code IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'Dutch' )","[(3,)]","[(3,)]",True
SPIDER_dev_745,world_1,What is the number of nations that use English and Dutch?,return nations ;return #1 that use english ;return #1 that use dutch ;return #1 in both #2 and #3 ;return number of #4,"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"")","SELECT COUNT(DISTINCT country.code) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' AND country.code IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'Dutch' )","[(3,)]","[(3,)]",True
SPIDER_dev_746,world_1,What are the names of nations speak both English and French?,return nations ;return #1 that speak english ;return #1 that speak french ;return #1 in both #2 and #3 ;return names of #4,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""","SELECT DISTINCT country.name FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT DISTINCT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' AND country.code IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'French' ) )","[('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Vanuatu',), ('Virgin Islands, U.S.',)]","[('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Virgin Islands, U.S.',), ('Vanuatu',)]",True
SPIDER_dev_747,world_1,Give the names of nations that speak both English and French.,return nations ;return #1 that speak english ;return #1 that speak french ;return #1 in both #2 and #3 ;return names of #4,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""","SELECT DISTINCT country.name FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT DISTINCT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' AND country.code IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'French' ) )","[('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Vanuatu',), ('Virgin Islands, U.S.',)]","[('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Virgin Islands, U.S.',), ('Vanuatu',)]",True
SPIDER_dev_748,world_1,What are the names of nations where both English and French are official languages?,return nations ;return official languages of #1 ;return #1 where english is #2 ;return #1 where french is official language ;return #1 in both #3 and #4 ;return names of #5,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""",ERROR,"[('Canada',), ('Seychelles',), ('Vanuatu',)]",ERROR,False
SPIDER_dev_749,world_1,Give the names of countries with English and French as official languages.,return countries ;return official languages of #1 ;return #1 where #2 is english ;return #1 where #2 is french ;return #1 of both #3 and #4 ;return names of #5,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""",SELECT DISTINCT countrylanguage.language FROM countrylanguage WHERE countrylanguage.isofficial IN ( SELECT DISTINCT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 'T' ) AND countrylanguage.isofficial = 'T' AND countrylanguage.language = 'English' AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 'T' ) AND countrylanguage.isofficial = 'T' AND countrylanguage.language = 'French' ) ),"[('Canada',), ('Seychelles',), ('Vanuatu',)]","[('Dutch',), ('Dari',), ('Pashto',), ('English',), ('Albaniana',), ('Catalan',), ('Papiamento',), ('Arabic',), ('Spanish',), ('Armenian',), ('Samoan',), ('German',), ('Azerbaijani',), ('French',), ('Kirundi',), ('Bengali',), ('Bulgariana',), ('Serbo-Croatian',), ('Belorussian',), ('Russian',), ('Aimará',), ('Ketšua',), ('Portuguese',), ('Malay',), ('Dzongkha',), ('Italian',), ('Romansh',), ('Chinese',), ('Maori',), ('Comorian',), ('Greek',), ('Turkish',), ('Czech',), ('Danish',), ('Tigrinja',), ('Estonian',), ('Finnish',), ('Swedish',), ('Fijian',), ('Faroese',), ('Georgiana',), ('Greenlandic',), ('Chamorro',), ('Hungarian',), ('Hindi',), ('Irish',), ('Persian',), ('Icelandic',), ('Hebrew',), ('Japanese',), ('Kazakh',), ('Kirgiz',), ('Khmer',), ('Kiribati',), ('Korean',), ('Lao',), ('Singali',), ('Tamil',), ('Sotho',), ('Lithuanian',), ('Luxembourgish',), ('Latvian',), ('Romanian',), ('Malagasy',), ('Dhivehi',), ('Marshallese',), ('Macedonian',), ('Maltese',), ('Burmese',), ('Mongolian',), ('Chichewa',), ('Norwegian',), ('Nepali',), ('Nauru',), ('Urdu',), ('Pilipino',), ('Palau',), ('Polish',), ('Guaraní',), ('Romani',), ('Rwanda',), ('Wolof',), ('Somali',), ('Slovak',), ('Slovene',), ('Swazi',), ('Ewe',), ('Kabyé',), ('Thai',), ('Tadzhik',), ('Turkmenian',), ('Tongan',), ('Tuvalu',), ('Mandarin Chinese',), ('Swahili',), ('Ukrainian',), ('Uzbek',), ('Vietnamese',), ('Bislama',), ('Afrikaans',), ('Xhosa',), ('Zulu',)]",False
SPIDER_dev_75,pets_1,Find the first name and age of students who have a pet.,"return students ;return #1 who have a pet ;return first name of #2 ;return ages of #2 ;return #3, #4","SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","SELECT student.fname, student.age FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid )","[('Linda', 18), ('Tracy', 19)]","[('Linda', 18), ('Tracy', 19), ('Tracy', 19)]",True
SPIDER_dev_750,world_1,What is the number of distinct continents where Chinese is spoken?,return continents ;return #1 where chinese is spoken ;return distinct #2 ;return number of #3,"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""","SELECT COUNT(DISTINCT country.continent) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'Chinese'","[(4,)]","[(4,)]",True
SPIDER_dev_751,world_1,How many continents speak Chinese?,return continents ;return #1 that speak chinese ;return number of #2,"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""","SELECT COUNT(DISTINCT country.continent) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'Chinese'","[(4,)]","[(4,)]",True
SPIDER_dev_752,world_1,What are the regions that use English or Dutch?,return regions ;return #1 that use english ;return #1 that use dutch ;return #2 or #3,"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""","SELECT country.region FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND ((countrylanguage.language = 'English') OR (countrylanguage.language = 'Dutch'))","[('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Southeast Asia',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Southern and Central Asia',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]","[('Caribbean',), ('Caribbean',), ('Caribbean',), ('Caribbean',), ('Caribbean',), ('Polynesia',), ('Caribbean',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Caribbean',), ('Southeast Asia',), ('North America',), ('North America',), ('Australia and New Zealand',), ('Polynesia',), ('Australia and New Zealand',), ('Caribbean',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('British Islands',), ('Nordic Countries',), ('Eastern Asia',), ('Caribbean',), ('Middle East',), ('Caribbean',), ('Southern Africa',), ('Eastern Asia',), ('Western Europe',), ('Southern and Central Asia',), ('Micronesia',), ('Southern Europe',), ('Micronesia',), ('Caribbean',), ('Southeast Asia',), ('Australia and New Zealand',), ('Polynesia',), ('Western Europe',), ('Nordic Countries',), ('Micronesia',), ('Australia and New Zealand',), ('Micronesia',), ('Caribbean',), ('Western Africa',), ('Eastern Africa',), ('Caribbean',), ('Polynesia',), ('Polynesia',), ('Caribbean',), ('Polynesia',), ('Micronesia/Caribbean',), ('North America',), ('Caribbean',), ('Caribbean',), ('Caribbean',), ('Melanesia',), ('Polynesia',), ('Southern Africa',), ('Eastern Africa',)]",True
SPIDER_dev_753,world_1,Which regions speak Dutch or English?,"return regions ;return #1 that speak dutch ;return #1 that speak english ;return #2, #3","SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""","SELECT country.region FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND ((countrylanguage.language = 'Dutch') OR (countrylanguage.language = 'English'))","[('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Southeast Asia',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Southern and Central Asia',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]","[('Caribbean',), ('Caribbean',), ('Caribbean',), ('Caribbean',), ('Caribbean',), ('Polynesia',), ('Caribbean',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Caribbean',), ('Southeast Asia',), ('North America',), ('North America',), ('Australia and New Zealand',), ('Polynesia',), ('Australia and New Zealand',), ('Caribbean',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('British Islands',), ('Nordic Countries',), ('Eastern Asia',), ('Caribbean',), ('Middle East',), ('Caribbean',), ('Southern Africa',), ('Eastern Asia',), ('Western Europe',), ('Southern and Central Asia',), ('Micronesia',), ('Southern Europe',), ('Micronesia',), ('Caribbean',), ('Southeast Asia',), ('Australia and New Zealand',), ('Polynesia',), ('Western Europe',), ('Nordic Countries',), ('Micronesia',), ('Australia and New Zealand',), ('Micronesia',), ('Caribbean',), ('Western Africa',), ('Eastern Africa',), ('Caribbean',), ('Polynesia',), ('Polynesia',), ('Caribbean',), ('Polynesia',), ('Micronesia/Caribbean',), ('North America',), ('Caribbean',), ('Caribbean',), ('Caribbean',), ('Melanesia',), ('Polynesia',), ('Southern Africa',), ('Eastern Africa',)]",True
SPIDER_dev_754,world_1,What are the countries where either English or Dutch is the official language?,return countries ;return official languages of #1 ;return #1 where #2 is english ;return #1 where #2 is dutch ;return #3 or #4,"select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  ""english"" and isofficial  =  ""t"" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  ""dutch"" and isofficial  =  ""t""",SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 't' ) AND countrylanguage.isofficial = 't' AND ((countrylanguage.language = 'english') OR (countrylanguage.language = 'dutch')),[],[],True
SPIDER_dev_755,world_1,Which countries have either English or Dutch as an official language?,return countries ;return official languages of #1 ;return #1 where #2 is english ;return #1 where #2 is dutch ;return #3 or #4,"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND IsOfficial  =  ""T"" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"" AND IsOfficial  =  ""T""",SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 'T' AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 'T' ) AND ((countrylanguage.language = 'English') OR (countrylanguage.language = 'Dutch')),"[('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW', 'ABW', 'Dutch', 'T', 5.3), ('AIA', 'Anguilla', 'North America', 'Caribbean', 96.0, None, 8000, 76.1, 63.2, None, 'Anguilla', 'Dependent Territory of the UK', 'Elisabeth II', 62, 'AI', 'AIA', 'English', 'T', 0.0), ('ANT', 'Netherlands Antilles', 'North America', 'Caribbean', 800.0, None, 217000, 74.7, 1941.0, None, 'Nederlandse Antillen', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 33, 'AN', 'ANT', 'Dutch', 'T', 0.0), ('ASM', 'American Samoa', 'Oceania', 'Polynesia', 199.0, None, 68000, 75.1, 334.0, None, 'Amerika Samoa', 'US Territory', 'George W. Bush', 54, 'AS', 'ASM', 'English', 'T', 3.1), ('ATG', 'Antigua and Barbuda', 'North America', 'Caribbean', 442.0, 1981, 68000, 70.5, 612.0, 584.0, 'Antigua and Barbuda', 'Constitutional Monarchy', 'Elisabeth II', 63, 'AG', 'ATG', 'English', 'T', 0.0), ('AUS', 'Australia', 'Oceania', 'Australia and New Zealand', 7741220.0, 1901, 18886000, 79.8, 351182.0, 392911.0, 'Australia', 'Constitutional Monarchy, Federation', 'Elisabeth II', 135, 'AU', 'AUS', 'English', 'T', 81.2), ('BEL', 'Belgium', 'Europe', 'Western Europe', 30518.0, 1830, 10239000, 77.8, 249704.0, 243948.0, 'België/Belgique', 'Constitutional Monarchy, Federation', 'Albert II', 179, 'BE', 'BEL', 'Dutch', 'T', 59.2), ('BLZ', 'Belize', 'North America', 'Central America', 22696.0, 1981, 241000, 70.9, 630.0, 616.0, 'Belize', 'Constitutional Monarchy', 'Elisabeth II', 185, 'BZ', 'BLZ', 'English', 'T', 50.8), ('BMU', 'Bermuda', 'North America', 'North America', 53.0, None, 65000, 76.9, 2328.0, 2190.0, 'Bermuda', 'Dependent Territory of the UK', 'Elisabeth II', 191, 'BM', 'BMU', 'English', 'T', 100.0), ('BRB', 'Barbados', 'North America', 'Caribbean', 430.0, 1966, 270000, 73.0, 2223.0, 2186.0, 'Barbados', 'Constitutional Monarchy', 'Elisabeth II', 174, 'BB', 'BRB', 'English', 'T', 0.0), ('CAN', 'Canada', 'North America', 'North America', 9970610.0, 1867, 31147000, 79.4, 598862.0, 625626.0, 'Canada', 'Constitutional Monarchy, Federation', 'Elisabeth II', 1822, 'CA', 'CAN', 'English', 'T', 60.4), ('CCK', 'Cocos (Keeling) Islands', 'Oceania', 'Australia and New Zealand', 14.0, None, 600, None, 0.0, None, 'Cocos (Keeling) Islands', 'Territory of Australia', 'Elisabeth II', 2317, 'CC', 'CCK', 'English', 'T', 0.0), ('CXR', 'Christmas Island', 'Oceania', 'Australia and New Zealand', 135.0, None, 2500, None, 0.0, None, 'Christmas Island', 'Territory of Australia', 'Elisabeth II', 1791, 'CX', 'CXR', 'English', 'T', 0.0), ('CYM', 'Cayman Islands', 'North America', 'Caribbean', 264.0, None, 38000, 78.9, 1263.0, 1186.0, 'Cayman Islands', 'Dependent Territory of the UK', 'Elisabeth II', 553, 'KY', 'CYM', 'English', 'T', 0.0), ('FLK', 'Falkland Islands', 'South America', 'South America', 12173.0, None, 2000, None, 0.0, None, 'Falkland Islands', 'Dependent Territory of the UK', 'Elisabeth II', 763, 'FK', 'FLK', 'English', 'T', 0.0), ('GBR', 'United Kingdom', 'Europe', 'British Islands', 242900.0, 1066, 59623400, 77.7, 1378330.0, 1296830.0, 'United Kingdom', 'Constitutional Monarchy', 'Elisabeth II', 456, 'GB', 'GBR', 'English', 'T', 97.3), ('GIB', 'Gibraltar', 'Europe', 'Southern Europe', 6.0, None, 25000, 79.0, 258.0, None, 'Gibraltar', 'Dependent Territory of the UK', 'Elisabeth II', 915, 'GI', 'GIB', 'English', 'T', 88.9), ('GUM', 'Guam', 'Oceania', 'Micronesia', 549.0, None, 168000, 77.8, 1197.0, 1136.0, 'Guam', 'US Territory', 'George W. Bush', 921, 'GU', 'GUM', 'English', 'T', 37.5), ('HKG', 'Hong Kong', 'Asia', 'Eastern Asia', 1075.0, None, 6782000, 79.5, 166448.0, 173610.0, 'Xianggang/Hong Kong', 'Special Administrative Region of China', 'Jiang Zemin', 937, 'HK', 'HKG', 'English', 'T', 2.2), ('IRL', 'Ireland', 'Europe', 'British Islands', 70273.0, 1921, 3775100, 76.8, 75921.0, 73132.0, 'Ireland/Éire', 'Republic', 'Mary McAleese', 1447, 'IE', 'IRL', 'English', 'T', 98.4), ('KNA', 'Saint Kitts and Nevis', 'North America', 'Caribbean', 261.0, 1983, 38000, 70.7, 299.0, None, 'Saint Kitts and Nevis', 'Constitutional Monarchy', 'Elisabeth II', 3064, 'KN', 'KNA', 'English', 'T', 0.0), ('LCA', 'Saint Lucia', 'North America', 'Caribbean', 622.0, 1979, 154000, 72.3, 571.0, None, 'Saint Lucia', 'Constitutional Monarchy', 'Elisabeth II', 3065, 'LC', 'LCA', 'English', 'T', 20.0), ('LSO', 'Lesotho', 'Africa', 'Southern Africa', 30355.0, 1966, 2153000, 50.8, 1061.0, 1161.0, 'Lesotho', 'Constitutional Monarchy', 'Letsie III', 2437, 'LS', 'LSO', 'English', 'T', 0.0), ('MHL', 'Marshall Islands', 'Oceania', 'Micronesia', 181.0, 1990, 64000, 65.5, 97.0, None, 'Marshall Islands/Majol', 'Republic', 'Kessai Note', 2507, 'MH', 'MHL', 'English', 'T', 0.0), ('MLT', 'Malta', 'Europe', 'Southern Europe', 316.0, 1964, 380200, 77.9, 3512.0, 3338.0, 'Malta', 'Republic', 'Guido de Marco', 2484, 'MT', 'MLT', 'English', 'T', 2.1), ('MNP', 'Northern Mariana Islands', 'Oceania', 'Micronesia', 464.0, None, 78000, 75.5, 0.0, None, 'Northern Mariana Islands', 'Commonwealth of the US', 'George W. Bush', 2913, 'MP', 'MNP', 'English', 'T', 4.8), ('MSR', 'Montserrat', 'North America', 'Caribbean', 102.0, None, 11000, 78.0, 109.0, None, 'Montserrat', 'Dependent Territory of the UK', 'Elisabeth II', 2697, 'MS', 'MSR', 'English', 'T', 0.0), ('NFK', 'Norfolk Island', 'Oceania', 'Australia and New Zealand', 36.0, None, 2000, None, 0.0, None, 'Norfolk Island', 'Territory of Australia', 'Elisabeth II', 2806, 'NF', 'NFK', 'English', 'T', 0.0), ('NIU', 'Niue', 'Oceania', 'Polynesia', 260.0, None, 2000, None, 0.0, None, 'Niue', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 2805, 'NU', 'NIU', 'English', 'T', 0.0), ('NLD', 'Netherlands', 'Europe', 'Western Europe', 41526.0, 1581, 15864000, 78.3, 371362.0, 360478.0, 'Nederland', 'Constitutional Monarchy', 'Beatrix', 5, 'NL', 'NLD', 'Dutch', 'T', 95.6), ('NRU', 'Nauru', 'Oceania', 'Micronesia', 21.0, 1968, 12000, 60.8, 197.0, None, 'Naoero/Nauru', 'Republic', 'Bernard Dowiyogo', 2728, 'NR', 'NRU', 'English', 'T', 7.5), ('NZL', 'New Zealand', 'Oceania', 'Australia and New Zealand', 270534.0, 1907, 3862000, 77.8, 54669.0, 64960.0, 'New Zealand/Aotearoa', 'Constitutional Monarchy', 'Elisabeth II', 3499, 'NZ', 'NZL', 'English', 'T', 87.0), ('PLW', 'Palau', 'Oceania', 'Micronesia', 459.0, 1994, 19000, 68.6, 105.0, None, 'Belau/Palau', 'Republic', 'Kuniwo Nakamura', 2881, 'PW', 'PLW', 'English', 'T', 3.2), ('SHN', 'Saint Helena', 'Africa', 'Western Africa', 314.0, None, 6000, 76.8, 0.0, None, 'Saint Helena', 'Dependent Territory of the UK', 'Elisabeth II', 3063, 'SH', 'SHN', 'English', 'T', 0.0), ('SYC', 'Seychelles', 'Africa', 'Eastern Africa', 455.0, 1976, 77000, 70.4, 536.0, 539.0, 'Sesel/Seychelles', 'Republic', 'France-Albert René', 3206, 'SC', 'SYC', 'English', 'T', 3.8), ('TCA', 'Turks and Caicos Islands', 'North America', 'Caribbean', 430.0, None, 17000, 73.3, 96.0, None, 'The Turks and Caicos Islands', 'Dependent Territory of the UK', 'Elisabeth II', 3423, 'TC', 'TCA', 'English', 'T', 0.0), ('TKL', 'Tokelau', 'Oceania', 'Polynesia', 12.0, None, 2000, None, 0.0, None, 'Tokelau', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 3333, 'TK', 'TKL', 'English', 'T', 0.0), ('TON', 'Tonga', 'Oceania', 'Polynesia', 650.0, 1970, 99000, 67.9, 146.0, 170.0, 'Tonga', 'Monarchy', ""Taufa'ahau Tupou IV"", 3334, 'TO', 'TON', 'English', 'T', 0.0), ('TUV', 'Tuvalu', 'Oceania', 'Polynesia', 26.0, 1978, 12000, 66.3, 6.0, None, 'Tuvalu', 'Constitutional Monarchy', 'Elisabeth II', 3424, 'TV', 'TUV', 'English', 'T', 0.0), ('UMI', 'United States Minor Outlying Islands', 'Oceania', 'Micronesia/Caribbean', 16.0, None, 0, None, 0.0, None, 'United States Minor Outlying Islands', 'Dependent Territory of the US', 'George W. Bush', None, 'UM', 'UMI', 'English', 'T', 0.0), ('USA', 'United States', 'North America', 'North America', 9363520.0, 1776, 278357000, 77.1, 8510700.0, 8110900.0, 'United States', 'Federal Republic', 'George W. Bush', 3813, 'US', 'USA', 'English', 'T', 86.2), ('VCT', 'Saint Vincent and the Grenadines', 'North America', 'Caribbean', 388.0, 1979, 114000, 72.3, 285.0, None, 'Saint Vincent and the Grenadines', 'Constitutional Monarchy', 'Elisabeth II', 3066, 'VC', 'VCT', 'English', 'T', 0.0), ('VGB', 'Virgin Islands, British', 'North America', 'Caribbean', 151.0, None, 21000, 75.4, 612.0, 573.0, 'British Virgin Islands', 'Dependent Territory of the UK', 'Elisabeth II', 537, 'VG', 'VGB', 'English', 'T', 0.0), ('VIR', 'Virgin Islands, U.S.', 'North America', 'Caribbean', 347.0, None, 93000, 78.1, 0.0, None, 'Virgin Islands of the United States', 'US Territory', 'George W. Bush', 4067, 'VI', 'VIR', 'English', 'T', 81.7), ('VUT', 'Vanuatu', 'Oceania', 'Melanesia', 12189.0, 1980, 190000, 60.6, 261.0, 246.0, 'Vanuatu', 'Republic', 'John Bani', 3537, 'VU', 'VUT', 'English', 'T', 28.3), ('WSM', 'Samoa', 'Oceania', 'Polynesia', 2831.0, 1962, 180000, 69.2, 141.0, 157.0, 'Samoa', 'Parlementary Monarchy', 'Malietoa Tanumafili II', 3169, 'WS', 'WSM', 'English', 'T', 0.6), ('ZAF', 'South Africa', 'Africa', 'Southern Africa', 1221037.0, 1910, 40377000, 51.1, 116729.0, 129092.0, 'South Africa', 'Republic', 'Thabo Mbeki', 716, 'ZA', 'ZAF', 'English', 'T', 8.5), ('ZWE', 'Zimbabwe', 'Africa', 'Eastern Africa', 390757.0, 1980, 11669000, 37.8, 5951.0, 8670.0, 'Zimbabwe', 'Republic', 'Robert G. Mugabe', 4068, 'ZW', 'ZWE', 'English', 'T', 2.2)]","[('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',), ('T',)]",False
SPIDER_dev_756,world_1,Which language is the most popular on the Asian continent?,return languages ;return #1 on the asian continent ;return how popular #2 are ;return #2 where #3 is the most popular,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1","SELECT countrylanguage.language FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.language IN ( SELECT countrylanguage.language FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND country.continent = 'Asia' ) AND country.continent = 'Asia' ORDER BY country.localname DESC LIMIT 1","[('Arabic',)]","[('Arabic',)]",True
SPIDER_dev_757,world_1,What is the language that is used by the largest number of Asian nations?,return languages ;return asian nations that #1 are used by ;return number of #2 for each #1 ;return #1 where #3 is highest,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",SELECT countrylanguage.language FROM countrylanguage WHERE countrylanguage.language IN ( SELECT countrylanguage.language FROM countrylanguage ) GROUP BY countrylanguage.language ORDER BY COUNT(countrylanguage.isofficial) DESC LIMIT 1,"[('Arabic',)]","[('English',)]",False
SPIDER_dev_758,world_1,Which languages are spoken by only one country in republic governments?,return countries ;return #1 in republic governments ;return spoken languages of #2 ;return number of #3 for each language ;return languages where #4 is one,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1","SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND COUNT(countrylanguage.countrycode) IN ( SELECT COUNT(countrylanguage.countrycode) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT country.code FROM country WHERE country.governmentform = 'Republic' ) GROUP BY countrylanguage.language )","[('Abhyasi',), ('Acholi',), ('Adja',), ('Aizo',), ('Ambo',), ('Amhara',), ('Ami',), ('Ane',), ('Arabic-French',), ('Arabic-French-English',), ('Araucan',), ('Assyrian',), ('Atayal',), ('Bajad',), ('Balante',), ('Bali',), ('Balochi',), ('Bambara',), ('Bamileke-bamum',), ('Banda',), ('Banja',), ('Bariba',), ('Bassa',), ('Batakki',), ('Bemba',), ('Bengali',), ('Berberi',), ('Bhojpuri',), ('Bicol',), ('Bilin',), ('Bislama',), ('Boa',), ('Brahui',), ('Bubi',), ('Bugi',), ('Bullom-sherbro',), ('Burmese',), ('Buryat',), ('Busansi',), ('Cakchiquel',), ('Caprivi',), ('Cebuano',), ('Chaga and Pare',), ('Chakma',), ('Chewa',), ('Chichewa',), ('Chin',), ('Chuabo',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Cuna',), ('Czech',), ('Czech and Moravian',), ('Dagara',), ('Dariganga',), ('Dhivehi',), ('Dorbet',), ('Duala',), ('Dyula',), ('Embera',), ('Fijian',), ('Fon',), ('Friuli',), ('Ga-adangme',), ('Gagauzi',), ('Ganda',), ('Garifuna',), ('Garo',), ('Gbaya',), ('Georgiana',), ('Gio',), ('Gisu',), ('Gogo',), ('Gorane',), ('Grebo',), ('Guaymí',), ('Gur',), ('Gurage',), ('Gusii',), ('Ha',), ('Hadareb',), ('Hadjarai',), ('Haiti Creole',), ('Hakka',), ('Hassaniya',), ('Hausa',), ('Haya',), ('Hebrew',), ('Hehet',), ('Herero',), ('Hiligaynon',), ('Hindko',), ('Icelandic',), ('Ilocano',), ('Irish',), ('Javanese',), ('Kabyé',), ('Kachin',), ('Kalenjin',), ('Kamba',), ('Kanem-bornu',), ('Kanuri',), ('Karakalpak',), ('Karen',), ('Kavango',), ('Kayah',), ('Kekchí',), ('Khasi',), ('Khoekhoe',), ('Kiga',), ('Kikuyu',), ('Kirgiz',), ('Kirundi',), ('Kissi',), ('Kono-vai',), ('Korean',), ('Kotokoli',), ('Kuranko',), ('Lango',), ('Lao',), ('Lao-Soung',), ('Latvian',), ('Limba',), ('Lozi',), ('Luba',), ('Luchazi',), ('Lugbara',), ('Luguru',), ('Luhya',), ('Luimbe-nganguela',), ('Luo',), ('Luvale',), ('Madura',), ('Maguindanao',), ('Maka',), ('Makonde',), ('Makua',), ('Maltese',), ('Mam',), ('Mandara',), ('Mandarin Chinese',), ('Mandjia',), ('Mandyako',), ('Mano',), ('Maranao',), ('Marathi',), ('Marendje',), ('Marma',), ('Marshallese',), ('Masai',), ('Masana',), ('Mayo-kebbi',), ('Mboshi',), ('Mbum',), ('Mbundu',), ('Mende',), ('Meru',), ('Min',), ('Minangkabau',), ('Mixed Languages',), ('Moba',), ('Mon',), ('Mon-khmer',), ('Mongo',), ('Mongolian',), ('Moravian',), ('Mpongwe',), ('Nahua',), ('Nama',), ('Naudemba',), ('Nauru',), ('Ngala and Bangi',), ('Ngbaka',), ('Ngoni',), ('Nkole',), ('Northsotho',), ('Nsenga',), ('Nyakusa',), ('Nyamwesi',), ('Nyaneka-nkhumbi',), ('Nyika',), ('Oromo',), ('Osseetti',), ('Ouaddai',), ('Ovambo',), ('Ovimbundu',), ('Paiwan',), ('Palau',), ('Pampango',), ('Pangasinan',), ('Pashto',), ('Persian',), ('Philippene Languages',), ('Pilipino',), ('Punjabi',), ('Punu',), ('Punu-sira-nzebi',)]",ERROR,False
SPIDER_dev_759,world_1,What languages are only used by a single country with a republic government?,return countries ;return #1 with a republic government ;return languages only used by #2,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1","SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT country.code FROM country WHERE country.governmentform = 'Republic' )","[('Abhyasi',), ('Acholi',), ('Adja',), ('Aizo',), ('Ambo',), ('Amhara',), ('Ami',), ('Ane',), ('Arabic-French',), ('Arabic-French-English',), ('Araucan',), ('Assyrian',), ('Atayal',), ('Bajad',), ('Balante',), ('Bali',), ('Balochi',), ('Bambara',), ('Bamileke-bamum',), ('Banda',), ('Banja',), ('Bariba',), ('Bassa',), ('Batakki',), ('Bemba',), ('Bengali',), ('Berberi',), ('Bhojpuri',), ('Bicol',), ('Bilin',), ('Bislama',), ('Boa',), ('Brahui',), ('Bubi',), ('Bugi',), ('Bullom-sherbro',), ('Burmese',), ('Buryat',), ('Busansi',), ('Cakchiquel',), ('Caprivi',), ('Cebuano',), ('Chaga and Pare',), ('Chakma',), ('Chewa',), ('Chichewa',), ('Chin',), ('Chuabo',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Cuna',), ('Czech',), ('Czech and Moravian',), ('Dagara',), ('Dariganga',), ('Dhivehi',), ('Dorbet',), ('Duala',), ('Dyula',), ('Embera',), ('Fijian',), ('Fon',), ('Friuli',), ('Ga-adangme',), ('Gagauzi',), ('Ganda',), ('Garifuna',), ('Garo',), ('Gbaya',), ('Georgiana',), ('Gio',), ('Gisu',), ('Gogo',), ('Gorane',), ('Grebo',), ('Guaymí',), ('Gur',), ('Gurage',), ('Gusii',), ('Ha',), ('Hadareb',), ('Hadjarai',), ('Haiti Creole',), ('Hakka',), ('Hassaniya',), ('Hausa',), ('Haya',), ('Hebrew',), ('Hehet',), ('Herero',), ('Hiligaynon',), ('Hindko',), ('Icelandic',), ('Ilocano',), ('Irish',), ('Javanese',), ('Kabyé',), ('Kachin',), ('Kalenjin',), ('Kamba',), ('Kanem-bornu',), ('Kanuri',), ('Karakalpak',), ('Karen',), ('Kavango',), ('Kayah',), ('Kekchí',), ('Khasi',), ('Khoekhoe',), ('Kiga',), ('Kikuyu',), ('Kirgiz',), ('Kirundi',), ('Kissi',), ('Kono-vai',), ('Korean',), ('Kotokoli',), ('Kuranko',), ('Lango',), ('Lao',), ('Lao-Soung',), ('Latvian',), ('Limba',), ('Lozi',), ('Luba',), ('Luchazi',), ('Lugbara',), ('Luguru',), ('Luhya',), ('Luimbe-nganguela',), ('Luo',), ('Luvale',), ('Madura',), ('Maguindanao',), ('Maka',), ('Makonde',), ('Makua',), ('Maltese',), ('Mam',), ('Mandara',), ('Mandarin Chinese',), ('Mandjia',), ('Mandyako',), ('Mano',), ('Maranao',), ('Marathi',), ('Marendje',), ('Marma',), ('Marshallese',), ('Masai',), ('Masana',), ('Mayo-kebbi',), ('Mboshi',), ('Mbum',), ('Mbundu',), ('Mende',), ('Meru',), ('Min',), ('Minangkabau',), ('Mixed Languages',), ('Moba',), ('Mon',), ('Mon-khmer',), ('Mongo',), ('Mongolian',), ('Moravian',), ('Mpongwe',), ('Nahua',), ('Nama',), ('Naudemba',), ('Nauru',), ('Ngala and Bangi',), ('Ngbaka',), ('Ngoni',), ('Nkole',), ('Northsotho',), ('Nsenga',), ('Nyakusa',), ('Nyamwesi',), ('Nyaneka-nkhumbi',), ('Nyika',), ('Oromo',), ('Osseetti',), ('Ouaddai',), ('Ovambo',), ('Ovimbundu',), ('Paiwan',), ('Palau',), ('Pampango',), ('Pangasinan',), ('Pashto',), ('Persian',), ('Philippene Languages',), ('Pilipino',), ('Punjabi',), ('Punu',), ('Punu-sira-nzebialse
SPIDER_dev_76,pets_1,What are the different first names and ages of the students who do have pets?,"return students ;return #1 who do have pets ;return first names of #2 ;return ages of #2 ;return #3, #4","SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","SELECT student.fname, student.age FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid )","[('Linda', 18), ('Tracy', 19)]","[('Linda', 18), ('Tracy', 19), ('Tracy', 19)]",True
SPIDER_dev_760,world_1,Find the city with the largest population that uses English.,return cities ;return populations of #1 ;return #2 that use english ;return #1 where #3 is largest,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1","SELECT city.id FROM country, city, countrylanguage WHERE city.countrycode = country.code AND country.code = countrylanguage.countrycode AND city.id IN ( SELECT city.id FROM city ) AND countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1","[('New York', 8008278)]","[(3793,)]",False
SPIDER_dev_761,world_1,What is the most populace city that speaks English?,return cities ;return #1 that speak english ;return population of #2 ;return #2 where #3 is highest,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1","SELECT city.id FROM country, city, countrylanguage WHERE city.countrycode = country.code AND country.code = countrylanguage.countrycode AND city.id IN ( SELECT city.id FROM country, city, countrylanguage WHERE city.countrycode = country.code AND country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' ) AND countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1","[('New York', 8008278)]","[(3793,)]",False
SPIDER_dev_762,world_1,"Find the name, population and expected life length of asian country with the largest area?","return asian countries ;return areas of #1 ;return #1 where #2 is largest ;return name of #3 ;return population of #3 ;return expected life length of #3 ;return #4, #5, #6","SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1","SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Asia' ) AND country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1 )","[('China', 1277558000, 71.4)]","[('Afghanistan', 22720000, 45.9), ('United Arab Emirates', 2441000, 74.1), ('Armenia', 3520000, 66.4), ('Azerbaijan', 7734000, 62.9), ('Bangladesh', 129155000, 60.2), ('Bahrain', 617000, 73.0), ('Brunei', 328000, 73.6), ('Bhutan', 2124000, 52.4), ('China', 1277558000, 71.4), ('Cyprus', 754700, 76.7), ('Georgia', 4968000, 64.5), ('Hong Kong', 6782000, 79.5), ('Indonesia', 212107000, 68.0), ('India', 1013662000, 62.5), ('Iran', 67702000, 69.7), ('Iraq', 23115000, 66.5), ('Israel', 6217000, 78.6), ('Jordan', 5083000, 77.4), ('Japan', 126714000, 80.7), ('Kazakstan', 16223000, 63.2), ('Kyrgyzstan', 4699000, 63.4), ('Cambodia', 11168000, 56.5), ('South Korea', 46844000, 74.4), ('Kuwait', 1972000, 76.1), ('Laos', 5433000, 53.1), ('Lebanon', 3282000, 71.3), ('Sri Lanka', 18827000, 71.8), ('Macao', 473000, 81.6), ('Maldives', 286000, 62.2), ('Myanmar', 45611000, 54.9), ('Mongolia', 2662000, 67.3), ('Malaysia', 22244000, 70.8), ('Nepal', 23930000, 57.8), ('Oman', 2542000, 71.8), ('Pakistan', 156483000, 61.1), ('Philippines', 75967000, 67.5), ('North Korea', 24039000, 70.7), ('Palestine', 3101000, 71.4), ('Qatar', 599000, 72.4), ('Saudi Arabia', 21607000, 67.8), ('Singapore', 3567000, 80.1), ('Syria', 16125000, 68.5), ('Thailand', 61399000, 68.6), ('Tajikistan', 6188000, 64.1), ('Turkmenistan', 4459000, 60.9), ('East Timor', 885000, 46.0), ('Turkey', 66591000, 71.0), ('Taiwan', 22256000, 76.4), ('Uzbekistan', 24318000, 63.7), ('Vietnam', 79832000, 69.3), ('Yemen', 18112000, 59.8)]",False
SPIDER_dev_763,world_1,"What are the name, population, and life expectancy of the largest Asian country by land?","return asian countries ;return land of #1 ;return #1 where #2 is largest ;return name of #3 ;return population of #3 ;return life expectancy of #3 ;return #4, #5, #6","SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1","SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Asia' ) AND country.continent = 'Asia' ORDER BY country.code DESC LIMIT 1 )","[('China', 1277558000, 71.4)]","[('Afghanistan', 22720000, 45.9), ('United Arab Emirates', 2441000, 74.1), ('Armenia', 3520000, 66.4), ('Azerbaijan', 7734000, 62.9), ('Bangladesh', 129155000, 60.2), ('Bahrain', 617000, 73.0), ('Brunei', 328000, 73.6), ('Bhutan', 2124000, 52.4), ('China', 1277558000, 71.4), ('Cyprus', 754700, 76.7), ('Georgia', 4968000, 64.5), ('Hong Kong', 6782000, 79.5), ('Indonesia', 212107000, 68.0), ('India', 1013662000, 62.5), ('Iran', 67702000, 69.7), ('Iraq', 23115000, 66.5), ('Israel', 6217000, 78.6), ('Jordan', 5083000, 77.4), ('Japan', 126714000, 80.7), ('Kazakstan', 16223000, 63.2), ('Kyrgyzstan', 4699000, 63.4), ('Cambodia', 11168000, 56.5), ('South Korea', 46844000, 74.4), ('Kuwait', 1972000, 76.1), ('Laos', 5433000, 53.1), ('Lebanon', 3282000, 71.3), ('Sri Lanka', 18827000, 71.8), ('Macao', 473000, 81.6), ('Maldives', 286000, 62.2), ('Myanmar', 45611000, 54.9), ('Mongolia', 2662000, 67.3), ('Malaysia', 22244000, 70.8), ('Nepal', 23930000, 57.8), ('Oman', 2542000, 71.8), ('Pakistan', 156483000, 61.1), ('Philippines', 75967000, 67.5), ('North Korea', 24039000, 70.7), ('Palestine', 3101000, 71.4), ('Qatar', 599000, 72.4), ('Saudi Arabia', 21607000, 67.8), ('Singapore', 3567000, 80.1), ('Syria', 16125000, 68.5), ('Thailand', 61399000, 68.6), ('Tajikistan', 6188000, 64.1), ('Turkmenistan', 4459000, 60.9), ('East Timor', 885000, 46.0), ('Turkey', 66591000, 71.0), ('Taiwan', 22256000, 76.4), ('Uzbekistan', 24318000, 63.7), ('Vietnam', 79832000, 69.3), ('Yemen', 18112000, 59.8)]",False
SPIDER_dev_764,world_1,What is average life expectancy in the countries where English is not the official language?,return countries ;return #1 where english is the official language ;return #1 besides #2 ;return life expectancy in #3 ;return average of #4,"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")","SELECT AVG(country.lifeexpectancy) FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 'T' AND countrylanguage.isofficial NOT IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 'T' AND countrylanguage.language = 'English' ) )","[(65.48270270270272,)]","[(None,)]",False
SPIDER_dev_765,world_1,Give the mean life expectancy of countries in which English is not the official language.,return countries ;return official languages of #1 ;return #1 where english is not the official language ;return life expectancy of #3 ;return mean of #4,"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")","SELECT AVG(country.lifeexpectancy) FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 'T' AND countrylanguage.language != 'English' AND countrylanguage.isofficial != 'T' )","[(65.48270270270272,)]","[(None,)]",False
SPIDER_dev_766,world_1,What is the total number of people living in the nations that do not use English?,return nations ;return #1 that do not use english ;return people living in #2 ;return number of #3,"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"")","SELECT COUNT(country.lifeexpectancy) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' )","[(5451331150,)]","[(187,)]",False
SPIDER_dev_767,world_1,How many people live in countries that do not speak English?,return countries ;return #1 that speak english ;return #1 besides #2 ;return people that live in #3 ;return number of #4,"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"")","SELECT SUM(country.population) FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code NOT IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' ) )","[(5451331150,)]","[(5451331150,)]",True
SPIDER_dev_768,world_1,What is the official language spoken in the country whose head of state is Beatrix?,return countries ;return heads of states of #1 ;return #1 where #2 is beatrix ;return official language of #3,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""","SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 'T' ) AND countrylanguage.isofficial = 'T' AND country.headofstate = 'Beatrix' )","[('Dutch',), ('Dutch',), ('Papiamento',), ('Dutchalse
SPIDER_dev_769,world_1,What is the official language used in the country the name of whose head of state is Beatrix.,return countries ;return head of states of #1 ;return #1 where #2 is beatrix ;return official language of #3,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""","SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM countrylanguage WHERE countrylanguage.isofficial = 'T' ) AND countrylanguage.isofficial = 'T' AND country.headofstate = 'Beatrix' )","[('Dutch',), ('Dutch',), ('Papiamento',), ('Dutchalse
SPIDER_dev_77,pets_1,Find the id of the pet owned by student whose last name is ‘Smith’.,return student ;return last name of #1 ;return #1 where #2 is smith ;return pet owned by #3 ;return id of #4,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',"SELECT pets.petid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.petid IN ( SELECT pets.petid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student WHERE student.stuid IN ( SELECT student.stuid FROM student ) AND student.lname = 'Smith' ) )","[(2001,)]","[(2001,)]",True
SPIDER_dev_770,world_1,What is the total number of unique official languages spoken in the countries that are founded before 1930?,return countries ;return #1 founded before 1930 ;return unique official languages spoken in #2 ;return number of #3,"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""","SELECT COUNT(countrylanguage.isofficial) FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial = 'T' AND country.indepyear < 1930 )","[(40,)]","[(238,)]",False
SPIDER_dev_771,world_1,"For the countries founded before 1930, what is the total number of distinct official languages?",return countries ;return #1 founded before 1930 ;return distinct official languages of #2 ;return number of #3,"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""","SELECT COUNT(DISTINCT countrylanguage.isofficial) FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial = 'T' AND country.indepyear < 1930 )","[(40,)]","[(1,)]",False
SPIDER_dev_772,world_1,What are the countries that have greater surface area than any country in Europe?,return countries ;return #1 in europe ;return surface area of #2 ;return #1 where #3 is greater than any #2,"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")",SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.continent = 'Europe' ) AND country.surfacearea > 'any #2',"[('Aruba',), ('Afghanistan',), ('Angola',), ('Anguilla',), ('Albania',), ('Andorra',), ('Netherlands Antilles',), ('United Arab Emirates',), ('Argentina',), ('Armenia',), ('American Samoa',), ('Antarctica',), ('French Southern territories',), ('Antigua and Barbuda',), ('Australia',), ('Austria',), ('Azerbaijan',), ('Burundi',), ('Belgium',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bulgaria',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Bermuda',), ('Bolivia',), ('Brazil',), ('Barbados',), ('Brunei',), ('Bhutan',), ('Bouvet Island',), ('Botswana',), ('Central African Republic',), ('Canada',), ('Cocos (Keeling) Islands',), ('Switzerland',), ('Chile',), ('China',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Cook Islands',), ('Colombia',), ('Comoros',), ('Cape Verde',), ('Costa Rica',), ('Cuba',), ('Christmas Island',), ('Cayman Islands',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Denmark',), ('Dominican Republic',), ('Algeria',), ('Ecuador',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Spain',), ('Estonia',), ('Ethiopia',), ('Finland',), ('Fiji Islands',), ('Falkland Islands',), ('France',), ('Faroe Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('United Kingdom',), ('Georgia',), ('Ghana',), ('Gibraltar',), ('Guinea',), ('Guadeloupe',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Greece',), ('Grenada',), ('Greenland',), ('Guatemala',), ('French Guiana',), ('Guam',), ('Guyana',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('Honduras',), ('Croatia',), ('Haiti',), ('Hungary',), ('Indonesia',), ('India',), ('British Indian Ocean Territory',), ('Ireland',), ('Iran',), ('Iraq',), ('Iceland',), ('Israel',), ('Italy',), ('Jamaica',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Liechtenstein',), ('Sri Lanka',), ('Lesotho',), ('Lithuania',), ('Luxembourg',), ('Latvia',), ('Macao',), ('Morocco',), ('Monaco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Mexico',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Myanmar',), ('Mongolia',), ('Northern Mariana Islands',), ('Mozambique',), ('Mauritania',), ('Montserrat',), ('Martinique',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Mayotte',), ('Namibia',), ('New Caledonia',), ('Niger',), ('Norfolk Island',), ('Nigeria',), ('Nicaragua',), ('Niue',), ('Netherlands',), ('Norway',), ('Nepal',), ('Nauru',), ('New Zealand',), ('Oman',), ('Pakistan',), ('Panama',), ('Pitcairn',), ('Peru',), ('Philippines',), ('Palau',), ('Papua New Guinea',), ('Poland',), ('Puerto Rico',), ('North Korea',), ('Portugal',), ('Paraguay',), ('Palestine',), ('French Polynesia',), ('Qatar',), ('Réunion',), ('Romania',), ('Russian Federation',), ('Rwanda',), ('Saudi Arabia',), ('Sudan',), ('Senegal',), ('Singapore',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Solomon Islands',), ('Sierra Leone',), ('El Salvador',), ('San Marino',), ('Somalia',), ('Saint Pierre and Miquelon',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',)]",[],False
SPIDER_dev_773,world_1,Which countries have greater area than that of any country in Europe?,return countries ;return #1 in europe ;return area of #2 ;return area of #1 ;return #1 where #4 is greater than #3,"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")",SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) AND country.surfacearea > ( SELECT country.surfacearea FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.continent = 'Europe' ) ),"[('Aruba',), ('Afghanistan',), ('Angola',), ('Anguilla',), ('Albania',), ('Andorra',), ('Netherlands Antilles',), ('United Arab Emirates',), ('Argentina',), ('Armenia',), ('American Samoa',), ('Antarctica',), ('French Southern territories',), ('Antigua and Barbuda',), ('Australia',), ('Austria',), ('Azerbaijan',), ('Burundi',), ('Belgium',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bulgaria',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Bermuda',), ('Bolivia',), ('Brazil',), ('Barbados',), ('Brunei',), ('Bhutan',), ('Bouvet Island',), ('Botswana',), ('Central African Republic',), ('Canada',), ('Cocos (Keeling) Islands',), ('Switzerland',), ('Chile',), ('China',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Cook Islands',), ('Colombia',), ('Comoros',), ('Cape Verde',), ('Costa Rica',), ('Cuba',), ('Christmas Island',), ('Cayman Islands',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Denmark',), ('Dominican Republic',), ('Algeria',), ('Ecuador',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Spain',), ('Estonia',), ('Ethiopia',), ('Finland',), ('Fiji Islands',), ('Falkland Islands',), ('France',), ('Faroe Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('United Kingdom',), ('Georgia',), ('Ghana',), ('Gibraltar',), ('Guinea',), ('Guadeloupe',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Greece',), ('Grenada',), ('Greenland',), ('Guatemala',), ('French Guiana',), ('Guam',), ('Guyana',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('Honduras',), ('Croatia',), ('Haiti',), ('Hungary',), ('Indonesia',), ('India',), ('British Indian Ocean Territory',), ('Ireland',), ('Iran',), ('Iraq',), ('Iceland',), ('Israel',), ('Italy',), ('Jamaica',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Liechtenstein',), ('Sri Lanka',), ('Lesotho',), ('Lithuania',), ('Luxembourg',), ('Latvia',), ('Macao',), ('Morocco',), ('Monaco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Mexico',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Myanmar',), ('Mongolia',), ('Northern Mariana Islands',), ('Mozambique',), ('Mauritania',), ('Montserrat',), ('Martinique',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Mayotte',), ('Namibia',), ('New Caledonia',), ('Niger',), ('Norfolk Island',), ('Nigeria',), ('Nicaragua',), ('Niue',), ('Netherlands',), ('Norway',), ('Nepal',), ('Nauru',), ('New Zealand',), ('Oman',), ('Pakistan',), ('Panama',), ('Pitcairn',), ('Peru',), ('Philippines',), ('Palau',), ('Papua New Guinea',), ('Poland',), ('Puerto Rico',), ('North Korea',), ('Portugal',), ('Paraguay',), ('Palestine',), ('French Polynesia',), ('Qatar',), ('Réunion',), ('Romania',), ('Russian Federation',), ('Rwanda',), ('Saudi Arabia',), ('Sudan',), ('Senegal',), ('Singapore',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Solomon Islands',), ('Sierra Leone',), ('El Salvador',), ('San Marino',), ('Somalia',), ('Saint Pierre and Miquelon',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',)]","[('AFG',), ('AGO',), ('ARE',), ('ARG',), ('ARM',), ('ATA',), ('AUS',), ('AUT',), ('AZE',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('CRI',), ('CUB',), ('CZE',), ('DEU',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FRA',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIN',), ('GNB',), ('GRC',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ITA',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KOR',), ('LAO',), ('LBR',), ('LBY',), ('LKA',), ('LSO',), ('LTU',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MWI',), ('MYS',), ('NAM',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NOR',), ('NPL',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('ROM',), ('RUS',), ('SAU',), ('SDN',), ('SEN',), ('SJM',), ('SLB',), ('SLE',), ('SOM',), ('SUR',), ('SVK',), ('SWE',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VEN',), ('VNM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]",False
SPIDER_dev_774,world_1,What are the African countries that have a  population less than any country in Asia?,return african countries ;return populations of #1 ;return asia ;return populations of #3 ;return #1 where #2 is lower than #4,"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  ""Asia"")",SELECT country.continent FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Africa' ) AND country.continent = 'Africa' AND country.population < ( SELECT country.population FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Asia' ) ),"[('Angola',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Djibouti',), ('Algeria',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Ethiopia',), ('Gabon',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('British Indian Ocean Territory',), ('Kenya',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Lesotho',), ('Morocco',), ('Madagascar',), ('Mali',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Mayotte',), ('Namibia',), ('Niger',), ('Nigeria',), ('Réunion',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Saint Helena',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tunisia',), ('Tanzania',), ('Uganda',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]","[('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',)]",False
SPIDER_dev_775,world_1,Which African countries have a smaller population than that of any country in Asia?,return african countries ;return populations of #1 ;return asia ;return countries of #3 ;return populations of #4 ;return #1 where #2 is lower than #5,"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  ""Asia"")",SELECT country.continent FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Africa' ) AND country.continent = 'Africa' AND country.population < ( SELECT country.population FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Asia' ) ) ),"[('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]","[('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',), ('Africa',)]",False
SPIDER_dev_776,world_1,Which Asian countries have a population that is larger than any country in Africa?,return asian countries ;return populations of #1 ;return african countries ;return populations of #3 ;return #1 where #2 is higher than #4,"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  ""Africa"")",SELECT country.continent FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Asia' ) AND country.continent = 'Asia' AND country.population > ( SELECT country.population FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Africa' ) ),"[('Bangladesh',), ('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',)]","[('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',)]",False
SPIDER_dev_777,world_1,What are the Asian countries which have a population larger than that of any country in Africa?,return asian countries ;return populations of #1 ;return african countries ;return populations of #3 ;return #1 where #2 is higher than #4,"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  ""Africa"")",SELECT country.continent FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Asia' ) AND country.continent = 'Asia' AND country.population > ( SELECT country.population FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'Africa' ) ),"[('Afghanistan',), ('United Arab Emirates',), ('Armenia',), ('Azerbaijan',), ('Bangladesh',), ('Bahrain',), ('Brunei',), ('Bhutan',), ('China',), ('Cyprus',), ('Georgia',), ('Hong Kong',), ('Indonesia',), ('India',), ('Iran',), ('Iraq',), ('Israel',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kyrgyzstan',), ('Cambodia',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Sri Lanka',), ('Macao',), ('Maldives',), ('Myanmar',), ('Mongolia',), ('Malaysia',), ('Nepal',), ('Oman',), ('Pakistan',), ('Philippines',), ('North Korea',), ('Palestine',), ('Qatar',), ('Saudi Arabia',), ('Singapore',), ('Syria',), ('Thailand',), ('Tajikistan',), ('Turkmenistan',), ('East Timor',), ('Turkey',), ('Taiwan',), ('Uzbekistan',), ('Vietnam',), ('Yemen',)]","[('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',), ('Asia',)]",False
SPIDER_dev_778,world_1,What are the country codes for countries that do not speak English?,return countries ;return #1 that speak english ;return #1 besides #2 ;return country codes of #3,"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","SELECT countrylanguage.countrycode FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT country.code FROM country WHERE country.code NOT IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' ) )","[('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]","[('AFG',), ('AFG',), ('AFG',), ('AFG',), ('AFG',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('ALB',), ('ALB',), ('ALB',), ('AND',), ('AND',), ('AND',), ('AND',), ('ARE',), ('ARE',), ('ARG',), ('ARG',), ('ARG',), ('ARM',), ('ARM',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AZE',), ('AZE',), ('AZE',), ('AZE',), ('BDI',), ('BDI',), ('BDI',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGR',), ('BGR',), ('BGR',), ('BGR',), ('BHS',), ('BHS',), ('BIH',), ('BLR',), ('BLR',), ('BLR',), ('BLR',), ('BOL',), ('BOL',), ('BOL',), ('BOL',), ('BRA',), ('BRA',), ('BRA',), ('BRA',), ('BRA',), ('BTN',), ('BTN',), ('BTN',), ('BWA',), ('BWA',), ('BWA',), ('BWA',), ('BWA',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CHE',), ('CHE',), ('CHE',), ('CHE',), ('CHL',), ('CHL',), ('CHL',), ('CHL',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CIV',), ('CIV',), ('CIV',), ('CIV',), ('CIV',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COG',), ('COG',), ('COG',), ('COG',), ('COG',), ('COG',), ('COL',), ('COL',), ('COL',), ('COL',), ('COL',), ('COM',), ('COM',), ('COM',), ('COM',), ('COM',), ('CPV',), ('CPV',), ('CRI',), ('CRI',), ('CRI',), ('CRI',), ('CUB',), ('CYP',), ('CYP',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('DEU',), ('DEU',), ('DEU',), ('DEU',), ('DEU',), ('DEU',), ('DJI',), ('DJI',), ('DJI',), ('DMA',), ('DMA',), ('DOM',), ('DOM',), ('DZA',), ('DZA',), ('ECU',), ('ECU',), ('EGY',), ('EGY',), ('ERI',), ('ERI',)]",True
SPIDER_dev_779,world_1,Return the country codes for countries that do not speak English.,return countries ;return #1 that speak english ;return #1 besides #2 ;return country codes of #3,"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","SELECT countrylanguage.countrycode FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT country.code FROM country WHERE country.code NOT IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' ) )","[('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]","[('AFG',), ('AFG',), ('AFG',), ('AFG',), ('AFG',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('ALB',), ('ALB',), ('ALB',), ('AND',), ('AND',), ('AND',), ('AND',), ('ARE',), ('ARE',), ('ARG',), ('ARG',), ('ARG',), ('ARM',), ('ARM',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AZE',), ('AZE',), ('AZE',), ('AZE',), ('BDI',), ('BDI',), ('BDI',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGR',), ('BGR',), ('BGR',), ('BGR',), ('BHS',), ('BHS',), ('BIH',), ('BLR',), ('BLR',), ('BLR',), ('BLR',), ('BOL',), ('BOL',), ('BOL',), ('BOL',), ('BRA',), ('BRA',), ('BRA',), ('BRA',), ('BRA',), ('BTN',), ('BTN',), ('BTN',), ('BWA',), ('BWA',), ('BWA',), ('BWA',), ('BWA',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CHE',), ('CHE',), ('CHE',), ('CHE',), ('CHL',), ('CHL',), ('CHL',), ('CHL',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CIV',), ('CIV',), ('CIV',), ('CIV',), ('CIV',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COG',), ('COG',), ('COG',), ('COG',), ('COG',), ('COG',), ('COL',), ('COL',), ('COL',), ('COL',), ('COL',), ('COM',), ('COM',), ('COM',), ('COM',), ('COM',), ('CPV',), ('CPV',), ('CRI',), ('CRI',), ('CRI',), ('CRI',), ('CUB',), ('CYP',), ('CYP',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('CZE',), ('DEU',), ('DEU',), ('DEU',), ('DEU',), ('DEU',), ('DEU',), ('DJI',), ('DJI',), ('DJI',), ('DMA',), ('DMA',), ('DOM',), ('DOM',), ('DZA',), ('DZA',), ('ECU',), ('ECU',), ('EGY',), ('EGY',), ('ERI',), ('ERI',)]",True
SPIDER_dev_78,pets_1,What is the id of the pet owned by the student whose last name is 'Smith'?,return students ;return last names of #1 ;return #1 where #2 is'smith ;return pet owned by #3 ;return id of #4,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',"SELECT pets.petid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND pets.petid IN ( SELECT pets.petid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student WHERE student.lname = 'Smith' ) )","[(2001,)]","[(2001,)]",True
SPIDER_dev_780,world_1,What are the country codes of countries where people use languages other than English?,return countries ;return languages of #1 ;return #1 where #2 is not english ;return country codes of #3,"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != ""English""","SELECT country.code FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND country.code IN ( SELECT country.code FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND country.code IN ( SELECT country.code FROM country ) AND countrylanguage.language != 'English' )","[('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',)]","[('ABW',), ('ABW',), ('ABW',), ('ABW',), ('AFG',), ('AFG',), ('AFG',), ('AFG',), ('AFG',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('ALB',), ('ALB',), ('ALB',), ('AND',), ('AND',), ('AND',), ('AND',), ('ANT',), ('ANT',), ('ANT',), ('ARE',), ('ARE',), ('ARG',), ('ARG',), ('ARG',), ('ARM',), ('ARM',), ('ASM',), ('ASM',), ('ASM',), ('ATG',), ('ATG',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AZE',), ('AZE',), ('AZE',), ('AZE',), ('BDI',), ('BDI',), ('BDI',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGR',), ('BGR',), ('BGR',), ('BGR',), ('BHR',), ('BHR',), ('BHS',), ('BHS',), ('BIH',), ('BLR',), ('BLR',), ('BLR',), ('BLR',), ('BLZ',), ('BLZ',), ('BLZ',), ('BLZ',), ('BOL',), ('BOL',), ('BOL',), ('BOL',), ('BRA',), ('BRA',), ('BRA',), ('BRA',), ('BRA',), ('BRB',), ('BRB',), ('BRN',), ('BRN',), ('BRN',), ('BRN',), ('BTN',), ('BTN',), ('BTN',), ('BWA',), ('BWA',), ('BWA',), ('BWA',), ('BWA',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CCK',), ('CCK',), ('CHE',), ('CHE',), ('CHE',), ('CHE',), ('CHL',), ('CHL',), ('CHL',), ('CHL',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CIV',), ('CIV',), ('CIV',), ('CIV',), ('CIV',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COG',), ('COG',), ('COG',), ('COG',), ('COG',), ('COG',), ('COK',), ('COK',)]",True
SPIDER_dev_781,world_1,Give the country codes for countries in which people speak langauges that are not English.,return countries ;return langauges that #1 speak ;return #1 where #2 is not english ;return country codes of #3,"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != ""English""","SELECT country.code FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND country.code IN ( SELECT country.code FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND country.code IN ( SELECT country.code FROM country ) AND countrylanguage.language != 'English' )","[('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',)]","[('ABW',), ('ABW',), ('ABW',), ('ABW',), ('AFG',), ('AFG',), ('AFG',), ('AFG',), ('AFG',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('AGO',), ('ALB',), ('ALB',), ('ALB',), ('AND',), ('AND',), ('AND',), ('AND',), ('ANT',), ('ANT',), ('ANT',), ('ARE',), ('ARE',), ('ARG',), ('ARG',), ('ARG',), ('ARM',), ('ARM',), ('ASM',), ('ASM',), ('ASM',), ('ATG',), ('ATG',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUS',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AUT',), ('AZE',), ('AZE',), ('AZE',), ('AZE',), ('BDI',), ('BDI',), ('BDI',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEL',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BEN',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BFA',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGD',), ('BGR',), ('BGR',), ('BGR',), ('BGR',), ('BHR',), ('BHR',), ('BHS',), ('BHS',), ('BIH',), ('BLR',), ('BLR',), ('BLR',), ('BLR',), ('BLZ',), ('BLZ',), ('BLZ',), ('BLZ',), ('BOL',), ('BOL',), ('BOL',), ('BOL',), ('BRA',), ('BRA',), ('BRA',), ('BRA',), ('BRA',), ('BRB',), ('BRB',), ('BRN',), ('BRN',), ('BRN',), ('BRN',), ('BTN',), ('BTN',), ('BTN',), ('BWA',), ('BWA',), ('BWA',), ('BWA',), ('BWA',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAF',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CCK',), ('CCK',), ('CHE',), ('CHE',), ('CHE',), ('CHE',), ('CHL',), ('CHL',), ('CHL',), ('CHL',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CHN',), ('CIV',), ('CIV',), ('CIV',), ('CIV',), ('CIV',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('CMR',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COD',), ('COG',), ('COG',), ('COG',), ('COG',), ('COG',), ('COG',), ('COK',), ('COK',)]",True
SPIDER_dev_782,world_1,What are the codes of the countries that do not speak English and whose government forms are not Republic?,return countries ;return #1 that speak english ;return #1 besides #2 ;return government forms of #3 ;return #3 where #4 is republic ;return #3 besides #5 ;return codes of #6,"SELECT Code FROM country WHERE GovernmentForm != ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code NOT IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code NOT IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' ) ) AND country.governmentform = 'Republic' ) )","[('AFG',), ('AND',), ('ARE',), ('ARG',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BEL',), ('BHS',), ('BIH',), ('BRA',), ('BTN',), ('BVT',), ('CHE',), ('CHN',), ('CUB',), ('DEU',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IND',), ('IOT',), ('IRN',), ('JAM',), ('JOR',), ('KHM',), ('LBY',), ('LIE',), ('LUX',), ('MAR',), ('MDG',), ('MEX',), ('MTQ',), ('MYT',), ('NCL',), ('NGA',), ('NLD',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YUG',)]","[('ABW',), ('AFG',), ('AIA',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ASM',), ('ATA',), ('ATF',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BEL',), ('BHR',), ('BHS',), ('BIH',), ('BLZ',), ('BMU',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BVT',), ('CAN',), ('CCK',), ('CHE',), ('CHN',), ('COK',), ('CUB',), ('CXR',), ('CYM',), ('DEU',), ('DNK',), ('ESH',), ('ESP',), ('FLK',), ('FRO',), ('FSM',), ('GBR',), ('GIB',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('GUM',), ('HKG',), ('HMD',), ('IND',), ('IOT',), ('IRL',), ('IRN',), ('ISL',), ('JAM',), ('JOR',), ('JPN',), ('KHM',), ('KNA',), ('KWT',), ('LBY',), ('LCA',), ('LIE',), ('LSO',), ('LUX',), ('MAC',), ('MAR',), ('MCO',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MLT',), ('MNP',), ('MSR',), ('MTQ',), ('MYS',), ('MYT',), ('NCL',), ('NFK',), ('NGA',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PCN',), ('PLW',), ('PNG',), ('PRI',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SHN',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('SYC',), ('TCA',), ('THA',), ('TKL',), ('TMP',), ('TON',), ('TTO',), ('TUV',), ('UMI',), ('USA',), ('VAT',), ('VCT',), ('VEN',), ('VGB',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YUG',), ('ZAF',), ('ZWE',)]",False
SPIDER_dev_783,world_1,Return the codes of countries that do not speak English and do not have Republics for governments.,return countries ;return #1 that speak english ;return #1 besides #2 ;return #3 that do not have republics for governments ;return codes of #4,"SELECT Code FROM country WHERE GovernmentForm != ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.governmentform = 'Republic' AND country.code NOT IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'English' ) )","[('AFG',), ('AND',), ('ARE',), ('ARG',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BEL',), ('BHS',), ('BIH',), ('BRA',), ('BTN',), ('BVT',), ('CHE',), ('CHN',), ('CUB',), ('DEU',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IND',), ('IOT',), ('IRN',), ('JAM',), ('JOR',), ('KHM',), ('LBY',), ('LIE',), ('LUX',), ('MAR',), ('MDG',), ('MEX',), ('MTQ',), ('MYT',), ('NCL',), ('NGA',), ('NLD',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YUG',)]","[('AGO',), ('ALB',), ('ARM',), ('BDI',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BLR',), ('BOL',), ('BWA',), ('CAF',), ('CHL',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CYP',), ('CZE',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GTM',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IRQ',), ('ISR',), ('ITA',), ('KAZ',), ('KEN',), ('KGZ',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LKA',), ('LTU',), ('LVA',), ('MDA',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MUS',), ('MWI',), ('NAM',), ('NER',), ('NIC',), ('PAK',), ('PAN',), ('PER',), ('PHL',), ('POL',), ('PRT',), ('PRY',), ('ROM',), ('RWA',), ('SEN',), ('SGP',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SYR',), ('TCD',), ('TGO',), ('TJK',), ('TKM',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('YEM',), ('ZMB',)]",False
SPIDER_dev_784,world_1,Which cities are in European countries where English is not the official language?,return european countries ;return #1 where english is the official language ;return #1 besides #2 ;return cities of #3,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),,"[('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Tirana',), ('Andorra la Vella',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tórshavn',), ('Longyearbyen',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Riga',), ('Daugavpils',)]",ERROR,False
SPIDER_dev_785,world_1,What are the names of cities in Europe for which English is not the official language?,return cities ;return #1 in europe ;return official languages of #2 ;return #2 where #3 is english ;return #2 besides #4 ;return names of #5,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),"SELECT countrylanguage.language FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial = 'T' AND country.continent = 'Europe' AND countrylanguage.isofficial NOT IN ( SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial = 'T' AND country.continent = 'Europe' ) AND countrylanguage.isofficial = 'T' AND country.continent = 'Europe' AND countrylanguage.language = 'English' ) )","[('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Tirana',), ('Andorra la Vella',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tórshavn',), ('Longyearbyen',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Riga',), ('Daugavpils',)]",[],False
SPIDER_dev_786,world_1,Whic`h unique cities are in  Asian countries where Chinese is the official language?,return asian countries ;return official languages of #1 ;return #1 where #2 is chinese ;return unique cities in #3,"select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  ""asia""",,[],ERROR,False
SPIDER_dev_787,world_1,Return the different names of cities that are in Asia and for which Chinese is the official language.,return cities ;return #1 in asia ;return official languages of #2 ;return #2 where #3 is chinese ;return names of #4 ;return different #5,"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  ""Asia""","SELECT DISTINCT countrylanguage.language FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial IN ( SELECT countrylanguage.isofficial FROM country, countrylanguage WHERE countrylanguage.countrycode = country.code AND countrylanguage.isofficial = 'T' AND country.continent = 'Asia' ) AND countrylanguage.isofficial = 'T' AND country.continent = 'Asia' AND countrylanguage.language = 'Chinese' )","[('Shanghai',), ('Peking',), ('Chongqing',), ('Tianjin',), ('Wuhan',), ('Harbin',), ('Shenyang',), ('Kanton [Guangzhou]',), ('Chengdu',), ('Nanking [Nanjing]',), ('Changchun',), ('Xi´an',), ('Dalian',), ('Qingdao',), ('Jinan',), ('Hangzhou',), ('Zhengzhou',), ('Shijiazhuang',), ('Taiyuan',), ('Kunming',), ('Changsha',), ('Nanchang',), ('Fuzhou',), ('Lanzhou',), ('Guiyang',), ('Ningbo',), ('Hefei',), ('Urumtši [Ürümqi]',), ('Anshan',), ('Fushun',), ('Nanning',), ('Zibo',), ('Qiqihar',), ('Jilin',), ('Tangshan',), ('Baotou',), ('Shenzhen',), ('Hohhot',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',)]","[('Dutch',), ('Dari',), ('Pashto',), ('English',), ('Albaniana',), ('Catalan',), ('Papiamento',), ('Arabic',), ('Spanish',), ('Armenian',), ('Samoan',), ('German',), ('Azerbaijani',), ('French',), ('Kirundi',), ('Bengali',), ('Bulgariana',), ('Serbo-Croatian',), ('Belorussian',), ('Russian',), ('Aimará',), ('Ketšua',), ('Portuguese',), ('Malay',), ('Dzongkha',), ('Italian',), ('Romansh',), ('Chinese',), ('Maori',), ('Comorian',), ('Greek',), ('Turkish',), ('Czech',), ('Danish',), ('Tigrinja',), ('Estonian',), ('Finnish',), ('Swedish',), ('Fijian',), ('Faroese',), ('Georgiana',), ('Greenlandic',), ('Chamorro',), ('Hungarian',), ('Hindi',), ('Irish',), ('Persian',), ('Icelandic',), ('Hebrew',), ('Japanese',), ('Kazakh',), ('Kirgiz',), ('Khmer',), ('Kiribati',), ('Korean',), ('Lao',), ('Singali',), ('Tamil',), ('Sotho',), ('Lithuanian',), ('Luxembourgish',), ('Latvian',), ('Romanian',), ('Malagasy',), ('Dhivehi',), ('Marshallese',), ('Macedonian',), ('Maltese',), ('Burmese',), ('Mongolian',), ('Chichewa',), ('Norwegian',), ('Nepali',), ('Nauru',), ('Urdu',), ('Pilipino',), ('Palau',), ('Polish',), ('Guaraní',), ('Romani',), ('Rwanda',), ('Wolof',), ('Somali',), ('Slovak',), ('Slovene',), ('Swazi',), ('Ewe',), ('Kabyé',), ('Thai',), ('Tadzhik',), ('Turkmenian',), ('Tongan',), ('Tuvalu',), ('Mandarin Chinese',), ('Swahili',), ('Ukrainian',), ('Uzbek',), ('Vietnamese',), ('Bislama',), ('Afrikaans',), ('Xhosa',), ('Zulu',)]",False
SPIDER_dev_788,world_1,"What are the name, independence year, and surface area of the country with the smallest population?","return countries ;return populations of #1 ;return #1 where #2 is smallest ;return name of #3 ;return independence year of #3 ;return surface area of #3 ;return #4, #5, #6","SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) ORDER BY country.population ASC LIMIT 1 )","[('Antarctica', 13120000.0, None)]","[('Antarctica', None, 13120000.0)]",True
SPIDER_dev_789,world_1,"Give the name, year of independence, and surface area of the country that has the lowest population.","return countries ;return populations of #1 ;return #1 where #2 is lowest ;return name of #3 ;return year of independence of #3 ;return surface area of #3 ;return #4, #5, #6","SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) ORDER BY country.population ASC LIMIT 1 )","[('Antarctica', 13120000.0, None)]","[('Antarctica', None, 13120000.0)]",True
SPIDER_dev_79,pets_1,Find the number of pets for each student who has any pet and student id.,"return students ;return #1 who have pets ;return number of #2 for each #2 ;return student ids of #2 ;return #3, #4","SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid","SELECT student.stuid, COUNT(student.stuid) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid ) GROUP BY student.stuid","[(1, 1001), (2, 1002)]","[(1001, 1), (1002, 2)]",True
SPIDER_dev_790,world_1,"What are the population, name and leader of the country with the largest area?","return countries ;return areas of #1 ;return #1 where #2 is largest ;return population of #3 ;return name of #3 ;return leader of #3 ;return #4, #5, #6","SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","SELECT country.population, country.name, country.headofstate FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) ORDER BY country.surfacearea DESC LIMIT 1 )","[('Russian Federation', 146934000, 'Vladimir Putin')]","[(146934000, 'Russian Federation', 'Vladimir Putin')]",True
SPIDER_dev_791,world_1,"Give the name, population, and head of state for the country that has the largest area.","return countries ;return areas of #1 ;return #1 where #2 is largest ;return name of #3 ;return population of #3 ;return head of state of #3 ;return #4, #5, #6","SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","SELECT country.name, country.population, country.headofstate FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) ORDER BY country.surfacearea DESC LIMIT 1 )","[('Russian Federation', 146934000, 'Vladimir Putin')]","[('Russian Federation', 146934000, 'Vladimir Putin')]",True
SPIDER_dev_792,world_1,Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.,"return countries ;return languages of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 3 ;return country names of #4 ;return languages spoken in #4 ;return number of #6 for each #4 ;return #5, #7","SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","SELECT country.name, COUNT(countrylanguage.countrycode) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.name IN ( SELECT country.name FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.name IN ( SELECT country.name FROM country ) GROUP BY country.name HAVING COUNT(countrylanguage.countrycode) >= 3 ) AND country.name IN ( SELECT country.name FROM country ) GROUP BY country.name","[(5, 'Afghanistan'), (3, 'Albania'), (3, 'American Samoa'), (4, 'Andorra'), (9, 'Angola'), (3, 'Argentina'), (4, 'Aruba'), (8, 'Australia'), (8, 'Austria'), (4, 'Azerbaijan'), (7, 'Bangladesh'), (4, 'Belarus'), (6, 'Belgium'), (4, 'Belize'), (7, 'Benin'), (3, 'Bhutan'), (4, 'Bolivia'), (5, 'Botswana'), (5, 'Brazil'), (4, 'Brunei'), (4, 'Bulgaria'), (6, 'Burkina Faso'), (3, 'Burundi'), (4, 'Cambodia'), (8, 'Cameroon'), (12, 'Canada'), (6, 'Central African Republic'), (8, 'Chad'), (4, 'Chile'), (12, 'China'), (5, 'Colombia'), (5, 'Comoros'), (6, 'Congo'), (10, 'Congo, The Democratic Republic of the'), (4, 'Costa Rica'), (8, 'Czech Republic'), (5, 'Côte d’Ivoire'), (7, 'Denmark'), (3, 'Djibouti'), (6, 'Eritrea'), (5, 'Estonia'), (7, 'Ethiopia'), (5, 'Finland'), (6, 'France'), (3, 'French Polynesia'), (4, 'Gabon'), (5, 'Gambia'), (6, 'Georgia'), (6, 'Germany'), (6, 'Ghana'), (5, 'Guam'), (5, 'Guatemala'), (7, 'Guinea'), (6, 'Guinea-Bissau'), (3, 'Guyana'), (4, 'Honduras'), (5, 'Hong Kong'), (6, 'Hungary'), (12, 'India'), (9, 'Indonesia'), (10, 'Iran'), (5, 'Iraq'), (3, 'Israel'), (8, 'Italy'), (6, 'Japan'), (3, 'Jordan'), (6, 'Kazakstan'), (10, 'Kenya'), (7, 'Kyrgyzstan'), (4, 'Laos'), (6, 'Latvia'), (3, 'Lebanon'), (3, 'Lesotho'), (8, 'Liberia'), (3, 'Liechtenstein'), (5, 'Lithuania'), (5, 'Luxembourg'), (4, 'Macao'), (5, 'Macedonia'), (4, 'Malawi'), (6, 'Malaysia'), (6, 'Mali'), (6, 'Mauritania'), (6, 'Mauritius'), (3, 'Mayotte'), (6, 'Mexico'), (6, 'Micronesia, Federated States of'), (5, 'Moldova'), (4, 'Monaco'), (6, 'Mongolia'), (10, 'Mozambique'), (8, 'Myanmar'), (8, 'Namibia'), (5, 'Nauru'), (7, 'Nepal'), (4, 'Netherlands'), (3, 'Netherlands Antilles'), (3, 'New Caledonia'), (4, 'Nicaragua'), (5, 'Niger'), (10, 'Nigeria'), (6, 'Northern Mariana Islands'), (5, 'Norway'), (8, 'Pakistan'), (4, 'Palau'), (6, 'Panama'), (4, 'Paraguay'), (3, 'Peru'), (10, 'Philippines'), (4, 'Poland'), (6, 'Romania'), (12, 'Russian Federation'), (5, 'Réunion'), (3, 'Samoa'), (6, 'Senegal'), (3, 'Seychelles'), (8, 'Sierra Leone'), (3, 'Singapore'), (5, 'Slovakia'), (3, 'Slovenia'), (3, 'Solomon Islands'), (11, 'South Africa'), (4, 'Spain'), (3, 'Sri Lanka'), (10, 'Sudan'), (6, 'Sweden'), (4, 'Switzerland'), (6, 'Taiwan'), (3, 'Tajikistan'), (11, 'Tanzania'), (6, 'Thailand'), (8, 'Togo'), (3, 'Trinidad and Tobago'), (3, 'Tunisia'), (3, 'Turkey'), (4, 'Turkmenistan'), (3, 'Tuvalu'), (10, 'Uganda'), (7, 'Ukraine'), (3, 'United Kingdom'), (12, 'United States'), (6, 'Uzbekistan'), (3, 'Vanuatu'), (3, 'Venezuela'), (9, 'Vietnam'), (3, 'Virgin Islands, U.S.'), (6, 'Yugoslavia'), (6, 'Zambia'), (4, 'Zimbabwe')]","[('Afghanistan', 5), ('Albania', 3), ('American Samoa', 3), ('Andorra', 4), ('Angola', 9), ('Argentina', 3), ('Aruba', 4), ('Australia', 8), ('Austria', 8), ('Azerbaijan', 4), ('Bangladesh', 7), ('Belarus', 4), ('Belgium', 6), ('Belize', 4), ('Benin', 7), ('Bhutan', 3), ('Bolivia', 4), ('Botswana', 5), ('Brazil', 5), ('Brunei', 4), ('Bulgaria', 4), ('Burkina Faso', 6), ('Burundi', 3), ('Cambodia', 4), ('Cameroon', 8), ('Canada', 12), ('Central African Republic', 6), ('Chad', 8), ('Chile', 4), ('China', 12), ('Colombia', 5), ('Comoros', 5), ('Congo', 6), ('Congo, The Democratic Republic of the', 10), ('Costa Rica', 4), ('Czech Republic', 8), ('Côte d’Ivoire', 5), ('Denmark', 7), ('Djibouti', 3), ('Eritrea', 6), ('Estonia', 5), ('Ethiopia', 7), ('Finland', 5), ('France', 6), ('French Polynesia', 3), ('Gabon', 4), ('Gambia', 5), ('Georgia', 6), ('Germany', 6), ('Ghana', 6), ('Guam', 5), ('Guatemala', 5), ('Guinea', 7), ('Guinea-Bissau', 6), ('Guyana', 3), ('Honduras', 4), ('Hong Kong', 5), ('Hungary', 6), ('India', 12), ('Indonesia', 9), ('Iran', 10), ('Iraq', 5), ('Israel', 3), ('Italy', 8), ('Japan', 6), ('Jordan', 3), ('Kazakstan', 6), ('Kenya', 10), ('Kyrgyzstan', 7), ('Laos', 4), ('Latvia', 6), ('Lebanon', 3), ('Lesotho', 3), ('Liberia', 8), ('Liechtenstein', 3), ('Lithuania', 5), ('Luxembourg', 5), ('Macao', 4), ('Macedonia', 5), ('Malawi', 4), ('Malaysia', 6), ('Mali', 6), ('Mauritania', 6), ('Mauritius', 6), ('Mayotte', 3), ('Mexico', 6), ('Micronesia, Federated States of', 6), ('Moldova', 5), ('Monaco', 4), ('Mongolia', 6), ('Mozambique', 10), ('Myanmar', 8), ('Namibia', 8), ('Nauru', 5), ('Nepal', 7), ('Netherlands', 4), ('Netherlands Antilles', 3), ('New Caledonia', 3), ('Nicaragua', 4), ('Niger', 5), ('Nigeria', 10), ('Northern Mariana Islands', 6), ('Norway', 5), ('Pakistan', 8), ('Palau', 4), ('Panama', 6), ('Paraguay', 4), ('Peru', 3), ('Philippines', 10), ('Poland', 4), ('Romania', 6), ('Russian Federation', 12), ('Réunion', 5), ('Samoa', 3), ('Senegal', 6), ('Seychelles', 3), ('Sierra Leone', 8), ('Singapore', 3), ('Slovakia', 5), ('Slovenia', 3), ('Solomon Islands', 3), ('South Africa', 11), ('Spain', 4), ('Sri Lanka', 3), ('Sudan', 10), ('Sweden', 6), ('Switzerland', 4), ('Taiwan', 6), ('Tajikistan', 3), ('Tanzania', 11), ('Thailand', 6), ('Togo', 8), ('Trinidad and Tobago', 3), ('Tunisia', 3), ('Turkey', 3), ('Turkmenistan', 4), ('Tuvalu', 3), ('Uganda', 10), ('Ukraine', 7), ('United Kingdom', 3), ('United States', 12), ('Uzbekistan', 6), ('Vanuatu', 3), ('Venezuela', 3), ('Vietnam', 9), ('Virgin Islands, U.S.', 3), ('Yugoslavia', 6), ('Zambia', 6), ('Zimbabwe', 4)]",True
SPIDER_dev_793,world_1,"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?","return countries ;return languages of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than 2 ;return names of #4 ;return languages of #4 ;return number of #6 for each #4 ;return #5, #7","SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","SELECT country.name, COUNT(countrylanguage.countrycode) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.name IN ( SELECT country.name FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.name IN ( SELECT country.name FROM country ) GROUP BY country.name HAVING COUNT(countrylanguage.countrycode) > 2 ) AND country.name IN ( SELECT country.name FROM country ) GROUP BY country.name","[(5, 'Afghanistan'), (3, 'Albania'), (3, 'American Samoa'), (4, 'Andorra'), (9, 'Angola'), (3, 'Argentina'), (4, 'Aruba'), (8, 'Australia'), (8, 'Austria'), (4, 'Azerbaijan'), (7, 'Bangladesh'), (4, 'Belarus'), (6, 'Belgium'), (4, 'Belize'), (7, 'Benin'), (3, 'Bhutan'), (4, 'Bolivia'), (5, 'Botswana'), (5, 'Brazil'), (4, 'Brunei'), (4, 'Bulgaria'), (6, 'Burkina Faso'), (3, 'Burundi'), (4, 'Cambodia'), (8, 'Cameroon'), (12, 'Canada'), (6, 'Central African Republic'), (8, 'Chad'), (4, 'Chile'), (12, 'China'), (5, 'Colombia'), (5, 'Comoros'), (6, 'Congo'), (10, 'Congo, The Democratic Republic of the'), (4, 'Costa Rica'), (8, 'Czech Republic'), (5, 'Côte d’Ivoire'), (7, 'Denmark'), (3, 'Djibouti'), (6, 'Eritrea'), (5, 'Estonia'), (7, 'Ethiopia'), (5, 'Finland'), (6, 'France'), (3, 'French Polynesia'), (4, 'Gabon'), (5, 'Gambia'), (6, 'Georgia'), (6, 'Germany'), (6, 'Ghana'), (5, 'Guam'), (5, 'Guatemala'), (7, 'Guinea'), (6, 'Guinea-Bissau'), (3, 'Guyana'), (4, 'Honduras'), (5, 'Hong Kong'), (6, 'Hungary'), (12, 'India'), (9, 'Indonesia'), (10, 'Iran'), (5, 'Iraq'), (3, 'Israel'), (8, 'Italy'), (6, 'Japan'), (3, 'Jordan'), (6, 'Kazakstan'), (10, 'Kenya'), (7, 'Kyrgyzstan'), (4, 'Laos'), (6, 'Latvia'), (3, 'Lebanon'), (3, 'Lesotho'), (8, 'Liberia'), (3, 'Liechtenstein'), (5, 'Lithuania'), (5, 'Luxembourg'), (4, 'Macao'), (5, 'Macedonia'), (4, 'Malawi'), (6, 'Malaysia'), (6, 'Mali'), (6, 'Mauritania'), (6, 'Mauritius'), (3, 'Mayotte'), (6, 'Mexico'), (6, 'Micronesia, Federated States of'), (5, 'Moldova'), (4, 'Monaco'), (6, 'Mongolia'), (10, 'Mozambique'), (8, 'Myanmar'), (8, 'Namibia'), (5, 'Nauru'), (7, 'Nepal'), (4, 'Netherlands'), (3, 'Netherlands Antilles'), (3, 'New Caledonia'), (4, 'Nicaragua'), (5, 'Niger'), (10, 'Nigeria'), (6, 'Northern Mariana Islands'), (5, 'Norway'), (8, 'Pakistan'), (4, 'Palau'), (6, 'Panama'), (4, 'Paraguay'), (3, 'Peru'), (10, 'Philippines'), (4, 'Poland'), (6, 'Romania'), (12, 'Russian Federation'), (5, 'Réunion'), (3, 'Samoa'), (6, 'Senegal'), (3, 'Seychelles'), (8, 'Sierra Leone'), (3, 'Singapore'), (5, 'Slovakia'), (3, 'Slovenia'), (3, 'Solomon Islands'), (11, 'South Africa'), (4, 'Spain'), (3, 'Sri Lanka'), (10, 'Sudan'), (6, 'Sweden'), (4, 'Switzerland'), (6, 'Taiwan'), (3, 'Tajikistan'), (11, 'Tanzania'), (6, 'Thailand'), (8, 'Togo'), (3, 'Trinidad and Tobago'), (3, 'Tunisia'), (3, 'Turkey'), (4, 'Turkmenistan'), (3, 'Tuvalu'), (10, 'Uganda'), (7, 'Ukraine'), (3, 'United Kingdom'), (12, 'United States'), (6, 'Uzbekistan'), (3, 'Vanuatu'), (3, 'Venezuela'), (9, 'Vietnam'), (3, 'Virgin Islands, U.S.'), (6, 'Yugoslavia'), (6, 'Zambia'), (4, 'Zimbabwe')]","[('Afghanistan', 5), ('Albania', 3), ('American Samoa', 3), ('Andorra', 4), ('Angola', 9), ('Argentina', 3), ('Aruba', 4), ('Australia', 8), ('Austria', 8), ('Azerbaijan', 4), ('Bangladesh', 7), ('Belarus', 4), ('Belgium', 6), ('Belize', 4), ('Benin', 7), ('Bhutan', 3), ('Bolivia', 4), ('Botswana', 5), ('Brazil', 5), ('Brunei', 4), ('Bulgaria', 4), ('Burkina Faso', 6), ('Burundi', 3), ('Cambodia', 4), ('Cameroon', 8), ('Canada', 12), ('Central African Republic', 6), ('Chad', 8), ('Chile', 4), ('China', 12), ('Colombia', 5), ('Comoros', 5), ('Congo', 6), ('Congo, The Democratic Republic of the', 10), ('Costa Rica', 4), ('Czech Republic', 8), ('Côte d’Ivoire', 5), ('Denmark', 7), ('Djibouti', 3), ('Eritrea', 6), ('Estonia', 5), ('Ethiopia', 7), ('Finland', 5), ('France', 6), ('French Polynesia', 3), ('Gabon', 4), ('Gambia', 5), ('Georgia', 6), ('Germany', 6), ('Ghana', 6), ('Guam', 5), ('Guatemala', 5), ('Guinea', 7), ('Guinea-Bissau', 6), ('Guyana', 3), ('Honduras', 4), ('Hong Kong', 5), ('Hungary', 6), ('India', 12), ('Indonesia', 9), ('Iran', 10), ('Iraq', 5), ('Israel', 3), ('Italy', 8), ('Japan', 6), ('Jordan', 3), ('Kazakstan', 6), ('Kenya', 10), ('Kyrgyzstan', 7), ('Laos', 4), ('Latvia', 6), ('Lebanon', 3), ('Lesotho', 3), ('Liberia', 8), ('Liechtenstein', 3), ('Lithuania', 5), ('Luxembourg', 5), ('Macao', 4), ('Macedonia', 5), ('Malawi', 4), ('Malaysia', 6), ('Mali', 6), ('Mauritania', 6), ('Mauritius', 6), ('Mayotte', 3), ('Mexico', 6), ('Micronesia, Federated States of', 6), ('Moldova', 5), ('Monaco', 4), ('Mongolia', 6), ('Mozambique', 10), ('Myanmar', 8), ('Namibia', 8), ('Nauru', 5), ('Nepal', 7), ('Netherlands', 4), ('Netherlands Antilles', 3), ('New Caledonia', 3), ('Nicaragua', 4), ('Niger', 5), ('Nigeria', 10), ('Northern Mariana Islands', 6), ('Norway', 5), ('Pakistan', 8), ('Palau', 4), ('Panama', 6), ('Paraguay', 4), ('Peru', 3), ('Philippines', 10), ('Poland', 4), ('Romania', 6), ('Russian Federation', 12), ('Réunion', 5), ('Samoa', 3), ('Senegal', 6), ('Seychelles', 3), ('Sierra Leone', 8), ('Singapore', 3), ('Slovakia', 5), ('Slovenia', 3), ('Solomon Islands', 3), ('South Africa', 11), ('Spain', 4), ('Sri Lanka', 3), ('Sudan', 10), ('Sweden', 6), ('Switzerland', 4), ('Taiwan', 6), ('Tajikistan', 3), ('Tanzania', 11), ('Thailand', 6), ('Togo', 8), ('Trinidad and Tobago', 3), ('Tunisia', 3), ('Turkey', 3), ('Turkmenistan', 4), ('Tuvalu', 3), ('Uganda', 10), ('Ukraine', 7), ('United Kingdom', 3), ('United States', 12), ('Uzbekistan', 6), ('Vanuatu', 3), ('Venezuela', 3), ('Vietnam', 9), ('Virgin Islands, U.S.', 3), ('Yugoslavia', 6), ('Zambia', 6), ('Zimbabwe', 4)]",True
SPIDER_dev_794,world_1,Find the number of cities in each district whose population is greater than the average population of cities?,return districts ;return cities in #1 ;return populations of #2 ;return average of #3 ;return #2 where #3 is greater than #4 ;return number of #5 for each #1,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","SELECT city.district, COUNT(city.id) FROM city WHERE city.id IN ( SELECT city.id FROM city WHERE city.district IN ( SELECT city.district FROM city ) ) AND city.district IN ( SELECT city.district FROM city ) AND city.population > ( SELECT AVG(city.population) FROM city WHERE city.id IN ( SELECT city.id FROM city WHERE city.district IN ( SELECT city.district FROM city ) ) ) GROUP BY city.district","[(1, 'Abidjan'), (1, 'Abu Dhabi'), (1, 'Adana'), (1, 'Addis Abeba'), (1, 'Aden'), (1, 'Aguascalientes'), (1, 'Ahal'), (2, 'Aichi'), (1, 'Alagoas'), (2, 'Alberta'), (1, 'Aleksandria'), (1, 'Aleppo'), (1, 'Alger'), (1, 'Almaty Qalasy'), (1, 'Altai'), (1, 'Amazonas'), (1, 'Amman'), (1, 'Anambra & Enugu & Eb'), (2, 'Andalusia'), (5, 'Andhra Pradesh'), (5, 'Anhui'), (1, 'Ankara'), (1, 'Antalya'), (1, 'Antananarivo'), (1, 'Antioquia'), (1, 'Antwerpen'), (1, 'Aragonia'), (1, 'Aragua'), (1, 'Arequipa'), (3, 'Arizona'), (1, 'Arkangeli'), (1, 'Ashanti'), (1, 'Assam'), (1, 'Astrahan'), (1, 'Asunción'), (1, 'Atlantique'), (1, 'Atlántico'), (1, 'Attika'), (1, 'Auckland'), (1, 'Baden-Württemberg'), (1, 'Baghdad'), (2, 'Bahia'), (2, 'Baijeri'), (3, 'Baja California'), (1, 'Baki'), (1, 'Bali'), (1, 'Baluchistan'), (1, 'Bamako'), (1, 'Banaadir'), (1, 'Bangkok'), (1, 'Bangui'), (1, 'Baskimaa'), (1, 'Basra'), (1, 'Baškortostan'), (1, 'Beirut'), (1, 'Bengasi'), (1, 'Berliini'), (1, 'Bihar'), (1, 'Bishkek shaary'), (1, 'Blantyre'), (2, 'Bolívar'), (1, 'Bratislava'), (1, 'Brazzaville'), (1, 'Bremen'), (1, 'British Colombia'), (1, 'Brjansk'), (1, 'Budapest'), (12, 'Buenos Aires'), (1, 'Bukarest'), (1, 'Bulawayo'), (1, 'Burjatia'), (1, 'Bursa'), (8, 'California'), (1, 'Callao'), (1, 'Campania'), (1, 'Canary Islands'), (2, 'Cap-Vert'), (1, 'Carabobo'), (1, 'Casablanca'), (1, 'Ceará'), (2, 'Central'), (2, 'Central Java'), (1, 'Central Macedonia'), (1, 'Central Serbia'), (1, 'Central Visayas'), (1, 'Centre'), (1, 'Chandigarh'), (1, 'Chari-Baguirmi'), (2, 'Chhatisgarh'), (1, 'Chiapas'), (4, 'Chiba'), (2, 'Chihuahua'), (1, 'Chisinau'), (1, 'Chittagong'), (1, 'Chollabuk'), (1, 'Chongqing'), (1, 'Chungchongbuk'), (2, 'Coahuila de Zaragoza'), (1, 'Coast'), (1, 'Cochabamba'), (2, 'Colorado'), (1, 'Conakry'), (1, 'Constantine'), (1, 'Cortés'), (1, 'Córdoba'), (1, 'Damascus'), (1, 'Dar es Salaam'), (1, 'Delhi'), (1, 'Dhaka'), (1, 'District of Columbia'), (1, 'Distrito Central'), (4, 'Distrito Federal'), (1, 'Distrito Nacional'), (1, 'Diyarbakir'), (1, 'Djibouti'), (2, 'Dnipropetrovsk'), (1, 'Doha'), (1, 'Dolnoslaskie'), (3, 'Donetsk'), (1, 'Dubai'), (1, 'Durango'), (1, 'East Azerbaidzan'), (2, 'East Java'), (1, 'East Kasai'), (1, 'Eastern Cape'), (1, 'Ehime'), (1, 'Emilia-Romagna'), (7, 'England'), (1, 'Esfahan'), (1, 'Eskisehir'), (1, 'Estuaire'), (1, 'Fars'), (1, 'Federaatio'), (2, 'Florida'), (2, 'Fujian'), (2, 'Fukuoka'), (1, 'Fukushima'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (7, 'Gauteng'), (1, 'Gaza'), (1, 'Gaziantep'), (1, 'Georgia'), (1, 'Gifu'), (1, 'Gilan'), (1, 'Giza'), (1, 'Goiás'), (1, 'Gomel'), (1, 'Grad Sofija'), (1, 'Grad Zagreb'), (1, 'Greater Accra'), (3, 'Guanajuato'), (4, 'Guangdong'), (3, 'Guangxi'), (1, 'Guatemala'), (1, 'Guayas'), (1, 'Guerrero'), (2, 'Guizhou'), (5, 'Gujarat'), (1, 'Habarovsk'), (1, 'Hainan'), (1, 'Haiphong'), (1, 'Hamadan'), (1, 'Hamburg'), (1, 'Hamgyong N'), (1, 'Hamgyong P'), (1, 'Hanoi'), (1, 'Harare'), (1, 'Harjumaa'), (1, 'Harkova'), (1, 'Haryana'), (1, 'Haute-Zaïre'), (1, 'Hawaii'), (6, 'Hebei'), (9, 'Heilongjiang'), (7, 'Henan'), (1, 'Herson'), (1, 'Hessen'), (1, 'Hims'), (2, 'Hiroshima'), (1, 'Hlavní mesto Praha'), (1, 'Ho Chi Minh City'), (2, 'Hokkaido'), (1, 'Hongkong'), (1, 'Horad Minsk'), (1, 'Hsinchu'), (4, 'Hubei'), (4, 'Hunan'), (4, 'Hyogo'), (1, 'Illinois'), (1, 'Inchon'), (1, 'Indiana'), (3, 'Inner Mongolia'), (1, 'Irbil'), (1, 'Irkutsk'), (1, 'Ishikawa'), (1, 'Islamabad'), (1, 'Istanbul'), (1, 'Ivanovo'), (1, 'Izmir')]","[('Abidjan', 1), ('Abu Dhabi', 1), ('Adana', 1), ('Addis Abeba', 1), ('Aden', 1), ('Aguascalientes', 1), ('Ahal', 1), ('Aichi', 2), ('Alagoas', 1), ('Alberta', 2), ('Aleksandria', 1), ('Aleppo', 1), ('Alger', 1), ('Almaty Qalasy', 1), ('Altai', 1), ('Amazonas', 1), ('Amman', 1), ('Anambra & Enugu & Eb', 1), ('Andalusia', 2), ('Andhra Pradesh', 5), ('Anhui', 5), ('Ankara', 1), ('Antalya', 1), ('Antananarivo', 1), ('Antioquia', 1), ('Antwerpen', 1), ('Aragonia', 1), ('Aragua', 1), ('Arequipa', 1), ('Arizona', 3), ('Arkangeli', 1), ('Ashanti', 1), ('Assam', 1), ('Astrahan', 1), ('Asunción', 1), ('Atlantique', 1), ('Atlántico', 1), ('Attika', 1), ('Auckland', 1), ('Baden-Württemberg', 1), ('Baghdad', 1), ('Bahia', 2), ('Baijeri', 2), ('Baja California', 3), ('Baki', 1), ('Bali', 1), ('Baluchistan', 1), ('Bamako', 1), ('Banaadir', 1), ('Bangkok', 1), ('Bangui', 1), ('Baskimaa', 1), ('Basra', 1), ('Baškortostan', 1), ('Beirut', 1), ('Bengasi', 1), ('Berliini', 1), ('Bihar', 1), ('Bishkek shaary', 1), ('Blantyre', 1), ('Bolívar', 2), ('Bratislava', 1), ('Brazzaville', 1), ('Bremen', 1), ('British Colombia', 1), ('Brjansk', 1), ('Budapest', 1), ('Buenos Aires', 12), ('Bukarest', 1), ('Bulawayo', 1), ('Burjatia', 1), ('Bursa', 1), ('California', 8), ('Callao', 1), ('Campania', 1), ('Canary Islands', 1), ('Cap-Vert', 2), ('Carabobo', 1), ('Casablanca', 1), ('Ceará', 1), ('Central', 2), ('Central Java', 2), ('Central Macedonia', 1), ('Central Serbia', 1), ('Central Visayas', 1), ('Centre', 1), ('Chandigarh', 1), ('Chari-Baguirmi', 1), ('Chhatisgarh', 2), ('Chiapas', 1), ('Chiba', 4), ('Chihuahua', 2), ('Chisinau', 1), ('Chittagong', 1), ('Chollabuk', 1), ('Chongqing', 1), ('Chungchongbuk', 1), ('Coahuila de Zaragoza', 2), ('Coast', 1), ('Cochabamba', 1), ('Colorado', 2), ('Conakry', 1), ('Constantine', 1), ('Cortés', 1), ('Córdoba', 1), ('Damascus', 1), ('Dar es Salaam', 1), ('Delhi', 1), ('Dhaka', 1), ('District of Columbia', 1), ('Distrito Central', 1), ('Distrito Federal', 4), ('Distrito Nacional', 1), ('Diyarbakir', 1), ('Djibouti', 1), ('Dnipropetrovsk', 2), ('Doha', 1), ('Dolnoslaskie', 1), ('Donetsk', 3), ('Dubai', 1), ('Durango', 1), ('East Azerbaidzan', 1), ('East Java', 2), ('East Kasai', 1), ('Eastern Cape', 1), ('Ehime', 1), ('Emilia-Romagna', 1), ('England', 7), ('Esfahan', 1), ('Eskisehir', 1), ('Estuaire', 1), ('Fars', 1), ('Federaatio', 1), ('Florida', 2), ('Fujian', 2), ('Fukuoka', 2), ('Fukushima', 1), ('Fès-Boulemane', 1), ('Gansu', 1), ('Gauteng', 7), ('Gaza', 1), ('Gaziantep', 1), ('Georgia', 1), ('Gifu', 1), ('Gilan', 1), ('Giza', 1), ('Goiás', 1), ('Gomel', 1), ('Grad Sofija', 1), ('Grad Zagreb', 1), ('Greater Accra', 1), ('Guanajuato', 3), ('Guangdong', 4), ('Guangxi', 3), ('Guatemala', 1), ('Guayas', 1), ('Guerrero', 1), ('Guizhou', 2), ('Gujarat', 5), ('Habarovsk', 1), ('Hainan', 1), ('Haiphong', 1), ('Hamadan', 1), ('Hamburg', 1), ('Hamgyong N', 1), ('Hamgyong P', 1), ('Hanoi', 1), ('Harare', 1), ('Harjumaa', 1), ('Harkova', 1), ('Haryana', 1), ('Haute-Zaïre', 1), ('Hawaii', 1), ('Hebei', 6), ('Heilongjiang', 9), ('Henan', 7), ('Herson', 1), ('Hessen', 1), ('Hims', 1), ('Hiroshima', 2), ('Hlavní mesto Praha', 1), ('Ho Chi Minh City', 1), ('Hokkaido', 2), ('Hongkong', 1), ('Horad Minsk', 1), ('Hsinchu', 1), ('Hubei', 4), ('Hunan', 4), ('Hyogo', 4), ('Illinois', 1), ('Inchon', 1), ('Indiana', 1), ('Inner Mongolia', 3), ('Irbil', 1), ('Irkutsk', 1), ('Ishikawa', 1), ('Islamabad', 1), ('Istanbul', 1), ('Ivanovo', 1), ('Izmir', 1)]",True
SPIDER_dev_795,world_1,How many cities in each district have a population that is above the average population across all cities?,return districts ;return cities in #1 ;return populations of #2 ;return average of #3 ;return #2 where #3 is higher than #4 ;return number of #5 for each #1,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","SELECT city.district, COUNT(city.id) FROM city WHERE city.id IN ( SELECT city.id FROM city WHERE city.district IN ( SELECT city.district FROM city ) ) AND city.district IN ( SELECT city.district FROM city ) AND city.population > ( SELECT AVG(city.population) FROM city WHERE city.id IN ( SELECT city.id FROM city WHERE city.district IN ( SELECT city.district FROM city ) ) ) GROUP BY city.district","[(1, 'Abidjan'), (1, 'Abu Dhabi'), (1, 'Adana'), (1, 'Addis Abeba'), (1, 'Aden'), (1, 'Aguascalientes'), (1, 'Ahal'), (2, 'Aichi'), (1, 'Alagoas'), (2, 'Alberta'), (1, 'Aleksandria'), (1, 'Aleppo'), (1, 'Alger'), (1, 'Almaty Qalasy'), (1, 'Altai'), (1, 'Amazonas'), (1, 'Amman'), (1, 'Anambra & Enugu & Eb'), (2, 'Andalusia'), (5, 'Andhra Pradesh'), (5, 'Anhui'), (1, 'Ankara'), (1, 'Antalya'), (1, 'Antananarivo'), (1, 'Antioquia'), (1, 'Antwerpen'), (1, 'Aragonia'), (1, 'Aragua'), (1, 'Arequipa'), (3, 'Arizona'), (1, 'Arkangeli'), (1, 'Ashanti'), (1, 'Assam'), (1, 'Astrahan'), (1, 'Asunción'), (1, 'Atlantique'), (1, 'Atlántico'), (1, 'Attika'), (1, 'Auckland'), (1, 'Baden-Württemberg'), (1, 'Baghdad'), (2, 'Bahia'), (2, 'Baijeri'), (3, 'Baja California'), (1, 'Baki'), (1, 'Bali'), (1, 'Baluchistan'), (1, 'Bamako'), (1, 'Banaadir'), (1, 'Bangkok'), (1, 'Bangui'), (1, 'Baskimaa'), (1, 'Basra'), (1, 'Baškortostan'), (1, 'Beirut'), (1, 'Bengasi'), (1, 'Berliini'), (1, 'Bihar'), (1, 'Bishkek shaary'), (1, 'Blantyre'), (2, 'Bolívar'), (1, 'Bratislava'), (1, 'Brazzaville'), (1, 'Bremen'), (1, 'British Colombia'), (1, 'Brjansk'), (1, 'Budapest'), (12, 'Buenos Aires'), (1, 'Bukarest'), (1, 'Bulawayo'), (1, 'Burjatia'), (1, 'Bursa'), (8, 'California'), (1, 'Callao'), (1, 'Campania'), (1, 'Canary Islands'), (2, 'Cap-Vert'), (1, 'Carabobo'), (1, 'Casablanca'), (1, 'Ceará'), (2, 'Central'), (2, 'Central Java'), (1, 'Central Macedonia'), (1, 'Central Serbia'), (1, 'Central Visayas'), (1, 'Centre'), (1, 'Chandigarh'), (1, 'Chari-Baguirmi'), (2, 'Chhatisgarh'), (1, 'Chiapas'), (4, 'Chiba'), (2, 'Chihuahua'), (1, 'Chisinau'), (1, 'Chittagong'), (1, 'Chollabuk'), (1, 'Chongqing'), (1, 'Chungchongbuk'), (2, 'Coahuila de Zaragoza'), (1, 'Coast'), (1, 'Cochabamba'), (2, 'Colorado'), (1, 'Conakry'), (1, 'Constantine'), (1, 'Cortés'), (1, 'Córdoba'), (1, 'Damascus'), (1, 'Dar es Salaam'), (1, 'Delhi'), (1, 'Dhaka'), (1, 'District of Columbia'), (1, 'Distrito Central'), (4, 'Distrito Federal'), (1, 'Distrito Nacional'), (1, 'Diyarbakir'), (1, 'Djibouti'), (2, 'Dnipropetrovsk'), (1, 'Doha'), (1, 'Dolnoslaskie'), (3, 'Donetsk'), (1, 'Dubai'), (1, 'Durango'), (1, 'East Azerbaidzan'), (2, 'East Java'), (1, 'East Kasai'), (1, 'Eastern Cape'), (1, 'Ehime'), (1, 'Emilia-Romagna'), (7, 'England'), (1, 'Esfahan'), (1, 'Eskisehir'), (1, 'Estuaire'), (1, 'Fars'), (1, 'Federaatio'), (2, 'Florida'), (2, 'Fujian'), (2, 'Fukuoka'), (1, 'Fukushima'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (7, 'Gauteng'), (1, 'Gaza'), (1, 'Gaziantep'), (1, 'Georgia'), (1, 'Gifu'), (1, 'Gilan'), (1, 'Giza'), (1, 'Goiás'), (1, 'Gomel'), (1, 'Grad Sofija'), (1, 'Grad Zagreb'), (1, 'Greater Accra'), (3, 'Guanajuato'), (4, 'Guangdong'), (3, 'Guangxi'), (1, 'Guatemala'), (1, 'Guayas'), (1, 'Guerrero'), (2, 'Guizhou'), (5, 'Gujarat'), (1, 'Habarovsk'), (1, 'Hainan'), (1, 'Haiphong'), (1, 'Hamadan'), (1, 'Hamburg'), (1, 'Hamgyong N'), (1, 'Hamgyong P'), (1, 'Hanoi'), (1, 'Harare'), (1, 'Harjumaa'), (1, 'Harkova'), (1, 'Haryana'), (1, 'Haute-Zaïre'), (1, 'Hawaii'), (6, 'Hebei'), (9, 'Heilongjiang'), (7, 'Henan'), (1, 'Herson'), (1, 'Hessen'), (1, 'Hims'), (2, 'Hiroshima'), (1, 'Hlavní mesto Praha'), (1, 'Ho Chi Minh City'), (2, 'Hokkaido'), (1, 'Hongkong'), (1, 'Horad Minsk'), (1, 'Hsinchu'), (4, 'Hubei'), (4, 'Hunan'), (4, 'Hyogo'), (1, 'Illinois'), (1, 'Inchon'), (1, 'Indiana'), (3, 'Inner Mongolia'), (1, 'Irbil'), (1, 'Irkutsk'), (1, 'Ishikawa'), (1, 'Islamabad'), (1, 'Istanbul'), (1, 'Ivanovo'), (1, 'Izmir')]","[('Abidjan', 1), ('Abu Dhabi', 1), ('Adana', 1), ('Addis Abeba', 1), ('Aden', 1), ('Aguascalientes', 1), ('Ahal', 1), ('Aichi', 2), ('Alagoas', 1), ('Alberta', 2), ('Aleksandria', 1), ('Aleppo', 1), ('Alger', 1), ('Almaty Qalasy', 1), ('Altai', 1), ('Amazonas', 1), ('Amman', 1), ('Anambra & Enugu & Eb', 1), ('Andalusia', 2), ('Andhra Pradesh', 5), ('Anhui', 5), ('Ankara', 1), ('Antalya', 1), ('Antananarivo', 1), ('Antioquia', 1), ('Antwerpen', 1), ('Aragonia', 1), ('Aragua', 1), ('Arequipa', 1), ('Arizona', 3), ('Arkangeli', 1), ('Ashanti', 1), ('Assam', 1), ('Astrahan', 1), ('Asunción', 1), ('Atlantique', 1), ('Atlántico', 1), ('Attika', 1), ('Auckland', 1), ('Baden-Württemberg', 1), ('Baghdad', 1), ('Bahia', 2), ('Baijeri', 2), ('Baja California', 3), ('Baki', 1), ('Bali', 1), ('Baluchistan', 1), ('Bamako', 1), ('Banaadir', 1), ('Bangkok', 1), ('Bangui', 1), ('Baskimaa', 1), ('Basra', 1), ('Baškortostan', 1), ('Beirut', 1), ('Bengasi', 1), ('Berliini', 1), ('Bihar', 1), ('Bishkek shaary', 1), ('Blantyre', 1), ('Bolívar', 2), ('Bratislava', 1), ('Brazzaville', 1), ('Bremen', 1), ('British Colombia', 1), ('Brjansk', 1), ('Budapest', 1), ('Buenos Aires', 12), ('Bukarest', 1), ('Bulawayo', 1), ('Burjatia', 1), ('Bursa', 1), ('California', 8), ('Callao', 1), ('Campania', 1), ('Canary Islands', 1), ('Cap-Vert', 2), ('Carabobo', 1), ('Casablanca', 1), ('Ceará', 1), ('Central', 2), ('Central Java', 2), ('Central Macedonia', 1), ('Central Serbia', 1), ('Central Visayas', 1), ('Centre', 1), ('Chandigarh', 1), ('Chari-Baguirmi', 1), ('Chhatisgarh', 2), ('Chiapas', 1), ('Chiba', 4), ('Chihuahua', 2), ('Chisinau', 1), ('Chittagong', 1), ('Chollabuk', 1), ('Chongqing', 1), ('Chungchongbuk', 1), ('Coahuila de Zaragoza', 2), ('Coast', 1), ('Cochabamba', 1), ('Colorado', 2), ('Conakry', 1), ('Constantine', 1), ('Cortés', 1), ('Córdoba', 1), ('Damascus', 1), ('Dar es Salaam', 1), ('Delhi', 1), ('Dhaka', 1), ('District of Columbia', 1), ('Distrito Central', 1), ('Distrito Federal', 4), ('Distrito Nacional', 1), ('Diyarbakir', 1), ('Djibouti', 1), ('Dnipropetrovsk', 2), ('Doha', 1), ('Dolnoslaskie', 1), ('Donetsk', 3), ('Dubai', 1), ('Durango', 1), ('East Azerbaidzan', 1), ('East Java', 2), ('East Kasai', 1), ('Eastern Cape', 1), ('Ehime', 1), ('Emilia-Romagna', 1), ('England', 7), ('Esfahan', 1), ('Eskisehir', 1), ('Estuaire', 1), ('Fars', 1), ('Federaatio', 1), ('Florida', 2), ('Fujian', 2), ('Fukuoka', 2), ('Fukushima', 1), ('Fès-Boulemane', 1), ('Gansu', 1), ('Gauteng', 7), ('Gaza', 1), ('Gaziantep', 1), ('Georgia', 1), ('Gifu', 1), ('Gilan', 1), ('Giza', 1), ('Goiás', 1), ('Gomel', 1), ('Grad Sofija', 1), ('Grad Zagreb', 1), ('Greater Accra', 1), ('Guanajuato', 3), ('Guangdong', 4), ('Guangxi', 3), ('Guatemala', 1), ('Guayas', 1), ('Guerrero', 1), ('Guizhou', 2), ('Gujarat', 5), ('Habarovsk', 1), ('Hainan', 1), ('Haiphong', 1), ('Hamadan', 1), ('Hamburg', 1), ('Hamgyong N', 1), ('Hamgyong P', 1), ('Hanoi', 1), ('Harare', 1), ('Harjumaa', 1), ('Harkova', 1), ('Haryana', 1), ('Haute-Zaïre', 1), ('Hawaii', 1), ('Hebei', 6), ('Heilongjiang', 9), ('Henan', 7), ('Herson', 1), ('Hessen', 1), ('Hims', 1), ('Hiroshima', 2), ('Hlavní mesto Praha', 1), ('Ho Chi Minh City', 1), ('Hokkaido', 2), ('Hongkong', 1), ('Horad Minsk', 1), ('Hsinchu', 1), ('Hubei', 4), ('Hunan', 4), ('Hyogo', 4), ('Illinois', 1), ('Inchon', 1), ('Indiana', 1), ('Inner Mongolia', 3), ('Irbil', 1), ('Irkutsk', 1), ('Ishikawa', 1), ('Islamabad', 1), ('Istanbul', 1), ('Ivanovo', 1), ('Izmir', 1)]",True
SPIDER_dev_796,world_1,Find the government form name and total population for each government form whose average life expectancy is longer than 72.,"return government forms ;return average life expectancy of #1 ;return #1 where #2 is higher than 72 ;return government form names of #3 ;return total populations of #3 ;return #4, #5","SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72","SELECT country.governmentform, country.population FROM country WHERE country.governmentform IN ( SELECT country.governmentform FROM country WHERE country.governmentform IN ( SELECT country.governmentform FROM country ) AND country.lifeexpectancy > 72 )","[(3947000, 'Commonwealth of the US'), (1972000, 'Constitutional Monarchy (Emirate)'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK'), (2441000, 'Emirate Federation'), (7160400, 'Federation'), (617000, 'Monarchy (Emirate)'), (2870000, 'Monarchy (Sultanate)'), (464000, 'Nonmetropolitan Territory of France'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (1731000, 'Overseas Department of France'), (78000, 'Parliamentary Coprincipality'), (99000, 'Part of Denmark'), (115072000, 'Socialistic Republic'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (329000, 'US Territory')]","[('Nonmetropolitan Territory of The Netherlands', 103000), ('Republic', 12878000), ('Dependent Territory of the UK', 8000), ('Republic', 3401200), ('Parliamentary Coprincipality', 78000), ('Nonmetropolitan Territory of The Netherlands', 217000), ('Emirate Federation', 2441000), ('Federal Republic', 37032000), ('Republic', 3520000), ('US Territory', 68000), ('Nonmetropolitan Territory of France', 0), ('Constitutional Monarchy', 68000), ('Constitutional Monarchy, Federation', 18886000), ('Federal Republic', 8091800), ('Federal Republic', 7734000), ('Republic', 6695000), ('Constitutional Monarchy, Federation', 10239000), ('Republic', 6097000), ('Republic', 11937000), ('Republic', 129155000), ('Republic', 8190900), ('Monarchy (Emirate)', 617000), ('Constitutional Monarchy', 307000), ('Federal Republic', 3972000), ('Republic', 10236000), ('Constitutional Monarchy', 241000), ('Dependent Territory of the UK', 65000), ('Republic', 8329000), ('Federal Republic', 170115000), ('Constitutional Monarchy', 270000), ('Monarchy (Sultanate)', 328000), ('Monarchy', 2124000), ('Republic', 1622000), ('Republic', 3615000), ('Constitutional Monarchy, Federation', 31147000), ('Federation', 7160400), ('Republic', 15211000), ('Republic', 14786000), ('Republic', 15085000), ('Republic', 51654000), ('Republic', 2943000), ('Republic', 42321000), ('Republic', 578000), ('Republic', 428000), ('Republic', 4023000), ('Socialistic Republic', 11201000), ('Dependent Territory of the UK', 38000), ('Republic', 754700), ('Republic', 10278100), ('Federal Republic', 82164700), ('Republic', 638000), ('Republic', 71000), ('Constitutional Monarchy', 5330000), ('Republic', 8495000), ('Republic', 31471000), ('Republic', 12646000), ('Republic', 68470000), ('Republic', 3850000), ('Constitutional Monarchy', 39441700), ('Republic', 1439200), ('Republic', 62565000), ('Republic', 5171300), ('Republic', 817000), ('Dependent Territory of the UK', 2000), ('Republic', 59225700), ('Part of Denmark', 43000), ('Federal Republic', 119000), ('Republic', 1226000), ('Constitutional Monarchy', 59623400), ('Republic', 4968000), ('Republic', 20212000), ('Dependent Territory of the UK', 25000), ('Republic', 7430000), ('Overseas Department of France', 456000), ('Republic', 1305000), ('Republic', 1213000), ('Republic', 453000), ('Republic', 10545700), ('Constitutional Monarchy', 94000), ('Part of Denmark', 56000), ('Republic', 11385000), ('Overseas Department of France', 181000), ('US Territory', 168000), ('Republic', 861000), ('Special Administrative Region of China', 6782000), ('Republic', 6485000), ('Republic', 4473000), ('Republic', 8222000), ('Republic', 10043200), ('Republic', 212107000), ('Federal Republic', 1013662000), ('Dependent Territory of the UK', 0), ('Republic', 3775100), ('Republic', 23115000), ('Republic', 279000), ('Republic', 6217000), ('Republic', 57680000), ('Constitutional Monarchy', 2583000), ('Constitutional Monarchy', 5083000), ('Constitutional Monarchy', 126714000), ('Republic', 16223000), ('Republic', 30080000), ('Republic', 4699000), ('Constitutional Monarchy', 11168000), ('Republic', 83000), ('Constitutional Monarchy', 38000), ('Republic', 46844000), ('Constitutional Monarchy (Emirate)', 1972000), ('Republic', 5433000), ('Republic', 3282000), ('Republic', 3154000), ('Socialistic State', 5605000), ('Constitutional Monarchy', 154000), ('Constitutional Monarchy', 32300), ('Republic', 18827000), ('Constitutional Monarchy', 2153000), ('Republic', 3698500), ('Constitutional Monarchy', 435700), ('Republic', 2424200), ('Special Administrative Region of China', 473000), ('Constitutional Monarchy', 28351000), ('Constitutional Monarchy', 34000), ('Republic', 4380000), ('Federal Republic', 15942000), ('Republic', 286000), ('Federal Republic', 98881000), ('Republic', 64000), ('Republic', 2024000), ('Republic', 11234000), ('Republic', 380200), ('Republic', 45611000), ('Republic', 2662000), ('Commonwealth of the US', 78000), ('Republic', 19680000), ('Republic', 2670000), ('Dependent Territory of the UK', 11000), ('Overseas Department of France', 395000), ('Republic', 1158000), ('Republic', 10925000), ('Constitutional Monarchy, Federation', 22244000), ('Territorial Collectivity of France', 149000), ('Republic', 1726000), ('Nonmetropolitan Territory of France', 214000), ('Republic', 10730000), ('Federal Republic', 111506000), ('Republic', 5074000), ('Constitutional Monarchy', 15864000), ('Constitutional Monarchy', 4478500), ('Constitutional Monarchy', 23930000), ('Republic', 12000), ('Constitutional Monarchy', 3862000), ('Monarchy (Sultanate)', 2542000), ('Republic', 156483000), ('Republic', 2856000), ('Dependent Territory of the UK', 50), ('Republic', 25662000), ('Republic', 75967000), ('Republic', 19000), ('Constitutional Monarchy', 4807000), ('Republic', 38653600), ('Commonwealth of the US', 3869000), ('Socialistic Republic', 24039000), ('Republic', 9997600), ('Republic', 5496000), ('Nonmetropolitan Territory of France', 235000), ('Monarchy', 599000), ('Overseas Department of France', 699000), ('Republic', 22455500), ('Federal Republic', 146934000), ('Republic', 7733000), ('Monarchy', 21607000), ('Republic', 9481000), ('Republic', 3567000), ('Dependent Territory of the UK', 0), ('Dependent Territory of the UK', 6000), ('Constitutional Monarchy', 444000), ('Republic', 4854000), ('Republic', 6276000), ('Republic', 27000), ('Republic', 10097000), ('Territorial Collectivity of France', 7000), ('Republic', 147000), ('Republic', 417000), ('Republic', 5398700), ('Republic', 1987800), ('Constitutional Monarchy', 8861400), ('Monarchy', 1008000), ('Republic', 77000), ('Republic', 16125000), ('Dependent Territory of the UK', 17000), ('Republic', 7651000), ('Republic', 4629000), ('Constitutional Monarchy', 61399000), ('Republic', 6188000), ('Republic', 4459000), ('Monarchy', 99000), ('Republic', 1295000), ('Republic', 9586000), ('Republic', 66591000), ('Constitutional Monarchy', 12000)]",False
SPIDER_dev_797,world_1,What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?,"return government forms ;return life expectancy of #1 ;return average of #2 for each #1 ;return #1 where #3 is higher than 72 ;return different government forms of #4 ;return total populations of #4 ;return #5, #6","SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72","SELECT country.governmentform, country.population FROM country WHERE country.governmentform IN ( SELECT country.governmentform FROM country WHERE country.governmentform IN ( SELECT DISTINCT country.governmentform FROM country ) GROUP BY country.governmentform HAVING AVG(country.lifeexpectancy) > 72 )","[(3947000, 'Commonwealth of the US'), (1972000, 'Constitutional Monarchy (Emirate)'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK'), (2441000, 'Emirate Federation'), (7160400, 'Federation'), (617000, 'Monarchy (Emirate)'), (2870000, 'Monarchy (Sultanate)'), (464000, 'Nonmetropolitan Territory of France'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (1731000, 'Overseas Department of France'), (78000, 'Parliamentary Coprincipality'), (99000, 'Part of Denmark'), (115072000, 'Socialistic Republic'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (329000, 'US Territory')]","[('Nonmetropolitan Territory of The Netherlands', 103000), ('Dependent Territory of the UK', 8000), ('Parliamentary Coprincipality', 78000), ('Nonmetropolitan Territory of The Netherlands', 217000), ('Emirate Federation', 2441000), ('US Territory', 68000), ('Nonmetropolitan Territory of France', 0), ('Constitutional Monarchy, Federation', 18886000), ('Constitutional Monarchy, Federation', 10239000), ('Monarchy (Emirate)', 617000), ('Dependent Territory of the UK', 65000), ('Monarchy (Sultanate)', 328000), ('Constitutional Monarchy, Federation', 31147000), ('Federation', 7160400), ('Socialistic Republic', 11201000), ('Dependent Territory of the UK', 38000), ('Dependent Territory of the UK', 2000), ('Part of Denmark', 43000), ('Dependent Territory of the UK', 25000), ('Overseas Department of France', 456000), ('Part of Denmark', 56000), ('Overseas Department of France', 181000), ('US Territory', 168000), ('Special Administrative Region of China', 6782000), ('Dependent Territory of the UK', 0), ('Constitutional Monarchy (Emirate)', 1972000), ('Socialistic State', 5605000), ('Special Administrative Region of China', 473000), ('Commonwealth of the US', 78000), ('Dependent Territory of the UK', 11000), ('Overseas Department of France', 395000), ('Constitutional Monarchy, Federation', 22244000), ('Nonmetropolitan Territory of France', 214000), ('Monarchy (Sultanate)', 2542000), ('Dependent Territory of the UK', 50), ('Commonwealth of the US', 3869000), ('Socialistic Republic', 24039000), ('Nonmetropolitan Territory of France', 235000), ('Overseas Department of France', 699000), ('Dependent Territory of the UK', 0), ('Dependent Territory of the UK', 6000), ('Dependent Territory of the UK', 17000), ('Dependent Territory of the UK', 21000), ('US Territory', 93000), ('Socialistic Republic', 79832000), ('Nonmetropolitan Territory of France', 15000)]",False
SPIDER_dev_798,world_1,Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?,"return continents ;return life expectancy of #1 ;return average of #2 for each #1 ;return #1 where #3 is lower than 72 ;return average of #2 for each #4 ;return total population for each #4 ;return #5, #6","SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72","SELECT country.continent, AVG(country.lifeexpectancy), SUM(country.population) FROM country WHERE country.continent IN ( SELECT country.continent FROM country ) GROUP BY country.continent","[(784475000, 52.571929824561394, 'Africa'), (3705025700, 67.44117647058825, 'Asia'), (30401150, 69.715, 'Oceania'), (345780000, 70.94615384615386, 'South America')]","[('Africa', 52.571929824561394, 784475000), ('Antarctica', None, 0), ('Asia', 67.44117647058825, 3705025700), ('Europe', 75.14772727272728, 730074600), ('North America', 72.99189189189188, 482993000), ('Oceania', 69.715, 30401150), ('South America', 70.94615384615386, 345780000)]",False
SPIDER_dev_799,world_1,"What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?","return continents ;return average life expectancy of #1 ;return #1 where #2 is less than 72 ;return different continents of #3 ;return popuation of #4 ;return sum of #5 for each #3 ;return average life expectancy of #4 ;return #4, #6, #7","SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72","SELECT country.continent, SUM(country.population), country.lifeexpectancy FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent IN ( SELECT DISTINCT country.continent FROM country ) AND country.lifeexpectancy < 72 ) AND country.continent IN ( SELECT DISTINCT country.continent FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent IN ( SELECT DISTINCT country.continent FROM country ) AND country.lifeexpectancy < 72 ) ) AND country.continent IN ( SELECT DISTINCT country.continent FROM country ) AND country.lifeexpectancy < 72 GROUP BY country.continent","[(784475000, 52.571929824561394, 'Africa'), (3705025700, 67.44117647058825, 'Asia'), (30401150, 69.715, 'Oceania'), (345780000, 70.94615384615386, 'South America')]","[('Africa', 768579000, 38.3), ('Asia', 3480378000, 45.9), ('Europe', 267630700, 71.6), ('North America', 138422000, 70.5), ('Oceania', 6866000, 71.1), ('South America', 260351000, 63.7)]",False
SPIDER_dev_8,concert_singer,What are all distinct countries where singers above age 20 are from?,return singers ;return ages of #1 ;return #1 where #2 is higher than 20 ;return countries of #3 ;return distinct #4,SELECT DISTINCT country FROM singer WHERE age  >  20,SELECT DISTINCT singer.country FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND singer.age > 20 ),"[('Netherlands',), ('United States',), ('France',)]","[('Netherlands',), ('United States',), ('France',)]",True
SPIDER_dev_80,pets_1,"For students who have pets, how many pets does each student have?",return students ;return #1 who have pets ;return the number of pets for each #2,"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid","SELECT student.stuid, COUNT(pets.petid) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid GROUP BY student.stuid","[(1, 1001), (2, 1002)]","[(1001, 1), (1002, 2)]",True
SPIDER_dev_800,world_1,What are the names and areas of countries with the top 5 largest area?,"return countries ;return areas of #1 ;return the 5 largest #2 ;return #1 where #2 is in #3 ;return names of #4 ;return areas of #4 ;return #5, #6","SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","SELECT country.name, country.surfacearea FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) AND country.surfacearea = 'in #3' )","[('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]",[],False
SPIDER_dev_801,world_1,Return the names and surface areas of the 5 largest countries.,"return countries ;return size of #1 ;return the 5 largest #2 ;return #1 where #2 is equal to any of #3 ;return names of #4 ;return surface areas of #4 ;return #5, #6","SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","SELECT country.name, country.surfacearea FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) AND country.code = 'any of #3' )","[('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]",[],False
SPIDER_dev_802,world_1,What are names of countries with the top 3 largest population?,return countries ;return populations of #1 ;return the 3 highest of #2 ;return #1 where #2 is equal to any of #3 ;return names of #4,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,SELECT country.name FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) AND country.population = 'any of #3' ),"[('China',), ('India',), ('United States',)]",[],False
SPIDER_dev_803,world_1,Return the names of the 3 most populated countries.,return countries ;return population of #1 ;return the 3 highest of #2 ;return #1 where #2 is equal to any of #3 ;return names of #4,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,SELECT country.name FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) AND country.population = 'any of #3' ),"[('China',), ('India',), ('United States',)]",[],False
SPIDER_dev_804,world_1,What are the names of the nations with the 3 lowest populations?,return nations ;return populations of #1 ;return #1 where #2 are the 3 lowest ;return names of #3,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,SELECT country.name FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) ORDER BY country.population ASC LIMIT 1 ),"[('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]","[('Antarctica',)]",False
SPIDER_dev_805,world_1,Return the names of the 3 countries with the fewest people.,"return countries ;return population of #1 ;return #1 where #2 is lowest ;return #1 besides #3 ;return #4 where #2 is lowest ;return #4 besides #5 ;return #6 where #2 is lowest ;return #3, #5, #7",SELECT Name FROM country ORDER BY Population ASC LIMIT 3,SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country ) ORDER BY country.population ASC LIMIT 1,"[('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]","[('ATA',)]",False
SPIDER_dev_806,world_1,how many countries are in Asia?,return countries ;return #1 in asia ;return number of #2,"SELECT count(*) FROM country WHERE continent  =  ""Asia""",SELECT COUNT(country.code) FROM country WHERE country.continent = 'Asia',"[(51,)]","[(51,)]",True
SPIDER_dev_807,world_1,Count the number of countries in Asia.,return countries ;return #1 in asia ;return number of #2,"SELECT count(*) FROM country WHERE continent  =  ""Asia""",SELECT COUNT(country.code) FROM country WHERE country.continent = 'Asia',"[(51,)]","[(51,)]",True
SPIDER_dev_808,world_1,What are the names of the countries that are in the continent of Europe and have a population of 80000?,return countries ;return #1 in the continent of europe ;return #2 that have a population of 80000 ;return names of #3,"SELECT Name FROM country WHERE continent  =  ""Europe"" AND Population  =  ""80000""",SELECT country.name FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.continent = 'Europe' AND country.population = '80000' ),[],[],True
SPIDER_dev_809,world_1,Give the names of countries that are in Europe and have a population equal to 80000.,return countries ;return #1 that are in europe ;return populations of #2 ;return #2 where #3 is equal to 80000 ;return names of #4,"SELECT Name FROM country WHERE continent  =  ""Europe"" AND Population  =  ""80000""",SELECT country.name FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.continent = 'Europe' ) AND country.continent = 'Europe' AND country.population = 80000 ),[],[],True
SPIDER_dev_81,pets_1,Find the first name and gender of student who have more than one pet.,"return students ;return pets of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return first name of #4 ;return gender of #4 ;return #5, #6","SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","SELECT student.fname, student.sex FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student ) GROUP BY student.stuid HAVING COUNT(pets.petid) > 1 )","[('Tracy', 'F')]","[('Tracy', 'F'), ('Tracy', 'F')]",True
SPIDER_dev_810,world_1,What is the total population and average area of countries in the continent of North America whose area is bigger than 3000？,"return the continent of north america ;return countries of #1 ;return areas of #2 ;return #2 where #3 is bigger than 3000 ;return populations of #4 ;return sum of #5 ;return areas of #4 ;return average of #7 ;return #6, #8","select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000","SELECT SUM(country.population), AVG(country.surfacearea) FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'north america' ) ) AND country.continent IN ( SELECT country.continent FROM country WHERE country.continent = 'north america' ) AND country.surfacearea > 3000 )","[(None, None)]","[(None, None)]",True
SPIDER_dev_811,world_1,Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000.,"return countries ;return #1 in noth america ;return surface area of #2 ;return #2 where #3 is greater than 3000 ;return populations of #4 ;return sum of #5 for each #4 ;return average surface area for each #4 ;return #6, #7","select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000","SELECT country.code, SUM(country.population), AVG(country.surfacearea) FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.code IN ( SELECT country.code FROM country WHERE country.continent = 'north america' ) AND country.continent = 'north america' AND country.surfacearea > 3000 ) AND country.code IN ( SELECT country.code FROM country WHERE country.continent = 'north america' ) AND country.continent = 'north america' AND country.surfacearea > 3000 GROUP BY country.code","[(None, None)]",[],False
SPIDER_dev_812,world_1,What are the cities whose population is between 160000 and 900000?,return cities ;return populations of #1 ;return #1 where #2 is at least 160000 ;return #1 where #2 is at most 900000 ;return #1 in both #3 and #4,SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000,SELECT DISTINCT city.name FROM city WHERE city.name IN ( SELECT city.name FROM city ) AND city.population >= 160000 AND city.population <= 900000,"[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',)]","[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',)]",True
SPIDER_dev_813,world_1,Return the names of cities that have a population between 160000 and 900000.,return cities ;return populations of #1 ;return #1 where #2 is at least 160000 ;return #1 where #2 is at most 900000 ;return #1 in both #3 and #4 ;return names of #5,select name from city where population between 160000 and 900000,SELECT DISTINCT city.name FROM city WHERE city.id IN ( SELECT DISTINCT city.id FROM city WHERE city.id IN ( SELECT city.id FROM city ) AND city.population >= 160000 AND city.population <= 900000 ),"[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',)]","[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',)]",True
SPIDER_dev_814,world_1,Which language is spoken by the largest number of countries?,return languages ;return countries that #1 are spoken by ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,SELECT countrylanguage.language FROM countrylanguage WHERE countrylanguage.language IN ( SELECT countrylanguage.language FROM countrylanguage ) GROUP BY countrylanguage.language ORDER BY COUNT(countrylanguage.isofficial) DESC LIMIT 1,"[('English',)]","[('English',)]",True
SPIDER_dev_815,world_1,Give the language that is spoken in the most countries.,return languages ;return countries spoken in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,SELECT countrylanguage.language FROM countrylanguage WHERE countrylanguage.language IN ( SELECT countrylanguage.language FROM countrylanguage ) GROUP BY countrylanguage.language ORDER BY COUNT(countrylanguage.language) DESC LIMIT 1,"[('English',)]","[('English',)]",True
SPIDER_dev_816,world_1,What is the language spoken by the largest percentage of people in each country?,return countries ;return languages of #1 ;return percentages of people of #2 ;return #2 where #3 is the largest for each #1,"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","SELECT country.code, MAX(countrylanguage.countrycode) FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT country.code FROM country ) GROUP BY country.code","[('Papiamento', 'ABW', 76.7), ('Pashto', 'AFG', 52.4), ('Ovimbundu', 'AGO', 37.2), ('English', 'AIA', 0.0), ('Albaniana', 'ALB', 97.9), ('Spanish', 'AND', 44.6), ('Papiamento', 'ANT', 86.2), ('Arabic', 'ARE', 42.0), ('Spanish', 'ARG', 96.8), ('Armenian', 'ARM', 93.4), ('Samoan', 'ASM', 90.6), ('Creole English', 'ATG', 95.7), ('English', 'AUS', 81.2), ('German', 'AUT', 92.0), ('Azerbaijani', 'AZE', 89.0), ('Kirundi', 'BDI', 98.1), ('Dutch', 'BEL', 59.2), ('Fon', 'BEN', 39.8), ('Mossi', 'BFA', 50.2), ('Bengali', 'BGD', 97.7), ('Bulgariana', 'BGR', 83.2), ('Arabic', 'BHR', 67.7), ('Creole English', 'BHS', 89.7), ('Serbo-Croatian', 'BIH', 99.2), ('Belorussian', 'BLR', 65.6), ('English', 'BLZ', 50.8), ('English', 'BMU', 100.0), ('Spanish', 'BOL', 87.7), ('Portuguese', 'BRA', 97.5), ('Bajan', 'BRB', 95.1), ('Malay', 'BRN', 45.5), ('Dzongkha', 'BTN', 50.0), ('Tswana', 'BWA', 75.5), ('Gbaya', 'CAF', 23.8), ('English', 'CAN', 60.4), ('English', 'CCK', 0.0), ('German', 'CHE', 63.6), ('Spanish', 'CHL', 89.7), ('Chinese', 'CHN', 92.0), ('Akan', 'CIV', 30.0), ('Fang', 'CMR', 19.7), ('Luba', 'COD', 18.0), ('Kongo', 'COG', 51.5), ('English', 'COK', 0.0), ('Spanish', 'COL', 99.0), ('Comorian', 'COM', 75.0), ('Crioulo', 'CPV', 100.0), ('Spanish', 'CRI', 97.5), ('Spanish', 'CUB', 100.0), ('Chinese', 'CXR', 0.0), ('English', 'CYM', 0.0), ('Greek', 'CYP', 74.1), ('Czech', 'CZE', 81.2), ('German', 'DEU', 91.3), ('Somali', 'DJI', 43.9), ('Creole English', 'DMA', 100.0), ('Danish', 'DNK', 93.5), ('Spanish', 'DOM', 98.0), ('Arabic', 'DZA', 86.0), ('Spanish', 'ECU', 93.0), ('Arabic', 'EGY', 98.8), ('Tigrinja', 'ERI', 49.1), ('Arabic', 'ESH', 100.0), ('Spanish', 'ESP', 74.4), ('Estonian', 'EST', 65.3), ('Oromo', 'ETH', 31.0), ('Finnish', 'FIN', 92.7), ('Fijian', 'FJI', 50.8), ('English', 'FLK', 0.0), ('French', 'FRA', 93.6), ('Faroese', 'FRO', 100.0), ('Trukese', 'FSM', 41.6), ('Fang', 'GAB', 35.8), ('English', 'GBR', 97.3), ('Georgiana', 'GEO', 71.7), ('Akan', 'GHA', 52.4), ('English', 'GIB', 88.9), ('Ful', 'GIN', 38.6), ('Creole French', 'GLP', 95.0), ('Malinke', 'GMB', 34.1), ('Crioulo', 'GNB', 36.4), ('Fang', 'GNQ', 84.8), ('Greek', 'GRC', 98.5), ('Creole English', 'GRD', 100.0), ('Greenlandic', 'GRL', 87.5), ('Spanish', 'GTM', 64.7), ('Creole French', 'GUF', 94.3), ('English', 'GUM', 37.5), ('Creole English', 'GUY', 96.4), ('Canton Chinese', 'HKG', 88.7), ('Spanish', 'HND', 97.2), ('Serbo-Croatian', 'HRV', 95.9), ('Haiti Creole', 'HTI', 100.0), ('Hungarian', 'HUN', 98.5), ('Javanese', 'IDN', 39.4), ('Hindi', 'IND', 39.9), ('English', 'IRL', 98.4), ('Persian', 'IRN', 45.7), ('Arabic', 'IRQ', 77.2), ('Icelandic', 'ISL', 95.7), ('Hebrew', 'ISR', 63.1), ('Italian', 'ITA', 94.1), ('Creole English', 'JAM', 94.2), ('Arabic', 'JOR', 97.9), ('Japanese', 'JPN', 99.1), ('Kazakh', 'KAZ', 46.0), ('Kikuyu', 'KEN', 20.9), ('Kirgiz', 'KGZ', 59.7), ('Khmer', 'KHM', 88.6), ('Kiribati', 'KIR', 98.9), ('Creole English', 'KNA', 100.0), ('Korean', 'KOR', 99.9), ('Arabic', 'KWT', 78.1), ('Lao', 'LAO', 67.2), ('Arabic', 'LBN', 93.0), ('Kpelle', 'LBR', 19.5), ('Arabic', 'LBY', 96.0), ('Creole French', 'LCA', 80.0), ('German', 'LIE', 89.0), ('Singali', 'LKA', 60.3), ('Sotho', 'LSO', 85.0), ('Lithuanian', 'LTU', 81.6), ('Luxembourgish', 'LUX', 64.4), ('Latvian', 'LVA', 55.1), ('Canton Chinese', 'MAC', 85.6), ('Arabic', 'MAR', 65.0), ('French', 'MCO', 41.9), ('Romanian', 'MDA', 61.9), ('Malagasy', 'MDG', 98.9), ('Dhivehi', 'MDV', 100.0), ('Spanish', 'MEX', 92.1), ('Marshallese', 'MHL', 96.8), ('Macedonian', 'MKD', 66.5), ('Bambara', 'MLI', 31.8), ('Maltese', 'MLT', 95.8), ('Burmese', 'MMR', 69.0), ('Mongolian', 'MNG', 78.8), ('Philippene Languages', 'MNP', 34.1), ('Makua', 'MOZ', 27.8), ('Hassaniya', 'MRT', 81.7), ('English', 'MSR', 0.0), ('Creole French', 'MTQ', 96.6), ('Creole French', 'MUS', 70.6), ('Chichewa', 'MWI', 58.3), ('Malay', 'MYS', 58.4), ('Mahoré', 'MYT', 41.9), ('Ovambo', 'NAM', 50.7), ('Malenasian Languages', 'NCL', 45.4), ('Hausa', 'NER', 53.1), ('English', 'NFK', 0.0), ('Joruba', 'NGA', 21.4), ('Spanish', 'NIC', 97.6), ('English', 'NIU', 0.0), ('Dutch', 'NLD', 95.6), ('Norwegian', 'NOR', 96.6), ('Nepali', 'NPL', 50.4), ('Nauru', 'NRU', 57.5), ('English', 'NZL', 87.0), ('Arabic', 'OMN', 76.7), ('Punjabi', 'PAK', 48.2), ('Spanish', 'PAN', 76.8), ('Pitcairnese', 'PCN', 0.0), ('Spanish', 'PER', 79.8), ('Pilipino', 'PHL', 29.3), ('Palau', 'PLW', 82.2), ('Papuan Languages', 'PNG', 78.1), ('Polish', 'POL', 97.6), ('Spanish', 'PRI', 51.3), ('Korean', 'PRK', 99.9), ('Portuguese', 'PRT', 99.0), ('Spanish', 'PRY', 55.1), ('Arabic', 'PSE', 95.9), ('Tahitian', 'PYF', 46.4), ('Arabic', 'QAT', 40.7), ('Creole French', 'REU', 91.5), ('Romanian', 'ROM', 90.7), ('Russian', 'RUS', 86.6), ('Rwanda', 'RWA', 100.0), ('Arabic', 'SAU', 95.0), ('Arabic', 'SDN', 49.4), ('Wolof', 'SEN', 48.1), ('Chinese', 'SGP', 77.1), ('English', 'SHN', 0.0), ('Norwegian', 'SJM', 0.0), ('Malenasian Languages', 'SLB', 85.6), ('Mende', 'SLE', 34.8), ('Spanish', 'SLV', 100.0), ('Italian', 'SMR', 100.0), ('Somali', 'SOM', 98.3), ('French', 'SPM', 0.0), ('Crioulo', 'STP', 86.3), ('Sranantonga', 'SUR', 81.0), ('Slovak', 'SVK', 85.6), ('Slovene', 'SVN', 87.9), ('Swedish', 'SWE', 89.5), ('Swazi', 'SWZ', 89.9), ('Seselwa', 'SYC', 91.3), ('Arabic', 'SYR', 90.0), ('English', 'TCA', 0.0), ('Sara', 'TCD', 27.7)]","[('ABW', 'ABW'), ('AFG', 'AFG'), ('AGO', 'AGO'), ('AIA', 'AIA'), ('ALB', 'ALB'), ('AND', 'AND'), ('ANT', 'ANT'), ('ARE', 'ARE'), ('ARG', 'ARG'), ('ARM', 'ARM'), ('ASM', 'ASM'), ('ATG', 'ATG'), ('AUS', 'AUS'), ('AUT', 'AUT'), ('AZE', 'AZE'), ('BDI', 'BDI'), ('BEL', 'BEL'), ('BEN', 'BEN'), ('BFA', 'BFA'), ('BGD', 'BGD'), ('BGR', 'BGR'), ('BHR', 'BHR'), ('BHS', 'BHS'), ('BIH', 'BIH'), ('BLR', 'BLR'), ('BLZ', 'BLZ'), ('BMU', 'BMU'), ('BOL', 'BOL'), ('BRA', 'BRA'), ('BRB', 'BRB'), ('BRN', 'BRN'), ('BTN', 'BTN'), ('BWA', 'BWA'), ('CAF', 'CAF'), ('CAN', 'CAN'), ('CCK', 'CCK'), ('CHE', 'CHE'), ('CHL', 'CHL'), ('CHN', 'CHN'), ('CIV', 'CIV'), ('CMR', 'CMR'), ('COD', 'COD'), ('COG', 'COG'), ('COK', 'COK'), ('COL', 'COL'), ('COM', 'COM'), ('CPV', 'CPV'), ('CRI', 'CRI'), ('CUB', 'CUB'), ('CXR', 'CXR'), ('CYM', 'CYM'), ('CYP', 'CYP'), ('CZE', 'CZE'), ('DEU', 'DEU'), ('DJI', 'DJI'), ('DMA', 'DMA'), ('DNK', 'DNK'), ('DOM', 'DOM'), ('DZA', 'DZA'), ('ECU', 'ECU'), ('EGY', 'EGY'), ('ERI', 'ERI'), ('ESH', 'ESH'), ('ESP', 'ESP'), ('EST', 'EST'), ('ETH', 'ETH'), ('FIN', 'FIN'), ('FJI', 'FJI'), ('FLK', 'FLK'), ('FRA', 'FRA'), ('FRO', 'FRO'), ('FSM', 'FSM'), ('GAB', 'GAB'), ('GBR', 'GBR'), ('GEO', 'GEO'), ('GHA', 'GHA'), ('GIB', 'GIB'), ('GIN', 'GIN'), ('GLP', 'GLP'), ('GMB', 'GMB'), ('GNB', 'GNB'), ('GNQ', 'GNQ'), ('GRC', 'GRC'), ('GRD', 'GRD'), ('GRL', 'GRL'), ('GTM', 'GTM'), ('GUF', 'GUF'), ('GUM', 'GUM'), ('GUY', 'GUY'), ('HKG', 'HKG'), ('HND', 'HND'), ('HRV', 'HRV'), ('HTI', 'HTI'), ('HUN', 'HUN'), ('IDN', 'IDN'), ('IND', 'IND'), ('IRL', 'IRL'), ('IRN', 'IRN'), ('IRQ', 'IRQ'), ('ISL', 'ISL'), ('ISR', 'ISR'), ('ITA', 'ITA'), ('JAM', 'JAM'), ('JOR', 'JOR'), ('JPN', 'JPN'), ('KAZ', 'KAZ'), ('KEN', 'KEN'), ('KGZ', 'KGZ'), ('KHM', 'KHM'), ('KIR', 'KIR'), ('KNA', 'KNA'), ('KOR', 'KOR'), ('KWT', 'KWT'), ('LAO', 'LAO'), ('LBN', 'LBN'), ('LBR', 'LBR'), ('LBY', 'LBY'), ('LCA', 'LCA'), ('LIE', 'LIE'), ('LKA', 'LKA'), ('LSO', 'LSO'), ('LTU', 'LTU'), ('LUX', 'LUX'), ('LVA', 'LVA'), ('MAC', 'MAC'), ('MAR', 'MAR'), ('MCO', 'MCO'), ('MDA', 'MDA'), ('MDG', 'MDG'), ('MDV', 'MDV'), ('MEX', 'MEX'), ('MHL', 'MHL'), ('MKD', 'MKD'), ('MLI', 'MLI'), ('MLT', 'MLT'), ('MMR', 'MMR'), ('MNG', 'MNG'), ('MNP', 'MNP'), ('MOZ', 'MOZ'), ('MRT', 'MRT'), ('MSR', 'MSR'), ('MTQ', 'MTQ'), ('MUS', 'MUS'), ('MWI', 'MWI'), ('MYS', 'MYS'), ('MYT', 'MYT'), ('NAM', 'NAM'), ('NCL', 'NCL'), ('NER', 'NER'), ('NFK', 'NFK'), ('NGA', 'NGA'), ('NIC', 'NIC'), ('NIU', 'NIU'), ('NLD', 'NLD'), ('NOR', 'NOR'), ('NPL', 'NPL'), ('NRU', 'NRU'), ('NZL', 'NZL'), ('OMN', 'OMN'), ('PAK', 'PAK'), ('PAN', 'PAN'), ('PCN', 'PCN'), ('PER', 'PER'), ('PHL', 'PHL'), ('PLW', 'PLW'), ('PNG', 'PNG'), ('POL', 'POL'), ('PRI', 'PRI'), ('PRK', 'PRK'), ('PRT', 'PRT'), ('PRY', 'PRY'), ('PSE', 'PSE'), ('PYF', 'PYF'), ('QAT', 'QAT'), ('REU', 'REU'), ('ROM', 'ROM'), ('RUS', 'RUS'), ('RWA', 'RWA'), ('SAU', 'SAU'), ('SDN', 'SDN'), ('SEN', 'SEN'), ('SGP', 'SGP'), ('SHN', 'SHN'), ('SJM', 'SJM'), ('SLB', 'SLB'), ('SLE', 'SLE'), ('SLV', 'SLV'), ('SMR', 'SMR'), ('SOM', 'SOM'), ('SPM', 'SPM'), ('STP', 'STP'), ('SUR', 'SUR'), ('SVK', 'SVK'), ('SVN', 'SVN'), ('SWE', 'SWE'), ('SWZ', 'SWZ'), ('SYC', 'SYC'), ('SYR', 'SYR'), ('TCA', 'TCA'), ('TCD', 'TCD')]",False
SPIDER_dev_817,world_1,"What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?","return different countries ;return country codes of #1 ;return languages of #1 ;return percentages of #3 for each #1 ;return #2, #4","SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",ERROR,"[('Papiamento', 'ABW', 76.7), ('Pashto', 'AFG', 52.4), ('Ovimbundu', 'AGO', 37.2), ('English', 'AIA', 0.0), ('Albaniana', 'ALB', 97.9), ('Spanish', 'AND', 44.6), ('Papiamento', 'ANT', 86.2), ('Arabic', 'ARE', 42.0), ('Spanish', 'ARG', 96.8), ('Armenian', 'ARM', 93.4), ('Samoan', 'ASM', 90.6), ('Creole English', 'ATG', 95.7), ('English', 'AUS', 81.2), ('German', 'AUT', 92.0), ('Azerbaijani', 'AZE', 89.0), ('Kirundi', 'BDI', 98.1), ('Dutch', 'BEL', 59.2), ('Fon', 'BEN', 39.8), ('Mossi', 'BFA', 50.2), ('Bengali', 'BGD', 97.7), ('Bulgariana', 'BGR', 83.2), ('Arabic', 'BHR', 67.7), ('Creole English', 'BHS', 89.7), ('Serbo-Croatian', 'BIH', 99.2), ('Belorussian', 'BLR', 65.6), ('English', 'BLZ', 50.8), ('English', 'BMU', 100.0), ('Spanish', 'BOL', 87.7), ('Portuguese', 'BRA', 97.5), ('Bajan', 'BRB', 95.1), ('Malay', 'BRN', 45.5), ('Dzongkha', 'BTN', 50.0), ('Tswana', 'BWA', 75.5), ('Gbaya', 'CAF', 23.8), ('English', 'CAN', 60.4), ('English', 'CCK', 0.0), ('German', 'CHE', 63.6), ('Spanish', 'CHL', 89.7), ('Chinese', 'CHN', 92.0), ('Akan', 'CIV', 30.0), ('Fang', 'CMR', 19.7), ('Luba', 'COD', 18.0), ('Kongo', 'COG', 51.5), ('English', 'COK', 0.0), ('Spanish', 'COL', 99.0), ('Comorian', 'COM', 75.0), ('Crioulo', 'CPV', 100.0), ('Spanish', 'CRI', 97.5), ('Spanish', 'CUB', 100.0), ('Chinese', 'CXR', 0.0), ('English', 'CYM', 0.0), ('Greek', 'CYP', 74.1), ('Czech', 'CZE', 81.2), ('German', 'DEU', 91.3), ('Somali', 'DJI', 43.9), ('Creole English', 'DMA', 100.0), ('Danish', 'DNK', 93.5), ('Spanish', 'DOM', 98.0), ('Arabic', 'DZA', 86.0), ('Spanish', 'ECU', 93.0), ('Arabic', 'EGY', 98.8), ('Tigrinja', 'ERI', 49.1), ('Arabic', 'ESH', 100.0), ('Spanish', 'ESP', 74.4), ('Estonian', 'EST', 65.3), ('Oromo', 'ETH', 31.0), ('Finnish', 'FIN', 92.7), ('Fijian', 'FJI', 50.8), ('English', 'FLK', 0.0), ('French', 'FRA', 93.6), ('Faroese', 'FRO', 100.0), ('Trukese', 'FSM', 41.6), ('Fang', 'GAB', 35.8), ('English', 'GBR', 97.3), ('Georgiana', 'GEO', 71.7), ('Akan', 'GHA', 52.4), ('English', 'GIB', 88.9), ('Ful', 'GIN', 38.6), ('Creole French', 'GLP', 95.0), ('Malinke', 'GMB', 34.1), ('Crioulo', 'GNB', 36.4), ('Fang', 'GNQ', 84.8), ('Greek', 'GRC', 98.5), ('Creole English', 'GRD', 100.0), ('Greenlandic', 'GRL', 87.5), ('Spanish', 'GTM', 64.7), ('Creole French', 'GUF', 94.3), ('English', 'GUM', 37.5), ('Creole English', 'GUY', 96.4), ('Canton Chinese', 'HKG', 88.7), ('Spanish', 'HND', 97.2), ('Serbo-Croatian', 'HRV', 95.9), ('Haiti Creole', 'HTI', 100.0), ('Hungarian', 'HUN', 98.5), ('Javanese', 'IDN', 39.4), ('Hindi', 'IND', 39.9), ('English', 'IRL', 98.4), ('Persian', 'IRN', 45.7), ('Arabic', 'IRQ', 77.2), ('Icelandic', 'ISL', 95.7), ('Hebrew', 'ISR', 63.1), ('Italian', 'ITA', 94.1), ('Creole English', 'JAM', 94.2), ('Arabic', 'JOR', 97.9), ('Japanese', 'JPN', 99.1), ('Kazakh', 'KAZ', 46.0), ('Kikuyu', 'KEN', 20.9), ('Kirgiz', 'KGZ', 59.7), ('Khmer', 'KHM', 88.6), ('Kiribati', 'KIR', 98.9), ('Creole English', 'KNA', 100.0), ('Korean', 'KOR', 99.9), ('Arabic', 'KWT', 78.1), ('Lao', 'LAO', 67.2), ('Arabic', 'LBN', 93.0), ('Kpelle', 'LBR', 19.5), ('Arabic', 'LBY', 96.0), ('Creole French', 'LCA', 80.0), ('German', 'LIE', 89.0), ('Singali', 'LKA', 60.3), ('Sotho', 'LSO', 85.0), ('Lithuanian', 'LTU', 81.6), ('Luxembourgish', 'LUX', 64.4), ('Latvian', 'LVA', 55.1), ('Canton Chinese', 'MAC', 85.6), ('Arabic', 'MAR', 65.0), ('French', 'MCO', 41.9), ('Romanian', 'MDA', 61.9), ('Malagasy', 'MDG', 98.9), ('Dhivehi', 'MDV', 100.0), ('Spanish', 'MEX', 92.1), ('Marshallese', 'MHL', 96.8), ('Macedonian', 'MKD', 66.5), ('Bambara', 'MLI', 31.8), ('Maltese', 'MLT', 95.8), ('Burmese', 'MMR', 69.0), ('Mongolian', 'MNG', 78.8), ('Philippene Languages', 'MNP', 34.1), ('Makua', 'MOZ', 27.8), ('Hassaniya', 'MRT', 81.7), ('English', 'MSR', 0.0), ('Creole French', 'MTQ', 96.6), ('Creole French', 'MUS', 70.6), ('Chichewa', 'MWI', 58.3), ('Malay', 'MYS', 58.4), ('Mahoré', 'MYT', 41.9), ('Ovambo', 'NAM', 50.7), ('Malenasian Languages', 'NCL', 45.4), ('Hausa', 'NER', 53.1), ('English', 'NFK', 0.0), ('Joruba', 'NGA', 21.4), ('Spanish', 'NIC', 97.6), ('English', 'NIU', 0.0), ('Dutch', 'NLD', 95.6), ('Norwegian', 'NOR', 96.6), ('Nepali', 'NPL', 50.4), ('Nauru', 'NRU', 57.5), ('English', 'NZL', 87.0), ('Arabic', 'OMN', 76.7), ('Punjabi', 'PAK', 48.2), ('Spanish', 'PAN', 76.8), ('Pitcairnese', 'PCN', 0.0), ('Spanish', 'PER', 79.8), ('Pilipino', 'PHL', 29.3), ('Palau', 'PLW', 82.2), ('Papuan Languages', 'PNG', 78.1), ('Polish', 'POL', 97.6), ('Spanish', 'PRI', 51.3), ('Korean', 'PRK', 99.9), ('Portuguese', 'PRT', 99.0), ('Spanish', 'PRY', 55.1), ('Arabic', 'PSE', 95.9), ('Tahitian', 'PYF', 46.4), ('Arabic', 'QAT', 40.7), ('Creole French', 'REU', 91.5), ('Romanian', 'ROM', 90.7), ('Russian', 'RUS', 86.6), ('Rwanda', 'RWA', 100.0), ('Arabic', 'SAU', 95.0), ('Arabic', 'SDN', 49.4), ('Wolof', 'SEN', 48.1), ('Chinese', 'SGP', 77.1), ('English', 'SHN', 0.0), ('Norwegian', 'SJM', 0.0), ('Malenasian Languages', 'SLB', 85.6), ('Mende', 'SLE', 34.8), ('Spanish', 'SLV', 100.0), ('Italian', 'SMR', 100.0), ('Somali', 'SOM', 98.3), ('French', 'SPM', 0.0), ('Crioulo', 'STP', 86.3), ('Sranantonga', 'SUR', 81.0), ('Slovak', 'SVK', 85.6), ('Slovene', 'SVN', 87.9), ('Swedish', 'SWE', 89.5), ('Swazi', 'SWZ', 89.9), ('Seselwa', 'SYC', 91.3), ('Arabic', 'SYR', 90.0), ('English', 'TCA', 0.0), ('Sara', 'TCD', 27.7)]",ERROR,False
SPIDER_dev_819,world_1,Count the number of countries for which Spanish is the predominantly spoken language.,return countries ;return #1 where spanish is the predominantly spoken language ;return count the number of #2,"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode","SELECT countrylanguage.percentage FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'Spanish' )","[(1, 7.4), (1, 44.6), (1, 96.8), (1, 31.6), (1, 87.7), (1, 0.7), (1, 89.7), (1, 99.0), (1, 97.5), (1, 100.0), (1, 98.0), (1, 93.0), (1, 74.4), (1, 0.4), (1, 64.7), (1, 97.2), (1, 92.1), (1, 97.6), (1, 76.8), (1, 79.8), (1, 51.3), (1, 55.1), (1, 100.0), (1, 0.6), (1, 95.7), (1, 7.5), (1, 96.9), (1, 13.3)]","[(5.3,), (9.5,), (76.7,), (7.4,), (32.3,), (6.2,), (10.8,), (44.6,), (0.3,), (1.7,), (96.8,), (50.8,), (6.8,), (9.6,), (31.6,), (3.2,), (0.1,), (8.1,), (87.7,), (2.5,), (0.5,), (60.4,), (0.1,), (23.4,), (1.6,), (1.7,), (0.7,), (0.7,), (0.7,), (0.7,), (0.6,), (0.5,), (9.6,), (0.2,), (89.7,), (0.1,), (0.1,), (0.4,), (0.1,), (99.0,), (0.3,), (0.2,), (2.0,), (97.5,), (100.0,), (2.0,), (98.0,), (7.0,), (93.0,), (1.6,), (16.9,), (6.4,), (74.4,), (2.5,), (93.6,), (0.4,), (1.2,), (0.4,), (0.4,), (8.9,), (4.9,), (2.7,), (10.1,), (64.7,), (0.2,), (1.3,), (0.2,), (97.2,), (0.6,), (1.8,), (0.4,), (92.1,), (1.1,), (0.6,), (0.5,), (1.6,), (97.6,), (0.2,), (0.6,), (14.0,), (2.0,), (0.6,), (5.3,), (76.8,), (2.3,), (16.4,), (79.8,), (47.4,), (51.3,), (0.9,), (40.1,), (3.2,), (55.1,), (0.0,), (100.0,), (0.8,), (2.4,), (0.5,), (1.3,), (0.6,), (89.5,), (95.7,), (0.6,), (86.2,), (0.7,), (0.7,), (0.6,), (0.2,), (0.3,), (0.3,), (0.2,), (7.5,), (0.4,), (0.2,), (0.4,), (96.9,), (0.1,), (81.7,), (2.5,), (13.3,)]",False
SPIDER_dev_82,pets_1,What is the first name and gender of the all the students who have more than one pet?,"return students ;return pets of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return first names of #4 ;return genders of #4 ;return #5, #6","SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","SELECT student.fname, student.sex FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student ) GROUP BY student.stuid HAVING COUNT(pets.petid) > 1 )","[('Tracy', 'F')]","[('Tracy', 'F'), ('Tracy', 'F')]",True
SPIDER_dev_820,world_1,What are the codes of countries where Spanish is spoken by the largest percentage of people?,return countries ;return people of #1 ;return #2 that speak spanish ;return percentage of #3 for each #1 ;return #1 where #4 is highest ;return codes of #5,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode",ERROR,"[('ABW', 7.4), ('AND', 44.6), ('ARG', 96.8), ('BLZ', 31.6), ('BOL', 87.7), ('CAN', 0.7), ('CHL', 89.7), ('COL', 99.0), ('CRI', 97.5), ('CUB', 100.0), ('DOM', 98.0), ('ECU', 93.0), ('ESP', 74.4), ('FRA', 0.4), ('GTM', 64.7), ('HND', 97.2), ('MEX', 92.1), ('NIC', 97.6), ('PAN', 76.8), ('PER', 79.8), ('PRI', 51.3), ('PRY', 55.1), ('SLV', 100.0), ('SWE', 0.6), ('URY', 95.7), ('USA', 7.5), ('VEN', 96.9), ('VIR', 13.3)]",ERROR,False
SPIDER_dev_821,world_1,Return the codes of countries for which Spanish is the predominantly spoken language.,return countries ;return #1 where spanish is the predominantly spoken language ;return codes of #2,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode","SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND country.code IN ( SELECT country.code FROM country, countrylanguage WHERE country.code = countrylanguage.countrycode AND countrylanguage.language = 'Spanish' )","[('ABW', 7.4), ('AND', 44.6), ('ARG', 96.8), ('BLZ', 31.6), ('BOL', 87.7), ('CAN', 0.7), ('CHL', 89.7), ('COL', 99.0), ('CRI', 97.5), ('CUB', 100.0), ('DOM', 98.0), ('ECU', 93.0), ('ESP', 74.4), ('FRA', 0.4), ('GTM', 64.7), ('HND', 97.2), ('MEX', 92.1), ('NIC', 97.6), ('PAN', 76.8), ('PER', 79.8), ('PRI', 51.3), ('PRY', 55.1), ('SLV', 100.0), ('SWE', 0.6), ('URY', 95.7), ('USA', 7.5), ('VEN', 96.9), ('VIR', 13.3)]","[('ABW',), ('ABW',), ('ABW',), ('ABW',), ('AND',), ('AND',), ('AND',), ('AND',), ('ARG',), ('ARG',), ('ARG',), ('BLZ',), ('BLZ',), ('BLZ',), ('BLZ',), ('BOL',), ('BOL',), ('BOL',), ('BOL',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CAN',), ('CHL',), ('CHL',), ('CHL',), ('CHL',), ('COL',), ('COL',), ('COL',), ('COL',), ('COL',), ('CRI',), ('CRI',), ('CRI',), ('CRI',), ('CUB',), ('DOM',), ('DOM',), ('ECU',), ('ECU',), ('ESP',), ('ESP',), ('ESP',), ('ESP',), ('FRA',), ('FRA',), ('FRA',), ('FRA',), ('FRA',), ('FRA',), ('GTM',), ('GTM',), ('GTM',), ('GTM',), ('GTM',), ('HND',), ('HND',), ('HND',), ('HND',), ('MEX',), ('MEX',), ('MEX',), ('MEX',), ('MEX',), ('MEX',), ('NIC',), ('NIC',), ('NIC',), ('NIC',), ('PAN',), ('PAN',), ('PAN',), ('PAN',), ('PAN',), ('PAN',), ('PER',), ('PER',), ('PER',), ('PRI',), ('PRI',), ('PRY',), ('PRY',), ('PRY',), ('PRY',), ('SLV',), ('SLV',), ('SWE',), ('SWE',), ('SWE',), ('SWE',), ('SWE',), ('SWE',), ('URY',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('USA',), ('VEN',), ('VEN',), ('VEN',), ('VIR',), ('VIR',), ('VIR',)]",False
SPIDER_dev_822,orchestra,How many conductors are there?,return conductors ;return number of #1,SELECT count(*) FROM conductor,SELECT COUNT(conductor.conductor_id) FROM conductor,"[(12,)]","[(12,)]",True
SPIDER_dev_823,orchestra,Count the number of conductors.,return conductors ;return number of #1,SELECT count(*) FROM conductor,SELECT COUNT(conductor.conductor_id) FROM conductor,"[(12,)]","[(12,)]",True
SPIDER_dev_824,orchestra,List the names of conductors in ascending order of age.,return conductors ;return names of #1 ;return ages of #1 ;return #2 sorted by #3 in ascending order,SELECT Name FROM conductor ORDER BY Age ASC,SELECT conductor.name FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ) ORDER BY conductor.age ASC,"[('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]","[('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]",True
SPIDER_dev_825,orchestra,"What are the names of conductors, ordered by age?",return conductors ;return names of #1 ;return ages of #1 ;return #2 sorted by #3,SELECT Name FROM conductor ORDER BY Age ASC,SELECT conductor.name FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ) ORDER BY conductor.age ASC,"[('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]","[('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]",True
SPIDER_dev_826,orchestra,"What are the names of conductors whose nationalities are not ""USA""?",return conductors ;return nationalities of #1 ;return #1 where #2 is not usa ;return names of #3,SELECT Name FROM conductor WHERE Nationality != 'USA',SELECT conductor.name FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ) AND conductor.nationality != 'USA' ),"[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]","[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]",True
SPIDER_dev_827,orchestra,"Return the names of conductors that do not have the nationality ""USA"".",return conductors ;return nationalities of #1 ;return #1 where #2 is not usa ;return names of #3,SELECT Name FROM conductor WHERE Nationality != 'USA',SELECT conductor.name FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ) AND conductor.nationality != 'USA' ),"[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]","[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]",True
SPIDER_dev_828,orchestra,What are the record companies of orchestras in descending order of years in which they were founded?,return orchestras ;return record companies of #1 ;return years founded of #1 ;return #2 sorted by #3 in descending order,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,SELECT orchestra.record_company FROM orchestra WHERE orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra ) ORDER BY orchestra.year_of_founded DESC,"[('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]","[('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]",True
SPIDER_dev_829,orchestra,"Return the record companies of orchestras, sorted descending by the years in which they were founded.",return orchestras ;return record companies of #1 ;return years founded of #1 ;return #2 sorted by #3 in descending order,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,SELECT orchestra.record_company FROM orchestra WHERE orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra ) ORDER BY orchestra.year_of_founded DESC,"[('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]","[('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]",True
SPIDER_dev_83,pets_1,Find the last name of the student who has a cat that is age 3.,return students ;return cats of #1 ;return ages of #2 ;return #1 where #3 is 3 ;return last name of #4,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',"SELECT student.lname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student WHERE student.stuid IN ( SELECT student.stuid FROM student ) ) AND pets.pet_age = 3 )","[('Smith',)]","[('Smith',)]",True
SPIDER_dev_830,orchestra,What is the average attendance of shows?,return shows ;return attendance of #1 ;return average of #2,SELECT avg(Attendance) FROM SHOW,SELECT AVG(show.attendance) FROM show WHERE show.show_id IN ( SELECT show.show_id FROM show ),"[(1326.4,)]","[(1326.4,)]",True
SPIDER_dev_831,orchestra,Return the average attendance across all shows.,return shows ;return attendance of #1 ;return average of #2,SELECT avg(Attendance) FROM SHOW,SELECT AVG(show.attendance) FROM show WHERE show.show_id IN ( SELECT show.show_id FROM show ),"[(1326.4,)]","[(1326.4,)]",True
SPIDER_dev_832,orchestra,"What are the maximum and minimum share of performances whose type is not ""Live final"".","return performances ;return types of #1 ;return #1 where #2 is live final ;return #1 besides #3 ;return shares of #4 ;return maximum of #5 ;return minimum of #5 ;return #6, #7","SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","SELECT MAX(performance.share), MIN(performance.share) FROM performance WHERE performance.performance_id IN ( SELECT performance.performance_id FROM performance WHERE performance.performance_id NOT IN ( SELECT performance.performance_id FROM performance WHERE performance.performance_id IN ( SELECT performance.performance_id FROM performance ) AND performance.type = 'Live final' ) )","[('44.7%', '22.7%')]","[('44.7%', '22.7%')]",True
SPIDER_dev_833,orchestra,"Return the maximum and minimum shares for performances that do not have the type ""Live final"".","return performances ;return types of #1 ;return #1 where #2 is not live final ;return shares of #3 ;return maximum of #4 ;return minimum of #4 ;return #5, #6","SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","SELECT MAX(performance.share), MIN(performance.share) FROM performance WHERE performance.performance_id IN ( SELECT performance.performance_id FROM performance WHERE performance.performance_id IN ( SELECT performance.performance_id FROM performance ) AND performance.type != 'Live final' )","[('44.7%', '22.7%')]","[('44.7%', '22.7%')]",True
SPIDER_dev_834,orchestra,How many different nationalities do conductors have?,return conductors ;return different nationalities of #1 ;return number of #2,SELECT count(DISTINCT Nationality) FROM conductor,SELECT COUNT(DISTINCT conductor.nationality) FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ),"[(3,)]","[(3,)]",True
SPIDER_dev_835,orchestra,Count the number of different nationalities of conductors.,return conductors ;return different nationalities of #1 ;return count the number of #2,SELECT count(DISTINCT Nationality) FROM conductor,SELECT DISTINCT conductor.nationality FROM conductor WHERE conductor.nationality IN ( SELECT DISTINCT conductor.nationality FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ) ),"[(3,)]","[('USA',), ('UK',), ('France',)]",False
SPIDER_dev_836,orchestra,List names of conductors in descending order of years of work.,return conductors ;return names of #1 ;return years of work of #1 ;return #2 sorted by #3 in descending order,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,SELECT conductor.name FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ) ORDER BY conductor.year_of_work DESC,"[('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]","[('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]",True
SPIDER_dev_837,orchestra,"What are the names of conductors, sorted descending by the number of years they have worked?",return conductors ;return names of #1 ;return years worked of #1 ;return number of #3 for each #1 ;return #2 sorted by #4 in descending order,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,SELECT conductor.name FROM conductor WHERE conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ) ORDER BY conductor.year_of_work DESC,"[('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]","[('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]",True
SPIDER_dev_838,orchestra,List the name of the conductor with the most years of work.,return conductors ;return years of work of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,"SELECT conductor.name FROM conductor, orchestra, performance WHERE performance.orchestra_id = orchestra.orchestra_id AND orchestra.conductor_id = conductor.conductor_id AND performance.type IN ( SELECT performance.type FROM conductor, orchestra, performance WHERE performance.orchestra_id = orchestra.orchestra_id AND orchestra.conductor_id = conductor.conductor_id AND performance.type IN ( SELECT performance.type FROM performance ) GROUP BY performance.type ORDER BY COUNT(conductor.year_of_work) DESC LIMIT 1 )","[('Robert Craft',)]","[('Robert Craft',)]",True
SPIDER_dev_839,orchestra,What is the name of the conductor who has worked the greatest number of years?,return conductors ;return years that #1 worked ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,"SELECT conductor.name FROM conductor, orchestra, performance WHERE performance.orchestra_id = orchestra.orchestra_id AND orchestra.conductor_id = conductor.conductor_id AND performance.type IN ( SELECT performance.type FROM conductor, orchestra, performance WHERE performance.orchestra_id = orchestra.orchestra_id AND orchestra.conductor_id = conductor.conductor_id AND performance.type IN ( SELECT performance.type FROM performance ) GROUP BY performance.type ORDER BY COUNT(conductor.year_of_work) DESC LIMIT 1 )","[('Robert Craft',)]","[('Robert Craft',)]",True
SPIDER_dev_84,pets_1,What is the last name of the student who has a cat that is 3 years old?,return students ;return cats of #1 ;return how old are #2 ;return #1 where #3 is 3 years ;return last name of #4,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',"SELECT student.lname FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student WHERE student.stuid IN ( SELECT student.stuid FROM student ) ) AND pets.pet_age = 3 )","[('Smith',)]","[('Smith',)]",True
SPIDER_dev_840,orchestra,Show the names of conductors and the orchestras they have conducted.,"return conductors ;return names of #1 ;return orchestras #1 conducted ;return #2, #3","SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","SELECT conductor.name, orchestra.orchestra FROM conductor, orchestra WHERE conductor.conductor_id = orchestra.conductor_id AND conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor )","[('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]","[('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]",True
SPIDER_dev_841,orchestra,What are the names of conductors as well as the corresonding orchestras that they have conducted?,"return conductors ;return names of #1 ;return orchestras #1 conducted ;return #3 that are corresonding ;return #2, #4","SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","SELECT conductor.name, orchestra.orchestra_id FROM conductor, orchestra, performance WHERE orchestra.orchestra_id = performance.orchestra_id AND conductor.conductor_id = orchestra.conductor_id AND conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor )","[('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]","[('Antal Doráti', 1), ('Igor Stravinsky', 2), ('Colin Davis', 3), ('Paul Jorgensen', 4), ('Antal Brown', 5), ('Seiji Ozawa', 11), ('Charles Dutoit', 6), ('Gerard Schwarz', 7), ('Pierre Boulez', 8), ('Valeri Gergiev', 9), ('Robert Craft', 10)]",False
SPIDER_dev_842,orchestra,Show the names of conductors that have conducted more than one orchestras.,return conductors ;return orchestras #1 conducted ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return names of #4,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1,"SELECT conductor.name FROM conductor, orchestra WHERE conductor.conductor_id = orchestra.conductor_id AND conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor, orchestra WHERE conductor.conductor_id = orchestra.conductor_id AND conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ) GROUP BY conductor.conductor_id HAVING COUNT(orchestra.orchestra_id) > 1 )",[],[],True
SPIDER_dev_843,orchestra,What are the names of conductors who have conducted at more than one orchestra?,return conductors ;return orchestras #1 conducted at ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return names of #4,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1,"SELECT conductor.name FROM conductor, orchestra WHERE conductor.conductor_id = orchestra.conductor_id AND conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor, orchestra WHERE conductor.conductor_id = orchestra.conductor_id AND conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor ) GROUP BY conductor.conductor_id HAVING COUNT(orchestra.orchestra_id) > 1 )",[],[],True
SPIDER_dev_844,orchestra,Show the name of the conductor that has conducted the most number of orchestras.,return conductors ;return orchestras #1 conducted ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,"SELECT conductor.name FROM conductor, orchestra WHERE orchestra.conductor_id = conductor.conductor_id AND orchestra.conductor_id IN ( SELECT orchestra.conductor_id FROM orchestra WHERE orchestra.conductor_id IN ( SELECT orchestra.conductor_id FROM orchestra ) GROUP BY orchestra.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1 )","[('Michael Tilson Thomas',)]","[('Michael Tilson Thomas',)]",True
SPIDER_dev_845,orchestra,What is the name of the conductor who has conducted the most orchestras?,return conductors ;return orchestras #1 conducted ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,"SELECT conductor.name FROM conductor, orchestra WHERE orchestra.conductor_id = conductor.conductor_id AND orchestra.conductor_id IN ( SELECT orchestra.conductor_id FROM orchestra WHERE orchestra.conductor_id IN ( SELECT orchestra.conductor_id FROM orchestra ) GROUP BY orchestra.conductor_id ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1 )","[('Michael Tilson Thomas',)]","[('Michael Tilson Thomas',)]",True
SPIDER_dev_846,orchestra,Please show the name of the conductor that has conducted orchestras founded after 2008.,return orchestras ;return #1 founded after 2008 ;return conductors that conducted #2 ;return names of #3,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,"SELECT conductor.name FROM conductor, orchestra WHERE orchestra.conductor_id = conductor.conductor_id AND conductor.conductor_id IN ( SELECT conductor.conductor_id FROM conductor, orchestra WHERE orchestra.conductor_id = conductor.conductor_id AND orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra WHERE orchestra.year_of_founded > 2008 ) )","[('Igor Stravinsky',)]","[('Igor Stravinsky',)]",True
SPIDER_dev_847,orchestra,What are the names of conductors who have conducted orchestras founded after the year 2008?,return orchestras ;return #1 founded after 2008 ;return conductors who conducted #2 ;return names of #3,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,"SELECT conductor.name FROM conductor, orchestra WHERE orchestra.conductor_id = conductor.conductor_id AND conductor.age IN ( SELECT conductor.age FROM conductor, orchestra WHERE orchestra.conductor_id = conductor.conductor_id AND orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra WHERE orchestra.year_of_founded > 2008 ) )","[('Igor Stravinsky',)]","[('Igor Stravinsky',)]",True
SPIDER_dev_848,orchestra,Please show the different record companies and the corresponding number of orchestras.,"return record companies ;return orchestras of #1 ;return number of #2 for each #1 ;return #1, #3","SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","SELECT orchestra.record_company, COUNT(orchestra.orchestra_id) FROM orchestra WHERE orchestra.record_company IN ( SELECT DISTINCT orchestra.record_company FROM orchestra ) GROUP BY orchestra.record_company","[('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]","[('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]",True
SPIDER_dev_849,orchestra,How many orchestras does each record company manage?,return record companies ;return orchestras that #1 manage ;return number of #2 for each #1,"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","SELECT orchestra.record_company, COUNT(orchestra.record_company) FROM orchestra WHERE orchestra.record_company IN ( SELECT orchestra.record_company FROM orchestra ) GROUP BY orchestra.record_company","[('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]","[('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]",True
SPIDER_dev_85,pets_1,Find the average age of students who do not have any pet.,return students ;return #1 who do not have any pet ;return ages of #2 ;return average of #3,select avg(age) from student where stuid not in (select stuid from has_pet),"SELECT AVG(student.age) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid )","[(19.625,)]","[(18.666666666666668,)]",False
SPIDER_dev_850,orchestra,Please show the record formats of orchestras in ascending order of count.,return orchestras ;return record formats of #1 ;return number of #2 for each #1 ;return #2 sorted by #3 in ascending order,SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,SELECT orchestra.major_record_format FROM orchestra WHERE orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra ) ORDER BY orchestra.major_record_format ASC,"[('CD / LP',), ('DVD',), ('CD',)]","[('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD / LP',), ('DVD',)]",True
SPIDER_dev_851,orchestra,"What are the major record formats of orchestras, sorted by their frequency?",return orchestras ;return record formats of #1 ;return #2 that are major ;return frequency of #3 ;return #3 sorted by #4,SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,SELECT orchestra.major_record_format FROM orchestra WHERE orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra ) ORDER BY orchestra.major_record_format ASC,"[('CD / LP',), ('DVD',), ('CD',)]","[('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD',), ('CD / LP',), ('DVD',)]",True
SPIDER_dev_852,orchestra,List the record company shared by the most number of orchestras.,return record companies ;return orchestras of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,SELECT orchestra.record_company FROM orchestra WHERE orchestra.record_company IN ( SELECT orchestra.record_company FROM orchestra ) GROUP BY orchestra.record_company ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1,"[('Decca Records',)]","[('Decca Records',)]",True
SPIDER_dev_853,orchestra,What is the record company used by the greatest number of orchestras?,return record companies ;return orchestras of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,SELECT orchestra.record_company FROM orchestra WHERE orchestra.record_company IN ( SELECT orchestra.record_company FROM orchestra ) GROUP BY orchestra.record_company ORDER BY COUNT(orchestra.orchestra_id) DESC LIMIT 1,"[('Decca Records',)]","[('Decca Records',)]",True
SPIDER_dev_854,orchestra,List the names of orchestras that have no performance.,return orchestras ;return #1 with performances ;return #1 besides #2 ;return names of #3,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),"SELECT orchestra.orchestra FROM orchestra WHERE orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra WHERE orchestra.orchestra NOT IN ( SELECT orchestra.orchestra FROM orchestra, performance WHERE orchestra.orchestra_id = performance.orchestra_id ) )","[('San Francisco Symphony Orchestra',)]","[('San Francisco Symphony Orchestra',)]",True
SPIDER_dev_855,orchestra,What are the orchestras that do not have any performances?,return orchestras ;return #1 that do not have performances,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),"SELECT orchestra.orchestra FROM orchestra, performance, show WHERE orchestra.orchestra_id = performance.orchestra_id AND performance.performance_id = show.performance_id","[('San Francisco Symphony Orchestra',)]","[('London Symphony Orchestra',), ('Columbia Symphony Orchestra',), ('Royal Concertgebouw Orchestra',), ('Royal Danish Orchestra',), ('Detroit Symphony Orchestra',)]",False
SPIDER_dev_856,orchestra,Show the record companies shared by orchestras founded before 2003 and after 2003.,return orchestras ;return #1 founded before 2003 ;return #1 founded after 2003 ;return record companies of both #2 and #3,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,SELECT DISTINCT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded < 2003 AND orchestra.record_company IN ( SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded > 2003 ),"[('Decca Records',)]","[('Decca Records',)]",True
SPIDER_dev_857,orchestra,What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?,return orchestras ;return #1 founded before 2003 ;return #1 founded after 2003 ;return record companies used by both #2 and #3,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,SELECT DISTINCT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded < 2003 AND orchestra.record_company IN ( SELECT orchestra.record_company FROM orchestra WHERE orchestra.year_of_founded > 2003 ),"[('Decca Records',)]","[('Decca Records',)]",True
SPIDER_dev_858,orchestra,"Find the number of orchestras whose record format is ""CD"" or ""DVD"".",return orchestras ;return record formats of #1 ;return #1 where #2 is cd ;return #1 where #2 is dvd ;return #3 or #4 ;return number of #5,"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""",SELECT COUNT(orchestra.orchestra) FROM orchestra WHERE orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra ) AND ((orchestra.major_record_format = 'CD') OR (orchestra.major_record_format = 'DVD')),"[(11,)]","[(11,)]",True
SPIDER_dev_859,orchestra,Count the number of orchestras that have CD or DVD as their record format.,return orchestras ;return record formats of #1 ;return #1 where #2 is cd ;return #1 where #2 is dvd ;return #3 or #4 ;return number of #5,"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""",SELECT COUNT(orchestra.orchestra) FROM orchestra WHERE orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra ) AND ((orchestra.major_record_format = 'CD') OR (orchestra.major_record_format = 'DVD')),"[(11,)]","[(11,)]",True
SPIDER_dev_86,pets_1,What is the average age for all students who do not own any pets?,return students ;return #1 who do not own pets ;return ages of #2 ;return average of #3,select avg(age) from student where stuid not in (select stuid from has_pet),"SELECT AVG(student.age) FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid AND student.stuid IN ( SELECT student.stuid FROM student, has_pet, pets WHERE student.stuid = has_pet.stuid AND has_pet.petid = pets.petid )","[(19.625,)]","[(18.666666666666668,)]",False
SPIDER_dev_860,orchestra,Show the years in which orchestras that have given more than one performance are founded.,return orchestras ;return performances of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return years founded in of #4,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1,"SELECT orchestra.year_of_founded FROM orchestra, performance WHERE orchestra.orchestra_id = performance.orchestra_id AND orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra, performance WHERE orchestra.orchestra_id = performance.orchestra_id AND orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra ) GROUP BY orchestra.orchestra HAVING COUNT(performance.performance_id) > 1 )",[],[],True
SPIDER_dev_861,orchestra,What are years of founding for orchestras that have had more than a single performance?,return orchestras ;return performances of #1 ;return number of #2 for each #1 ;return #1 where #3 is higher than one ;return founding years of #4,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1,"SELECT orchestra.year_of_founded FROM orchestra, performance WHERE orchestra.orchestra_id = performance.orchestra_id AND orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra, performance WHERE orchestra.orchestra_id = performance.orchestra_id AND orchestra.orchestra IN ( SELECT orchestra.orchestra FROM orchestra ) GROUP BY orchestra.orchestra HAVING COUNT(performance.performance_id) > 1 )",[],[],True
SPIDER_dev_862,network_1,How many high schoolers are there?,return high schoolers ;return number of #1,SELECT count(*) FROM Highschooler,SELECT COUNT(highschooler.id) FROM highschooler,"[(16,)]","[(16,)]",True
SPIDER_dev_863,network_1,Count the number of high schoolers.,return high schoolers ;return count the number of #1,SELECT count(*) FROM Highschooler,SELECT highschooler.grade FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler ),"[(16,)]","[(12,), (10,), (11,), (12,), (11,), (9,), (10,), (11,), (9,), (10,), (12,), (9,), (9,), (10,), (11,), (12,)]",False
SPIDER_dev_864,network_1,Show the names and grades of each high schooler.,"return high schoolers ;return names of #1 ;return grades of #1 ;return #2, #3","SELECT name ,  grade FROM Highschooler","SELECT highschooler.name, highschooler.grade FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler )","[('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]","[('John', 12), ('Haley', 10), ('Alexis', 11), ('Jordan', 12), ('Austin', 11), ('Tiffany', 9), ('Kris', 10), ('Jessica', 11), ('Jordan', 9), ('Brittany', 10), ('Logan', 12), ('Gabriel', 9), ('Cassandra', 9), ('Andrew', 10), ('Gabriel', 11), ('Kyle', 12)]",True
SPIDER_dev_865,network_1,What are the names and grades for each high schooler?,"return high schoolers ;return names of #1 ;return grades of #1 ;return #2, #3","SELECT name ,  grade FROM Highschooler","SELECT highschooler.name, highschooler.grade FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler )","[('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]","[('John', 12), ('Haley', 10), ('Alexis', 11), ('Jordan', 12), ('Austin', 11), ('Tiffany', 9), ('Kris', 10), ('Jessica', 11), ('Jordan', 9), ('Brittany', 10), ('Logan', 12), ('Gabriel', 9), ('Cassandra', 9), ('Andrew', 10), ('Gabriel', 11), ('Kyle', 12)]",True
SPIDER_dev_866,network_1,Show all the grades of the high schoolers.,return high schoolers ;return grades of #1,SELECT grade FROM Highschooler,SELECT highschooler.grade FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler ),"[(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]","[(12,), (10,), (11,), (12,), (11,), (9,), (10,), (11,), (9,), (10,), (12,), (9,), (9,), (10,), (11,), (12,)]",True
SPIDER_dev_867,network_1,What is the grade of each high schooler?,return high schoolers ;return grades of #1,SELECT grade FROM Highschooler,SELECT highschooler.grade FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler ),"[(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]","[(12,), (10,), (11,), (12,), (11,), (9,), (10,), (11,), (9,), (10,), (12,), (9,), (9,), (10,), (11,), (12,)]",True
SPIDER_dev_868,network_1,What grade is Kyle in?,return kyle ;return grade of #1,"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""",SELECT highschooler.grade FROM highschooler WHERE highschooler.name IN ( SELECT highschooler.name FROM highschooler WHERE highschooler.name = 'Kyle' ),"[(12,)]","[(12,)]",True
SPIDER_dev_869,network_1,Return the grade for the high schooler named Kyle.,return high schoolers ;return #1 named kyle ;return grade of #2,"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""",SELECT highschooler.grade FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler WHERE highschooler.name = 'Kyle' ),"[(12,)]","[(12,)]",True
SPIDER_dev_87,car_1,How many continents are there?,return continents ;return number of #1,SELECT count(*) FROM CONTINENTS;,SELECT COUNT(continents.continent) FROM continents,"[(5,)]","[(5,)]",True
SPIDER_dev_870,network_1,Show the names of all high schoolers in grade 10.,return high schoolers ;return grades of #1 ;return #1 where #2 is 10 ;return names of #3,SELECT name FROM Highschooler WHERE grade  =  10,SELECT highschooler.name FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler ) AND highschooler.grade = 10 ),"[('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]","[('Haley',), ('Kris',), ('Brittany',), ('Andrew',)]",True
SPIDER_dev_871,network_1,What are the names of all high schoolers in grade 10?,return high schoolers ;return grades of #1 ;return #1 where #2 is 10 ;return names of #3,SELECT name FROM Highschooler WHERE grade  =  10,SELECT highschooler.name FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler ) AND highschooler.grade = 10 ),"[('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]","[('Haley',), ('Kris',), ('Brittany',), ('Andrew',)]",True
SPIDER_dev_872,network_1,Show the ID of the high schooler named Kyle.,return high schooler ;return #1 named kyle ;return id of #2,"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""",SELECT highschooler.id FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler WHERE highschooler.name = 'Kyle' ),"[(1934,)]","[(1934,)]",True
SPIDER_dev_873,network_1,What is Kyle's id?,return kyle ;return id of #1,"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""",SELECT highschooler.id FROM highschooler WHERE highschooler.name IN ( SELECT highschooler.name FROM highschooler WHERE highschooler.name = 'Kyle' ),"[(1934,)]","[(1934,)]",True
SPIDER_dev_874,network_1,How many high schoolers are there in grade 9 or 10?,return high schoolers ;return #1 in grade 9 ;return #1 in grade 10 ;return number of #2 ;return number of #3 ;return sum of #4 and #5,SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,SELECT (SELECT COUNT(highschooler.id) FROM highschooler WHERE highschooler.grade = 9) + (SELECT COUNT(highschooler.id) FROM highschooler WHERE highschooler.grade = 10),"[(8,)]","[(8,)]",True
SPIDER_dev_875,network_1,Count the number of high schoolers in grades 9 or 10.,return high schoolers ;return #1 in grades 9 ;return #1 in grades 10 ;return #2 or #3 ;return number of #4,SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,SELECT COUNT(highschooler.id) FROM highschooler WHERE ((highschooler.grade = 9) OR (highschooler.grade = 10)),"[(8,)]","[(8,)]",True
SPIDER_dev_876,network_1,Show the number of high schoolers for each grade.,return grades ;return high schoolers of #1 ;return number of #2 for each #1,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","SELECT highschooler.grade, COUNT(highschooler.grade) FROM highschooler WHERE highschooler.grade IN ( SELECT highschooler.grade FROM highschooler ) GROUP BY highschooler.grade","[(9, 4), (10, 4), (11, 4), (12, 4)]","[(9, 4), (10, 4), (11, 4), (12, 4)]",True
SPIDER_dev_877,network_1,How many high schoolers are in each grade?,return grades ;return high schoolers in #1 ;return number of #2 for each #1,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","SELECT highschooler.grade, COUNT(highschooler.grade) FROM highschooler WHERE highschooler.grade IN ( SELECT highschooler.grade FROM highschooler ) GROUP BY highschooler.grade","[(9, 4), (10, 4), (11, 4), (12, 4)]","[(9, 4), (10, 4), (11, 4), (12, 4)]",True
SPIDER_dev_878,network_1,Which grade has the most high schoolers?,return grades ;return high schoolers in #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,SELECT highschooler.grade FROM highschooler WHERE highschooler.grade IN ( SELECT highschooler.grade FROM highschooler ) GROUP BY highschooler.grade ORDER BY COUNT(highschooler.grade) DESC LIMIT 1,"[(12,)]","[(12,)]",True
SPIDER_dev_879,network_1,Return the grade that has the greatest number of high schoolers.,return grades ;return high schoolers of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,SELECT highschooler.grade FROM highschooler WHERE highschooler.grade IN ( SELECT highschooler.grade FROM highschooler ) GROUP BY highschooler.grade ORDER BY COUNT(highschooler.grade) DESC LIMIT 1,"[(12,)]","[(12,)]",True
SPIDER_dev_88,car_1,What is the number of continents?,return continents ;return number of #1,SELECT count(*) FROM CONTINENTS;,SELECT COUNT(continents.continent) FROM continents,"[(5,)]","[(5,)]",True
SPIDER_dev_880,network_1,Show me all grades that have at least 4 students.,return grades ;return students in #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 4,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,SELECT highschooler.grade FROM highschooler WHERE highschooler.grade IN ( SELECT highschooler.grade FROM highschooler ) GROUP BY highschooler.grade HAVING COUNT(highschooler.grade) >= 4,"[(9,), (10,), (11,), (12,)]","[(9,), (10,), (11,), (12,)]",True
SPIDER_dev_881,network_1,Which grades have 4 or more high schoolers?,return grades ;return high schoolers in #1 ;return number of #2 for each #1 ;return #1 where #3 is 4 or more,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,SELECT highschooler.grade FROM highschooler WHERE highschooler.grade IN ( SELECT highschooler.grade FROM highschooler ) GROUP BY highschooler.grade HAVING COUNT(highschooler.grade) >= 4,"[(9,), (10,), (11,), (12,)]","[(9,), (10,), (11,), (12,)]",True
SPIDER_dev_882,network_1,Show the student IDs and numbers of friends corresponding to each.,"return students ;return student ids of #1 ;return friends of #1 ;return number of #3 for each #1 ;return #2, #4","SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","SELECT friend.student_id, COUNT(friend.student_id) FROM friend WHERE friend.student_id IN ( SELECT friend.student_id FROM friend ) GROUP BY friend.student_id","[(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]","[(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]",True
SPIDER_dev_883,network_1,How many friends does each student have?,return students ;return friends of #1 ;return number of #2 for each #1,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","SELECT friend.student_id, COUNT(friend.student_id) FROM friend WHERE friend.student_id IN ( SELECT friend.student_id FROM friend ) GROUP BY friend.student_id","[(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]","[(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]",True
SPIDER_dev_884,network_1,Show the names of high school students and their corresponding number of friends.,"return students ;return #1 in high school ;return names of #2 ;return friends of #2 ;return number of #4 for each #2 ;return #3, #5","SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","SELECT friend.student_id, COUNT(friend.student_id) FROM friend, highschooler WHERE friend.student_id = highschooler.id AND friend.student_id IN ( SELECT friend.student_id FROM friend, highschooler WHERE friend.student_id = highschooler.id ) GROUP BY friend.student_id","[('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]","[(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]",False
SPIDER_dev_885,network_1,What are the names of the high schoolers and how many friends does each have?,"return high schoolers ;return names of #1 ;return friends of #1 ;return number of #3 for each #1 ;return #2, #4","SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","SELECT highschooler.name, highschooler.id, COUNT(friend.student_id) FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler ) GROUP BY highschooler.id","[('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]","[('Haley', 1101, 1), ('Alexis', 1247, 2), ('Jordan', 1304, 1), ('Austin', 1316, 1), ('Tiffany', 1381, 1), ('Kris', 1468, 2), ('Jessica', 1501, 1), ('Jordan', 1510, 2), ('Logan', 1661, 1), ('Gabriel', 1689, 2), ('Cassandra', 1709, 1), ('Andrew', 1782, 3), ('Gabriel', 1911, 1), ('Kyle', 1934, 1)]",False
SPIDER_dev_886,network_1,What is the name of the high schooler who has the greatest number of friends?,return high schoolers ;return friends of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"SELECT highschooler.name FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler ) GROUP BY highschooler.id ORDER BY COUNT(friend.student_id) DESC LIMIT 1 )","[('Andrew',)]","[('Andrew',), ('Andrew',), ('Andrew',)]",True
SPIDER_dev_887,network_1,Return the name of the high school student with the most friends.,return high school students ;return friends of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"SELECT highschooler.name FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler ) GROUP BY highschooler.id ORDER BY COUNT(friend.student_id) DESC LIMIT 1 )","[('Andrew',)]","[('Andrew',), ('Andrew',), ('Andrew',)]",True
SPIDER_dev_888,network_1,Show the names of high schoolers who have at least 3 friends.,return high schoolers ;return friends of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 3 ;return names of #4,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,"SELECT highschooler.name FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler ) GROUP BY highschooler.id HAVING COUNT(friend.student_id) >= 3 )","[('Andrew',)]","[('Andrew',), ('Andrew',), ('Andrew',)]",True
SPIDER_dev_889,network_1,What are the names of high schoolers who have 3 or more friends?,return high schoolers ;return friends of #1 ;return number of #2 for each #1 ;return #1 where #3 is 3 or more ;return names of #4,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,"SELECT highschooler.name FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler ) GROUP BY highschooler.id HAVING COUNT(friend.student_id) >= 3 )","[('Andrew',)]","[('Andrew',), ('Andrew',), ('Andrew',)]",True
SPIDER_dev_89,car_1,"How many countries does each continent have? List the continent id, continent name and the number of countries.","return continents ;return countries of #1 ;return number of #2 for each #1 ;return continent ids of #1 ;return names of #1 ;return #4, #5, #3","SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","SELECT continents.contid, continents.continent, COUNT(countries.countryid) FROM countries, continents WHERE continents.contid = countries.continent AND continents.continent IN ( SELECT continents.continent FROM continents ) GROUP BY continents.continent","[(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]","[(4, 'africa', 2), (1, 'america', 3), (3, 'asia', 2), (5, 'australia', 2), (2, 'europe', 6)]",True
SPIDER_dev_890,network_1,Show the names of all of the high schooler Kyle's friends.,return kyle ;return friends of #1 ;return #2 that are high schoolers ;return names of #3,"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""","SELECT friend.student_id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND friend.student_id IN ( SELECT friend.student_id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.name IN ( SELECT highschooler.name FROM highschooler WHERE highschooler.name = 'Kyle' ) )","[('Jordan',)]","[(1934,)]",False
SPIDER_dev_891,network_1,Return the names of friends of the high school student Kyle.,return the high school student kyle ;return friends of #1 ;return names of #2,"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""","SELECT friend.student_id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND friend.student_id IN ( SELECT friend.student_id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.name IN ( SELECT highschooler.name FROM highschooler WHERE highschooler.name = 'Kyle' ) )","[('Jordan',)]","[(1934,)]",False
SPIDER_dev_892,network_1,How many friends does the high school student Kyle have?,return the high school student kyle ;return friends of #1 ;return number of #2,"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","SELECT COUNT(friend.student_id) FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.name IN ( SELECT highschooler.name FROM highschooler WHERE highschooler.name = 'Kyle' )","[(1,)]","[(1,)]",True
SPIDER_dev_893,network_1,Count the number of friends Kyle has.,return kyle ;return friends of #1 ;return number of #2,"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","SELECT COUNT(friend.student_id) FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.name IN ( SELECT highschooler.name FROM highschooler WHERE highschooler.name = 'Kyle' )","[(1,)]","[(1,)]",True
SPIDER_dev_894,network_1,Show ids of all students who do not have any friends.,return students ;return friends of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least one ;return #1 besides #4 ;return ids of #5,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,"SELECT likes.student_id FROM likes WHERE likes.student_id IN ( SELECT likes.student_id FROM likes WHERE likes.student_id NOT IN ( SELECT likes.student_id FROM friend, likes WHERE likes.student_id = friend.student_id AND likes.student_id IN ( SELECT likes.student_id FROM likes ) GROUP BY likes.student_id HAVING COUNT(friend.student_id) >= 1 ) )","[(1025,), (1641,)]","[(1025,), (1641,)]",True
SPIDER_dev_895,network_1,What are the ids of high school students who do not have friends?,return high school students ;return #1 who do not have friends ;return ids of #2,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,"SELECT likes.student_id FROM friend, highschooler, likes WHERE highschooler.id = likes.student_id AND highschooler.id = friend.student_id AND highschooler.grade IN ( SELECT highschooler.grade FROM friend, highschooler WHERE highschooler.id = friend.student_id )","[(1025,), (1641,)]","[(1689,), (1709,), (1689,), (1782,), (1782,), (1782,), (1247,), (1247,), (1911,), (1501,), (1316,), (1934,)]",False
SPIDER_dev_896,network_1,Show names of all high school students who do not have any friends.,return high school students ;return #1 with friends ;return #1 besides #2 ;return names of #3,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,"SELECT highschooler.name FROM highschooler WHERE highschooler.id IN ( SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN ( SELECT highschooler.id FROM friend, highschooler WHERE highschooler.id = friend.student_id ) )","[('Brittany',), ('John',)]","[('John',), ('Brittany',)]",True
SPIDER_dev_897,network_1,What are the names of students who have no friends?,return students ;return friends of #1 ;return number of #2 for each #1 ;return #1 where #3 is zero ;return names of #4,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,SELECT friend.student_id FROM friend WHERE friend.student_id IN ( SELECT friend.student_id FROM friend WHERE friend.student_id IN ( SELECT friend.student_id FROM friend ) GROUP BY friend.student_id HAVING COUNT(friend.student_id) = 0 ),"[('Brittany',), ('John',)]",[],False
SPIDER_dev_898,network_1,Show the ids of high schoolers who have friends and are also liked by someone else.,return high schoolers ;return friends of #1 ;return #1 that are liked by someone else ;return #1 in both #2 and #3 ;return ids of #4,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,"SELECT DISTINCT highschooler.id FROM friend, highschooler, likes WHERE highschooler.id = friend.student_id AND highschooler.id = likes.liked_id AND highschooler.id IN ( SELECT DISTINCT highschooler.id FROM friend, highschooler, likes WHERE highschooler.id = friend.student_id AND highschooler.id = likes.liked_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler ) )","[(1101,), (1247,), (1304,), (1468,), (1501,), (1689,), (1709,), (1934,)]","[(1101,), (1247,), (1304,), (1468,), (1501,), (1689,), (1709,), (1934,)]",True
SPIDER_dev_899,network_1,What are the ids of students who both have friends and are liked?,return students ;return friends of #1 ;return #1 who are liked ;return #1 in both #2 and #3 ;return ids of #4,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,"SELECT DISTINCT likes.student_id FROM friend, likes WHERE friend.student_id = likes.student_id AND friend.student_id IN ( SELECT DISTINCT friend.student_id FROM friend, likes WHERE friend.student_id = likes.student_id AND friend.student_id IN ( SELECT friend.student_id FROM friend ) )","[(1101,), (1247,), (1304,), (1468,), (1501,), (1689,), (1709,), (1934,)]","[(1247,), (1316,), (1501,), (1689,), (1709,), (1782,), (1911,), (1934,)]",False
SPIDER_dev_9,concert_singer,What are  the different countries with singers above age 20?,return singers ;return ages of #1 ;return #1 where #2 is higher than 20 ;return countries of #3,SELECT DISTINCT country FROM singer WHERE age  >  20,SELECT DISTINCT singer.country FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer WHERE singer.singer_id IN ( SELECT singer.singer_id FROM singer ) AND singer.age > 20 ),"[('Netherlands',), ('United States',), ('France',)]","[('Netherlands',), ('United States',), ('France',)]",True
SPIDER_dev_90,car_1,"For each continent, list its id, name, and how many countries it has?","return continents ;return ids of #1 ;return names of #1 ;return countries of #1 ;return number of #4 for each #1 ;return #2, #3, #5","SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","SELECT continents.contid, continents.continent, COUNT(countries.countryid) FROM countries, continents WHERE continents.contid = countries.continent AND continents.continent IN ( SELECT continents.continent FROM continents ) GROUP BY continents.continent","[(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]","[(4, 'africa', 2), (1, 'america', 3), (3, 'asia', 2), (5, 'australia', 2), (2, 'europe', 6)]",True
SPIDER_dev_900,network_1,Show name of all students who have some friends and also are liked by someone else.,return students ;return friends of #1 ;return #1 who are liked by someone else ;return #1 in both #2 and #3 ;return names of #4,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,"SELECT DISTINCT friend.student_id FROM friend, likes WHERE friend.student_id = likes.student_id AND friend.student_id IN ( SELECT DISTINCT friend.student_id FROM friend, likes WHERE friend.student_id = likes.student_id AND friend.student_id IN ( SELECT friend.student_id FROM friend ) )","[('Alexis',), ('Cassandra',), ('Gabriel',), ('Haley',), ('Jessica',), ('Jordan',), ('Kris',), ('Kyle',)]","[(1247,), (1316,), (1501,), (1689,), (1709,), (1782,), (1911,), (1934,)]",False
SPIDER_dev_901,network_1,What are the names of high schoolers who both have friends and are liked?,return high schoolers ;return #1 who have friends ;return #1 who are liked ;return #1 in both #2 and #3 ;return names of #4,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,"SELECT DISTINCT highschooler.name FROM friend, highschooler, likes WHERE highschooler.id = friend.student_id AND highschooler.id = likes.liked_id AND highschooler.id IN ( SELECT DISTINCT highschooler.id FROM friend, highschooler, likes WHERE highschooler.id = friend.student_id AND highschooler.id = likes.liked_id )","[('Alexis',), ('Cassandra',), ('Gabriel',), ('Haley',), ('Jessica',), ('Jordan',), ('Kris',), ('Kyle',)]","[('Cassandra',), ('Gabriel',), ('Alexis',), ('Kris',), ('Jordan',), ('Kyle',), ('Jessica',), ('Haley',)]",True
SPIDER_dev_902,network_1,Count the number of likes for each student id.,return student ids ;return likes of #1 ;return number of #2 for each #1,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","SELECT likes.student_id, COUNT(likes.student_id) FROM likes WHERE likes.student_id IN ( SELECT likes.student_id FROM likes ) GROUP BY likes.student_id","[(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]","[(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]",True
SPIDER_dev_903,network_1,How many likes correspond to each student id?,return student ids ;return likes of #1 ;return number of #2 for each #1,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","SELECT likes.student_id, COUNT(likes.student_id) FROM likes WHERE likes.student_id IN ( SELECT likes.student_id FROM likes ) GROUP BY likes.student_id","[(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]","[(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]",True
SPIDER_dev_904,network_1,"Show the names of high schoolers who have likes, and numbers of likes for each.","return high schoolers ;return #1 with likes ;return names of #2 ;return likes of #2 ;return number of #4 for each #2 ;return #3, #5","SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","SELECT highschooler.name, highschooler.id, COUNT(likes.student_id) FROM highschooler, likes WHERE highschooler.id = likes.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler, likes WHERE highschooler.id = likes.student_id ) GROUP BY highschooler.id","[('John', 1), ('Alexis', 1), ('Austin', 1), ('Jessica', 1), ('Brittany', 1), ('Gabriel', 1), ('Cassandra', 1), ('Andrew', 1), ('Gabriel', 1), ('Kyle', 1)]","[('John', 1025, 1), ('Alexis', 1247, 1), ('Austin', 1316, 1), ('Jessica', 1501, 1), ('Brittany', 1641, 1), ('Gabriel', 1689, 1), ('Cassandra', 1709, 1), ('Andrew', 1782, 1), ('Gabriel', 1911, 1), ('Kyle', 1934, 1)]",False
SPIDER_dev_905,network_1,"What are the names of high schoolers who have likes, and how many likes does each have?","return high schoolers ;return #1 who have likes ;return names of #2 ;return likes of #2 ;return number of #4 for each #2 ;return #3, #5","SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","SELECT highschooler.name, highschooler.id, COUNT(likes.student_id) FROM highschooler, likes WHERE highschooler.id = likes.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler, likes WHERE highschooler.id = likes.student_id ) GROUP BY highschooler.id","[('John', 1), ('Alexis', 1), ('Austin', 1), ('Jessica', 1), ('Brittany', 1), ('Gabriel', 1), ('Cassandra', 1), ('Andrew', 1), ('Gabriel', 1), ('Kyle', 1)]","[('John', 1025, 1), ('Alexis', 1247, 1), ('Austin', 1316, 1), ('Jessica', 1501, 1), ('Brittany', 1641, 1), ('Gabriel', 1689, 1), ('Cassandra', 1709, 1), ('Andrew', 1782, 1), ('Gabriel', 1911, 1), ('Kyle', 1934, 1)]",False
SPIDER_dev_906,network_1,What is the name of the high schooler who has the greatest number of likes?,return high schoolers ;return likes of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"SELECT highschooler.name FROM highschooler, likes WHERE highschooler.id = likes.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler, likes WHERE highschooler.id = likes.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler ) GROUP BY highschooler.id ORDER BY COUNT(likes.student_id) DESC LIMIT 1 )","[('John',)]","[('John',)]",True
SPIDER_dev_907,network_1,Give the name of the student with the most likes.,return students ;return likes of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"SELECT friend.student_id FROM friend, likes WHERE friend.student_id = likes.student_id AND friend.student_id IN ( SELECT friend.student_id FROM friend, likes WHERE friend.student_id = likes.student_id AND friend.student_id IN ( SELECT friend.student_id FROM friend ) GROUP BY friend.student_id ORDER BY COUNT(likes.student_id) DESC LIMIT 1 )","[('John',)]","[(1782,), (1782,), (1782,)]",False
SPIDER_dev_908,network_1,Show the names of students who have at least 2 likes.,return students ;return likes of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least 2 ;return names of #4,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2,"SELECT friend.student_id FROM friend, likes WHERE likes.student_id = friend.student_id AND likes.student_id IN ( SELECT likes.student_id FROM likes WHERE likes.student_id IN ( SELECT likes.student_id FROM likes ) GROUP BY likes.student_id HAVING COUNT(likes.student_id) >= 2 )",[],[],True
SPIDER_dev_909,network_1,What are the names of students who have 2 or more likes?,return students ;return likes of #1 ;return number of #2 for each #1 ;return #1 where #3 is 2 or more ;return names of #4,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2,"SELECT friend.student_id FROM friend, likes WHERE likes.student_id = friend.student_id AND likes.student_id IN ( SELECT likes.student_id FROM likes WHERE likes.student_id IN ( SELECT likes.student_id FROM likes ) GROUP BY likes.student_id HAVING COUNT(likes.student_id) >= 2 )",[],[],True
SPIDER_dev_91,car_1,How many countries are listed?,return countries ;return number of #1,SELECT count(*) FROM COUNTRIES;,SELECT COUNT(countries.countryid) FROM countries,"[(15,)]","[(15,)]",True
SPIDER_dev_910,network_1,Show the names of students who have a grade higher than 5 and have at least 2 friends.,return students ;return grades of #1 ;return #1 where #2 is higher than 5 ;return friends of #1 ;return number of #4 for each #1 ;return #1 where #5 is at least 2 ;return #1 of both #3 and #6 ;return names of #7,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,"SELECT DISTINCT highschooler.name FROM friend, highschooler WHERE highschooler.id = friend.student_id AND friend.student_id IN ( SELECT DISTINCT friend.student_id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND friend.student_id IN ( SELECT friend.student_id FROM friend ) AND highschooler.grade > 5 GROUP BY friend.student_id HAVING COUNT(friend.student_id) >= 2 )","[('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]","[('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]",True
SPIDER_dev_911,network_1,What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?,return high schoolers ;return grades of #1 ;return #1 where #2 is higher than 5 ;return friends of #1 ;return number of #4 for each #1 ;return #1 where #5 is at least 2 ;return #1 in both #3 and #6 ;return names of #7,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,"SELECT DISTINCT highschooler.name FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT DISTINCT highschooler.id FROM friend, highschooler WHERE highschooler.id = friend.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler ) AND highschooler.grade > 5 GROUP BY highschooler.id HAVING COUNT(friend.student_id) >= 2 )","[('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]","[('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]",True
SPIDER_dev_912,network_1,How many likes does Kyle have?,return kyle ;return likes of #1 ;return number of #2,"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","SELECT COUNT(likes.student_id) FROM highschooler, likes WHERE highschooler.id = likes.student_id AND highschooler.name IN ( SELECT highschooler.name FROM highschooler WHERE highschooler.name = 'Kyle' )","[(1,)]","[(1,)]",True
SPIDER_dev_913,network_1,Return the number of likes that the high schooler named Kyle has.,return high schooler ;return #1 named kyle ;return likes of #2 ;return number of #3,"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","SELECT COUNT(likes.student_id) FROM highschooler, likes WHERE highschooler.id = likes.student_id AND highschooler.id IN ( SELECT highschooler.id FROM highschooler WHERE highschooler.name = 'Kyle' )","[(1,)]","[(1,)]",True
SPIDER_dev_914,network_1,Find the average grade of all students who have some friends.,return students ;return #1 who have friends ;return grades of #2 ;return average of #3,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"SELECT AVG(highschooler.grade) FROM friend, highschooler WHERE friend.student_id = highschooler.id AND friend.student_id IN ( SELECT friend.student_id FROM friend )","[(10.428571428571429,)]","[(10.25,)]",False
SPIDER_dev_915,network_1,What is the average grade of students who have friends?,return students ;return #1 who have friends ;return grades of #2 ;return average of #3,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"SELECT AVG(highschooler.grade) FROM friend, highschooler WHERE friend.student_id = highschooler.id AND friend.student_id IN ( SELECT friend.student_id FROM friend )","[(10.428571428571429,)]","[(10.25,)]",False
SPIDER_dev_916,network_1,Find the minimum grade of students who have no friends.,return students ;return friends of #1 ;return number of #2 for each #1 ;return #1 where #3 is zero ;return grades of #4 ;return minimum of #5,SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"SELECT MIN(highschooler.grade) FROM friend, highschooler WHERE friend.student_id = highschooler.id AND friend.student_id IN ( SELECT friend.student_id FROM friend WHERE friend.student_id IN ( SELECT friend.student_id FROM friend ) GROUP BY friend.student_id HAVING COUNT(friend.student_id) = 0 )","[(10,)]","[(None,)]",False
SPIDER_dev_917,network_1,What is the lowest grade of students who do not have any friends?,return students ;return #1 who do not have any friends ;return grades of #2 ;return lowest #3,SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"SELECT highschooler.grade FROM friend, highschooler WHERE friend.student_id = highschooler.id AND highschooler.grade IN ( SELECT highschooler.grade FROM friend, highschooler WHERE friend.student_id = highschooler.id AND friend.student_id IN ( SELECT friend.student_id FROM friend ) ) AND friend.student_id IN ( SELECT friend.student_id FROM friend ) ORDER BY friend.student_id ASC LIMIT 1","[(10,)]","[(10,)]",True
SPIDER_dev_918,dog_kennels,Which states have both owners and professionals living there?,return states ;return #1 with owners living in it ;return #1 with professionals living in it ;return #1 in both #2 and #3,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,"SELECT DISTINCT owners.state FROM professionals, owners WHERE owners.email_address = professionals.email_address","[('Indiana',), ('Mississippi',), ('Wisconsin',)]",[],False
SPIDER_dev_919,dog_kennels,Find the states where both owners and professionals live.,return states ;return #1 where owners live ;return #1 where professionals live ;return #1 in both #2 and #3,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,"SELECT DISTINCT owners.state FROM professionals, owners WHERE owners.email_address = professionals.email_address","[('Indiana',), ('Mississippi',), ('Wisconsin',)]",[],False
SPIDER_dev_92,car_1,How many countries exist?,return countries ;return number of #1,SELECT count(*) FROM COUNTRIES;,SELECT COUNT(countries.countryid) FROM countries,"[(15,)]","[(15,)]",True
SPIDER_dev_920,dog_kennels,What is the average age of the dogs who have gone through any treatments?,return dogs ;return #1 who have gone through any treatments ;return the ages of #2 ;return the average of #3,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),"SELECT AVG(dogs.age) FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id )","[(5.111111111111111,)]","[(5.466666666666667,)]",False
SPIDER_dev_921,dog_kennels,Find the average age of the dogs who went through treatments.,return dogs ;return #1 who went through treatments ;return age of #2 ;return average of #3,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),"SELECT AVG(dogs.age) FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id )","[(5.111111111111111,)]","[(5.466666666666667,)]",False
SPIDER_dev_922,dog_kennels,"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.","return professionals ;return #1 that live in the state of indiana ;return treatments of #1 ;return number of #3 for each #1 ;return #1 where #4 is higher than 2 ;return #2 or #5 ;return ids of #6 ;return last names of #6 ;return cell phones of #6 ;return #7, #8, #9","SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.state = 'Indiana' AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) GROUP BY professionals.professional_id HAVING COUNT(treatments.treatment_id) > 2","[(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]",[],False
SPIDER_dev_923,dog_kennels,"Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.","return professionals ;return #1 who live in indiana ;return treatments performed of #1 ;return number of #3 for each #1 ;return #1 where #4 is higher than two ;return #2 or #5 ;return ids of #6 ;return last names of #6 ;return cell phones of #6 ;return #7, #8, #9","SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.state = 'Indiana' AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) GROUP BY professionals.professional_id HAVING COUNT(treatments.treatment_id) > 2","[(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]",[],False
SPIDER_dev_924,dog_kennels,Which dogs have not cost their owner more than 1000 for treatment? List the dog names.,return dogs ;return owners of #1 ;return treatment costs of #2 ;return #1 where #3 is not higher than 1000 ;return names of #4,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),"SELECT dogs.name FROM owners, treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND dogs.owner_id = owners.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND dogs.owner_id = owners.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners, dogs WHERE dogs.owner_id = owners.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) ) AND treatments.cost_of_treatment > 1000 )","[('Kacey',), ('Hipolito',), ('Mavis',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',)]",[],False
SPIDER_dev_925,dog_kennels,What are the names of the dogs for which the owner spent more than 1000 for treatment?,return dogs ;return owners of #1 ;return treatment of #1 ;return #1 where #3 is more than 1000 ;return names of #4,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),"SELECT dogs.name FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) AND treatments.treatment_id > 1000 )","[('Kacey',), ('Hipolito',), ('Mavis',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',)]",[],False
SPIDER_dev_926,dog_kennels,Which first names are used for professionals or owners but are not used as dog names?,return first names ;return #1 used for professionals ;return #1 used for owners ;return #1 of both #2 and #3 ;return #1 besides #2 ;return #4 besides dog names,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,"SELECT owners.first_name FROM owners WHERE owners.first_name NOT IN ( SELECT owners.first_name FROM professionals, owners WHERE owners.first_name = professionals.first_name )","[('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]","[('Nora',), ('Melisa',), ('Jaclyn',), ('Tre',), ('Johann',), ('Kade',), ('Emelie',), ('Rolando',), ('Adelle',), ('Lorenz',), ('Gay',), ('Orlando',), ('Cindy',), ('Rachelle',), ('Heather',)]",False
SPIDER_dev_927,dog_kennels,Find the first names that are used for professionals or owners but are not used as dog names.,return professionals ;return owners ;return first names of #1 ;return first names of #2 ;return first names in both #3 and #4 ;return dog names ;return names of #6 ;return #6 besides #7,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,SELECT dogs.name FROM dogs WHERE dogs.name NOT IN ( SELECT dogs.name FROM dogs WHERE dogs.name IN ( SELECT dogs.name FROM dogs ) ),"[('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]",[],False
SPIDER_dev_928,dog_kennels,"Which professional did not operate any treatment on dogs? List the professional's id, role and email.","return professionals ;return #1 that did not operate any treatment on dogs ;return id of #2 ;return role of #2 ;return email of #2 ;return #3, #4, #5","SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id )","[(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]","[(9, 'Veterenarian', 'schneider.kathryne@example.org'), (10, 'Employee', 'jerrod.bahringer@example.org'), (4, 'Veterenarian', 'lourdes.lowe@example.net'), (8, 'Employee', 'goyette.roosevelt@example.net'), (14, 'Employee', 'cole.margarita@example.org'), (4, 'Veterenarian', 'lourdes.lowe@example.net'), (14, 'Employee', 'cole.margarita@example.org'), (6, 'Veterenarian', 'jacynthe.mclaughlin@example.net'), (10, 'Employee', 'jerrod.bahringer@example.org'), (7, 'Veterenarian', 'lambert62@example.org'), (5, 'Veterenarian', 'mekhi.little@example.org'), (9, 'Veterenarian', 'schneider.kathryne@example.org'), (8, 'Employee', 'goyette.roosevelt@example.net'), (9, 'Veterenarian', 'schneider.kathryne@example.org'), (6, 'Veterenarian', 'jacynthe.mclaughlin@example.net')]",False
SPIDER_dev_929,dog_kennels,"Give me the id, role and email of the professionals who did not perform any treatment on dogs.","return professionals ;return #1 who did not perform any treatment on dogs ;return id of #2 ;return role of #2 ;return email of #2 ;return #3, #4, #5","SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id )","[(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]","[(9, 'Veterenarian', 'schneider.kathryne@example.org'), (10, 'Employee', 'jerrod.bahringer@example.org'), (4, 'Veterenarian', 'lourdes.lowe@example.net'), (8, 'Employee', 'goyette.roosevelt@example.net'), (14, 'Employee', 'cole.margarita@example.org'), (4, 'Veterenarian', 'lourdes.lowe@example.net'), (14, 'Employee', 'cole.margarita@example.org'), (6, 'Veterenarian', 'jacynthe.mclaughlin@example.net'), (10, 'Employee', 'jerrod.bahringer@example.org'), (7, 'Veterenarian', 'lambert62@example.org'), (5, 'Veterenarian', 'mekhi.little@example.org'), (9, 'Veterenarian', 'schneider.kathryne@example.org'), (8, 'Employee', 'goyette.roosevelt@example.net'), (9, 'Veterenarian', 'schneider.kathryne@example.org'), (6, 'Veterenarian', 'jacynthe.mclaughlin@example.net')]",False
SPIDER_dev_93,car_1,"How many models does each car maker produce? List maker full name, id and the number.","return car makers ;return models #1 produce ;return number of #2 for each #1 ;return full names of #1 ;return ids of #1 ;return #4, #5, #3","SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","SELECT car_makers.fullname, car_makers.id, COUNT(model_list.maker) FROM model_list, car_makers WHERE car_makers.id = model_list.maker AND car_makers.id IN ( SELECT car_makers.id FROM car_makers ) GROUP BY car_makers.id","[('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]","[('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]",True
SPIDER_dev_930,dog_kennels,"Which owner owns the most dogs? List the owner id, first name and last name.","return owners ;return dogs #1 own ;return number of #2 for each #1 ;return #1 where #3 is highest ;return owner id of #4 ;return first name of #4 ;return last name of #4 ;return #5, #6, #7","SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) GROUP BY owners.owner_id ORDER BY COUNT(dogs.owner_id) DESC LIMIT 1 )","[(14, 'Rachelle', 'Funk')]","[(14, 'Rachelle', 'Funk'), (14, 'Rachelle', 'Funk'), (14, 'Rachelle', 'Funk')]",True
SPIDER_dev_931,dog_kennels,"Return the owner id, first name and last name of the owner who has the most dogs.","return owners ;return dogs of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return owner id of #4 ;return first name of #4 ;return last name of #4 ;return #5, #6, #7","SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) GROUP BY owners.owner_id ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1 )","[(14, 'Rachelle', 'Funk')]","[(14, 'Rachelle', 'Funk'), (14, 'Rachelle', 'Funk'), (14, 'Rachelle', 'Funk')]",True
SPIDER_dev_932,dog_kennels,"Which professionals have done at least two treatments? List the professional's id, role, and first name.","return professionals ;return treatments of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least two ;return id of #4 ;return role of #4 ;return first name of #4 ;return #5, #6, #7","SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) GROUP BY professionals.professional_id HAVING COUNT(treatments.treatment_id) >= 2 )","[(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]","[(9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (4, 'Veterenarian', 'Vernice'), (8, 'Employee', 'Karley'), (14, 'Employee', 'Sigurd'), (4, 'Veterenarian', 'Vernice'), (14, 'Employee', 'Sigurd'), (6, 'Veterenarian', 'Ruben'), (10, 'Employee', 'Domenica'), (9, 'Veterenarian', 'Monte'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (6, 'Veterenarian', 'Ruben')]",True
SPIDER_dev_933,dog_kennels,"What are the id, role, and first name of the professionals who have performed two or more treatments?","return professionals ;return treatments performed of #1 ;return number of #2 for each #1 ;return #1 where #3 is at least two ;return ids of #4 ;return roles of #4 ;return first names of #4 ;return #5, #6, #7","SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","SELECT professionals.professional_id, professionals.role_code, professionals.first_name FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) GROUP BY professionals.professional_id HAVING COUNT(treatments.treatment_id) >= 2 )","[(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]","[(9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (4, 'Veterenarian', 'Vernice'), (8, 'Employee', 'Karley'), (14, 'Employee', 'Sigurd'), (4, 'Veterenarian', 'Vernice'), (14, 'Employee', 'Sigurd'), (6, 'Veterenarian', 'Ruben'), (10, 'Employee', 'Domenica'), (9, 'Veterenarian', 'Monte'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (6, 'Veterenarian', 'Ruben')]",True
SPIDER_dev_934,dog_kennels,What is the name of the breed with the most dogs?,return breeds ;return dogs of #1 ;return number of #2 for each #1 ;return #1 where #3 is highest ;return name of #4,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,"SELECT breeds.breed_name FROM dogs, breeds WHERE breeds.breed_code = dogs.breed_code AND breeds.breed_code IN ( SELECT breeds.breed_code FROM dogs, breeds WHERE breeds.breed_code = dogs.breed_code AND breeds.breed_code IN ( SELECT breeds.breed_code FROM breeds ) GROUP BY breeds.breed_code ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1 )","[('Bulldog',)]","[('Bulldog',), ('Bulldog',), ('Bulldog',), ('Bulldog',), ('Bulldog',), ('Bulldog',), ('Bulldog',)]",True
SPIDER_dev_935,dog_kennels,Which breed do the most dogs have? Give me the breed name.,return dogs ;return breed of #1 ;return number of #1 for each #2 ;return #2 where #3 is highest ;return name of #4,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,"SELECT breeds.breed_name FROM breeds, dogs WHERE dogs.breed_code = breeds.breed_code AND breeds.breed_code IN ( SELECT breeds.breed_code FROM breeds, dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) GROUP BY breeds.breed_code ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1 )","[('Bulldog',)]","[('Bulldog',), ('Bulldog',), ('Bulldog',), ('Bulldog',), ('Bulldog',), ('Bulldog',), ('Bulldog',)]",True
SPIDER_dev_936,dog_kennels,Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.,"return owners ;return dogs of #1 ;return treatments of #2 ;return number of #3 for each #1 ;return #1 where #4 is highest ;return owner id of #5 ;return last name of #5 ;return #6, #7","SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","SELECT owners.owner_id, owners.last_name FROM owners, treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners, treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND owners.owner_id = dogs.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) ) GROUP BY owners.owner_id ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1 )","[(14, 'Funk')]","[(14, 'Funk'), (14, 'Funk'), (14, 'Funk'), (14, 'Funk')]",True
SPIDER_dev_937,dog_kennels,Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.,"return owners ;return dogs of #1 ;return treatments of #2 ;return number of #3 for each #1 ;return #1 where #4 is highest ;return owner id of #5 ;return last name of #5 ;return #6, #7","SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","SELECT owners.owner_id, owners.last_name FROM owners, treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners, treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND owners.owner_id = dogs.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) ) GROUP BY owners.owner_id ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1 )","[(14, 'Funk')]","[(14, 'Funk'), (14, 'Funk'), (14, 'Funk'), (14, 'Funk')]",True
SPIDER_dev_938,dog_kennels,What is the description of the treatment type that costs the least money in total?,return treatment types ;return costs of #1 ;return sum of #2 for each #1 ;return #1 where #3 is lowest ;return description of #4,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,"SELECT treatment_types.treatment_type_description FROM treatment_types, treatments WHERE treatment_types.treatment_type_code = treatments.treatment_type_code AND treatment_types.treatment_type_code IN ( SELECT treatment_types.treatment_type_code FROM treatment_types, treatments WHERE treatment_types.treatment_type_code = treatments.treatment_type_code AND treatment_types.treatment_type_code IN ( SELECT treatment_types.treatment_type_code FROM treatment_types ) GROUP BY treatment_types.treatment_type_code ORDER BY SUM(treatments.cost_of_treatment) ASC LIMIT 1 )","[('Take for a Walk',)]","[('Take for a Walk',), ('Take for a Walk',), ('Take for a Walk',), ('Take for a Walk',), ('Take for a Walk',)]",True
SPIDER_dev_939,dog_kennels,Give me the description of the treatment type whose total cost is the lowest.,return treatment types ;return total costs of #1 ;return #1 where #2 is lowest ;return description of #3,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,"SELECT treatment_types.treatment_type_description FROM treatment_types, treatments WHERE treatment_types.treatment_type_code = treatments.treatment_type_code AND treatment_types.treatment_type_code IN ( SELECT treatment_types.treatment_type_code FROM treatment_types, treatments WHERE treatment_types.treatment_type_code = treatments.treatment_type_code AND treatment_types.treatment_type_code IN ( SELECT treatment_types.treatment_type_code FROM treatment_types ) ORDER BY treatments.cost_of_treatment ASC LIMIT 1 )","[('Take for a Walk',)]","[('Take for a Walk',), ('Take for a Walk',), ('Take for a Walk',), ('Take for a Walk',), ('Take for a Walk',)]",True
SPIDER_dev_94,car_1,"What is the full name of each car maker, along with its id and how many models it produces?","return car makers ;return full names of #1 ;return ids of #1 ;return models of #1 ;return number of #4 for each #1 ;return #2, #3, #5","SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","SELECT car_makers.fullname, car_makers.id, COUNT(model_list.model) FROM model_list, car_makers WHERE car_makers.id = model_list.maker AND car_makers.id IN ( SELECT car_makers.id FROM car_makers ) GROUP BY car_makers.id","[('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]","[('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]",True
SPIDER_dev_940,dog_kennels,Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.,"return owners ;return dogs of #1 ;return amount of money paid for #2 ;return #1 where #3 is the largest ;return owner id of #4 ;return zip code of #4 ;return #5, #6","SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT owners.owner_id, owners.zip_code FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) ) ORDER BY dogs.gender DESC LIMIT 1 )","[(3, '02647')]","[(3, '02647'), (3, '02647')]",True
SPIDER_dev_941,dog_kennels,Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.,"return owners ;return dogs of #1 ;return money spent on #2 ;return sum of #3 for each #1 ;return #1 where #4 is highest ;return owner id of #5 ;return zip code of #5 ;return #6, #7","SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","SELECT owners.owner_id, owners.zip_code FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) ) GROUP BY owners.owner_id ORDER BY SUM(dogs.weight) DESC LIMIT 1 )","[(3, '02647')]","[(3, '02647'), (3, '02647')]",True
SPIDER_dev_942,dog_kennels,Which professionals have done at least two types of treatments? List the professional id and cell phone.,"return professionals ;return treatments #1 have done ;return types of #2 ;return number of #3 for each #1 ;return #1 where #4 is at least two ;return professional id of #5 ;return cell phone of #5 ;return #6, #7","SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","SELECT professionals.professional_id, professionals.cell_number FROM professionals, treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals, treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND professionals.professional_id = treatments.professional_id AND treatments.professional_id IN ( SELECT treatments.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) ) GROUP BY professionals.professional_id HAVING COUNT(treatment_types.treatment_type_code) >= 2 )","[(4, '00230569697'), (6, '139-321-7313'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]","[(9, '962-983-8109x3509'), (10, '461-801-2600'), (4, '00230569697'), (8, '328.842.3792'), (14, '1-185-137-1945x409'), (4, '00230569697'), (14, '1-185-137-1945x409'), (6, '139-321-7313'), (10, '461-801-2600'), (9, '962-983-8109x3509'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (6, '139-321-7313')]",True
SPIDER_dev_943,dog_kennels,Find the id and cell phone of the professionals who operate two or more types of treatments.,"return professionals ;return treatments #1 operate ;return types of #2 ;return number of #3 for each #1 ;return #1 where #4 is at least two ;return ids of #5 ;return cell phones of #5 ;return #6, #7","SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","SELECT professionals.professional_id, professionals.cell_number FROM professionals, treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals, treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND professionals.professional_id = treatments.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) ) GROUP BY professionals.professional_id HAVING COUNT(treatment_types.treatment_type_code) >= 2 )","[(4, '00230569697'), (6, '139-321-7313'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]","[(9, '962-983-8109x3509'), (10, '461-801-2600'), (4, '00230569697'), (8, '328.842.3792'), (14, '1-185-137-1945x409'), (4, '00230569697'), (14, '1-185-137-1945x409'), (6, '139-321-7313'), (10, '461-801-2600'), (9, '962-983-8109x3509'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (6, '139-321-7313')]",True
SPIDER_dev_944,dog_kennels,What are the first name and last name of the professionals who have done treatment with cost below average?,"return professionals ;return treatments of #1 ;return costs of #2 ;return average of #3 ;return #1 where #3 is lower than #4 ;return first names of #5 ;return last names of #5 ;return #6, #7","SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","SELECT professionals.first_name, professionals.last_name FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) ) AND treatments.cost_of_treatment < ( SELECT AVG(treatments.cost_of_treatment) FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) ) ) )","[('Taryn', 'Braun'), ('Jayson', 'Ullrich'), ('Olaf', 'Watsica'), ('Vernice', 'Tillman'), ('Danny', 'Considine'), ('Ruben', ""O'Reilly""), ('Velva', 'Hayes'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Domenica', 'Jacobs'), ('Brady', 'Pouros'), ('Winfield', 'Christiansen'), ('Ericka', 'Murazik'), ('Sigurd', 'Frami'), ('Lesly', 'Walter')]","[('Monte', 'Kshlerin'), ('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Vernice', 'Tillman'), ('Ruben', ""O'Reilly""), ('Domenica', 'Jacobs'), ('Monte', 'Kshlerin'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Ruben', ""O'Reilly"")]",False
SPIDER_dev_945,dog_kennels,Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.,"return professionals ;return treatments of #1 ;return costs of #2 ;return average of #3 ;return #1 where #3 is lower than #4 ;return first names of #5 ;return last names of #5 ;return #6, #7","SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","SELECT professionals.first_name, professionals.last_name FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) ) AND treatments.cost_of_treatment < ( SELECT AVG(treatments.cost_of_treatment) FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) ) ) )","[('Taryn', 'Braun'), ('Jayson', 'Ullrich'), ('Olaf', 'Watsica'), ('Vernice', 'Tillman'), ('Danny', 'Considine'), ('Ruben', ""O'Reilly""), ('Velva', 'Hayes'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Domenica', 'Jacobs'), ('Brady', 'Pouros'), ('Winfield', 'Christiansen'), ('Ericka', 'Murazik'), ('Sigurd', 'Frami'), ('Lesly', 'Walter')]","[('Monte', 'Kshlerin'), ('Domenica', 'Jacobs'), ('Vernice', 'Tillman'), ('Karley', 'Hyatt'), ('Vernice', 'Tillman'), ('Ruben', ""O'Reilly""), ('Domenica', 'Jacobs'), ('Monte', 'Kshlerin'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Ruben', ""O'Reilly"")]",False
SPIDER_dev_946,dog_kennels,"List the date of each treatment, together with the first name of the professional who operated it.","return treatments ;return dates of #1 ;return professionals who operated #1 ;return first name of #3 ;return #2, #4","SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","SELECT treatments.date_of_treatment, professionals.first_name FROM professionals, treatments WHERE treatments.professional_id = professionals.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments ) AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals, treatments WHERE treatments.professional_id = professionals.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments ) )","[('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]","[('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]",True
SPIDER_dev_947,dog_kennels,What are the date and the operating professional's first name of each treatment?,"return treatments ;return dates of #1 ;return operating professional of #1 ;return first name of #3 ;return #2, #4","SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","SELECT treatments.date_of_treatment, professionals.first_name FROM professionals, treatments WHERE treatments.professional_id = professionals.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments ) AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals, treatments WHERE treatments.professional_id = professionals.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments ) )","[('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]","[('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]",True
SPIDER_dev_948,dog_kennels,List the cost of each treatment and the corresponding treatment type description.,"return treatments ;return costs of #1 ;return treatment types of #1 ;return descriptions of #3 ;return #2, #4","SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments ) AND treatment_types.treatment_type_code IN ( SELECT treatment_types.treatment_type_code FROM treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments ) )","[(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]","[(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]",True
SPIDER_dev_949,dog_kennels,What are the cost and treatment type description of each treatment?,"return treatments ;return costs of #1 ;return treatment types of #1 ;return descriptions of #3 ;return #2, #4","SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments ) AND treatment_types.treatment_type_code IN ( SELECT treatment_types.treatment_type_code FROM treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments ) )","[(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]","[(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]",True
SPIDER_dev_95,car_1,Which model of the car has the minimum horsepower?,return cars ;return models of #1 ;return horsepower of #1 ;return #2 where #3 is minimum,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,"SELECT model_list.model FROM car_names, model_list, cars_data WHERE car_names.makeid = cars_data.id AND car_names.model = model_list.model AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.horsepower ASC LIMIT 1","[('amc',)]","[('amc',)]",True
SPIDER_dev_950,dog_kennels,"List each owner's first name, last name, and the size of his for her dog.","return owners ;return first names of #1 ;return last names of #1 ;return dogs of #1 ;return sizes of #4 ;return #2, #3, #5","SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","SELECT owners.first_name, owners.last_name, sizes.size_code FROM owners, sizes, dogs WHERE dogs.size_code = sizes.size_code AND owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) )","[('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Nora', 'Haley', 'MED'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED')]","[('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Nora', 'Haley', 'MED'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED')]",True
SPIDER_dev_951,dog_kennels,"What are each owner's first name, last name, and the size of their dog?","return owners ;return first names of #1 ;return last names of #1 ;return dogs of #1 ;return sizes of #4 ;return #2, #3, #5","SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","SELECT owners.first_name, owners.last_name, sizes.size_code FROM owners, sizes, dogs WHERE dogs.size_code = sizes.size_code AND owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) )","[('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Nora', 'Haley', 'MED'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED')]","[('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Nora', 'Haley', 'MED'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED')]",True
SPIDER_dev_952,dog_kennels,List pairs of the owner's first name and the dogs's name.,"return owners ;return dogs ;return first names of #1 ;return first names of #2 ;return #3, #4","SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","SELECT owners.first_name, dogs.name FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) AND dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs )","[('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]","[('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]",True
SPIDER_dev_953,dog_kennels,What are each owner's first name and their dogs's name?,"return owners ;return first names of #1 ;return dogs of #1 ;return names of #3 ;return #2, #4","SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","SELECT owners.first_name, dogs.name FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners ) )","[('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]","[('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]",True
SPIDER_dev_954,dog_kennels,List the names of the dogs of the rarest breed and the treatment dates of them.,"return dogs ;return breeds of #1 ;return #1 where #2 is rarest ;return names of #3 ;return treatment dates of #3 ;return #4, #5","SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","SELECT dogs.name, treatments.date_of_treatment FROM treatments, breeds, dogs WHERE dogs.dog_id = treatments.dog_id AND dogs.breed_code = breeds.breed_code AND dogs.dog_id IN ( SELECT dogs.dog_id FROM breeds, dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) AND breeds.breed_code = 'rarest' )","[('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')]",[],False
SPIDER_dev_955,dog_kennels,Which dogs are of the rarest breed? Show their names and treatment dates.,"return dogs ;return breeds of #1 ;return #1 where #2 is rarest ;return names of #3 ;return treatment dates of #3 ;return #4, #5","SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","SELECT dogs.name, treatments.date_of_treatment FROM treatments, breeds, dogs WHERE dogs.dog_id = treatments.dog_id AND dogs.breed_code = breeds.breed_code AND dogs.dog_id IN ( SELECT dogs.dog_id FROM breeds, dogs WHERE dogs.breed_code = breeds.breed_code AND dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) AND breeds.breed_code = 'rarest' )","[('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')]",[],False
SPIDER_dev_956,dog_kennels,Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.,"return dogs ;return owners of #1 ;return #1 where #2 lives in virginia ;return first names of #3 ;return dogs of #3 ;return names of #5 ;return #4, #6","SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","SELECT owners.first_name, dogs.name FROM owners, dogs WHERE dogs.owner_id = owners.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE dogs.owner_id = owners.owner_id AND owners.state = 'Virginia' ) AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE dogs.owner_id = owners.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE dogs.owner_id = owners.owner_id AND owners.state = 'Virginia' ) )","[('Melisa', 'Bessie')]","[('Melisa', 'Bessie')]",True
SPIDER_dev_957,dog_kennels,Find the first names of owners living in Virginia and the names of dogs they own.,"return owners ;return #1 living in virginia ;return dogs of #2 ;return first names of #3 ;return dogs of #3 ;return first names of #5 ;return #4, #6","SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","SELECT dogs.name FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners WHERE owners.state = 'Virginia' ) ) AND dogs.dog_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT dogs.dog_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners WHERE owners.state = 'Virginia' ) ) )","[('Melisa', 'Bessie')]",[],False
SPIDER_dev_958,dog_kennels,What are the arriving date and the departing date of the dogs who have gone through a treatment?,"return dogs ;return #1 who have gone through a treatment ;return arriving dates of #2 ;return departing dates of #2 ;return #3, #4","SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","SELECT dogs.date_arrived, dogs.date_departed FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id )","[('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]","[('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]",True
SPIDER_dev_959,dog_kennels,Find the arriving date and the departing date of the dogs that received a treatment.,"return dogs ;return #1 that received a treatment ;return arriving dates of #2 ;return departing dates of #2 ;return #3, #4","SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","SELECT dogs.date_arrived, dogs.date_departed FROM treatment_types, treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND treatments.treatment_type_code = treatment_types.treatment_type_code AND dogs.dog_id IN ( SELECT dogs.dog_id FROM treatment_types, treatments, dogs WHERE dogs.dog_id = treatments.dog_id AND treatments.treatment_type_code = treatment_types.treatment_type_code )","[('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]","[('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]",True
SPIDER_dev_96,car_1,What is the model of the car with the smallest amount of horsepower?,return cars ;return horsepower of #1 ;return #1 where #2 is the smallest ;return the model of #3,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,"SELECT model_list.model FROM car_names, model_list, cars_data WHERE car_names.model = model_list.model AND car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ORDER BY cars_data.horsepower ASC LIMIT 1 )","[('amc',)]","[('amc',)]",True
SPIDER_dev_960,dog_kennels,List the last name of the owner owning the youngest dog.,return dogs ;return the youngest #1 ;return owner of #2 ;return last name of #3,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"SELECT owners.last_name FROM owners, dogs WHERE dogs.owner_id = owners.owner_id AND owners.owner_id IN ( SELECT owners.owner_id FROM owners, dogs WHERE dogs.owner_id = owners.owner_id AND dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) ) )","[('Feil',), ('Fisher',), ('Rippin',)]","[('Stoltenberg',), ('Feil',), ('Haley',), ('Funk',), ('Mertz',), ('Fisher',), ('Stoltenberg',), ('Funk',), ('DuBuque',), ('Rippin',), ('Schmitt',), ('Price',), ('Prohaska',), ('Funk',), ('Nicolas',)]",False
SPIDER_dev_961,dog_kennels,Who owns the youngest dog? Give me his or her last name.,return dogs ;return #1 that is youngest ;return who owns #2 ;return last name of #3,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"SELECT owners.last_name FROM owners, dogs WHERE dogs.owner_id = owners.owner_id AND dogs.age IN ( SELECT dogs.age FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) ORDER BY dogs.age DESC LIMIT 1 ) )","[('Feil',), ('Fisher',), ('Rippin',)]","[('Feil',), ('Fisher',), ('Rippin',)]",True
SPIDER_dev_962,dog_kennels,List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.,return professionals ;return states of #1 ;return #1 where #2 is hawaii ;return #1 where #2 is wisconsin ;return #3 or #4 ;return emails of #5,SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',SELECT professionals.email_address FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) AND ((professionals.state = 'Hawaii') OR (professionals.state = 'Wisconsin')) ),"[('uboehm@example.org',), ('mekhi.little@example.org',)]","[('uboehm@example.org',), ('mekhi.little@example.org',)]",True
SPIDER_dev_963,dog_kennels,What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?,return professionals ;return states of #1 ;return #1 where #2 is hawaii ;return #1 where #2 is wisconsin ;return #3 or #4 ;return emails of #5,SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',SELECT professionals.email_address FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) AND ((professionals.state = 'Hawaii') OR (professionals.state = 'Wisconsin')) ),"[('uboehm@example.org',), ('mekhi.little@example.org',)]","[('uboehm@example.org',), ('mekhi.little@example.org',)]",True
SPIDER_dev_964,dog_kennels,What are the arriving date and the departing date of all the dogs?,"return dogs ;return arriving dates of #1 ;return departing dates of #1 ;return #2, #3","SELECT date_arrived ,  date_departed FROM Dogs","SELECT dogs.date_arrived, dogs.date_departed FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs )","[('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]","[('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]",True
SPIDER_dev_965,dog_kennels,List the arrival date and the departure date for all the dogs.,"return dogs ;return arrival dates of #1 ;return departure dates of #1 ;return #2, #3","SELECT date_arrived ,  date_departed FROM Dogs","SELECT dogs.date_arrived, dogs.date_departed FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs )","[('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]","[('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]",True
SPIDER_dev_966,dog_kennels,How many dogs went through any treatments?,return dogs ;return #1 that went through treatments ;return number of #2,SELECT count(DISTINCT dog_id) FROM Treatments,"SELECT COUNT(DISTINCT dogs.dog_id) FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id","[(9,)]","[(9,)]",True
SPIDER_dev_967,dog_kennels,Count the number of dogs that went through a treatment.,return dogs ;return #1 that went through a treatment ;return number of #2,SELECT count(DISTINCT dog_id) FROM Treatments,"SELECT COUNT(DISTINCT dogs.dog_id) FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id","[(9,)]","[(9,)]",True
SPIDER_dev_968,dog_kennels,How many professionals have performed any treatment to dogs?,return professionals ;return #1 who have performed any treatment to dogs ;return number of #2,SELECT count(DISTINCT professional_id) FROM Treatments,"SELECT COUNT(DISTINCT professionals.professional_id) FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id","[(8,)]","[(8,)]",True
SPIDER_dev_969,dog_kennels,Find the number of professionals who have ever treated dogs.,return professionals ;return #1 who have treated dogs ;return number of #2,SELECT count(DISTINCT professional_id) FROM Treatments,"SELECT COUNT(DISTINCT professionals.professional_id) FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id","[(8,)]","[(8,)]",True
SPIDER_dev_97,car_1,Find the model of the car whose weight is below the average weight.,return cars ;return weights of #1 ;return average of #2 ;return #1 where #2 is lower than #3 ;return model of #4,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"SELECT car_names.model FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) AND cars_data.weight < ( SELECT AVG(cars_data.weight) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ) )","[('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',)]","[('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',)]",True
SPIDER_dev_970,dog_kennels,"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.","return professionals ;return cities #1 live in ;return #1 where #2 contain substring 'west ;return role of #3 ;return street of #3 ;return city of #3 ;return state of #3 ;return #4, #5, #6, #7","SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) AND professionals.city LIKE '%West%' )","[('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]","[('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]",True
SPIDER_dev_971,dog_kennels,"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.","return professionals ;return cities of #1 ;return #1 where #2 contains substring 'west ;return role of #3 ;return street of #3 ;return city of #3 ;return state of #3 ;return #4, #5, #6, #7","SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","SELECT professionals.role_code, professionals.street, professionals.city, professionals.state FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) AND professionals.city LIKE '%West%' )","[('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]","[('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]",True
SPIDER_dev_972,dog_kennels,"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.","return owners ;return states of #1 ;return names of #2 ;return #1 where #3 contains substring 'north ;return first name of #4 ;return last name of #4 ;return email of #4 ;return #5, #6, #7","SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.owner_id IN ( SELECT owners.owner_id FROM owners WHERE owners.state IN ( SELECT owners.state FROM owners WHERE owners.owner_id IN ( SELECT owners.owner_id FROM owners ) ) AND owners.state LIKE '%North%' )","[('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]","[('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]",True
SPIDER_dev_973,dog_kennels,"Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.","return owners ;return states of #1 ;return names of #2 ;return #1 where #3 contains substring 'north ;return first names of #4 ;return last names of #4 ;return emails of #4 ;return #5, #6, #7","SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","SELECT owners.first_name, owners.last_name, owners.email_address FROM owners WHERE owners.owner_id IN ( SELECT owners.owner_id FROM owners WHERE owners.state IN ( SELECT owners.state FROM owners WHERE owners.owner_id IN ( SELECT owners.owner_id FROM owners ) ) AND owners.state LIKE '%North%' )","[('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]","[('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]",True
SPIDER_dev_974,dog_kennels,How many dogs have an age below the average?,return dogs ;return ages of #1 ;return average of #2 ;return #1 where #2 is lower than #3 ;return number of #4,SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),SELECT COUNT(dogs.dog_id) FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) AND dogs.age < ( SELECT AVG(dogs.age) FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) ),"[(9,)]","[(9,)]",True
SPIDER_dev_975,dog_kennels,Count the number of dogs of an age below the average.,return dogs ;return ages of #1 ;return average of #2 ;return #1 where #2 is lower than #3 ;return number of #4,SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),SELECT COUNT(dogs.dog_id) FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) AND dogs.age < ( SELECT AVG(dogs.age) FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ) ),"[(9,)]","[(9,)]",True
SPIDER_dev_976,dog_kennels,How much does the most recent treatment cost?,return treatments ;return the most recent #1 ;return the cost of #2,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,"SELECT treatments.cost_of_treatment FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id ORDER BY professionals.city ASC LIMIT 1 )","[(407,)]","[(407,)]",True
SPIDER_dev_977,dog_kennels,Show me the cost of the most recently performed treatment.,return treatments ;return when #1 was performed ;return #1 where #2 is the most recently ;return the cost of #3,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,SELECT treatments.cost_of_treatment FROM treatments WHERE treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments WHERE treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments ) ORDER BY treatments.date_of_treatment DESC LIMIT 1 ),"[(407,)]","[(407,)]",True
SPIDER_dev_978,dog_kennels,How many dogs have not gone through any treatment?,return dogs ;return #1 that have not gone through treatment ;return number of #2,SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),"SELECT SUM(dogs.abandoned_yn) FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id","[(6,)]","[(6,)]",True
SPIDER_dev_979,dog_kennels,Tell me the number of dogs that have received any treatment.,return dogs ;return #1 that have received treatment ;return number of #2,select count(*) from dogs where dog_id not in ( select dog_id from treatments ),"SELECT SUM(dogs.abandoned_yn) FROM treatments, dogs WHERE dogs.dog_id = treatments.dog_id","[(6,)]","[(6,)]",True
SPIDER_dev_98,car_1,What is the model for the car with a weight smaller than the average?,return cars ;return weights of #1 ;return average of #2 ;return #1 where #2 is lower than #3 ;return model of #4,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"SELECT car_names.model FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) AND cars_data.weight < ( SELECT AVG(cars_data.weight) FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names ) ) )","[('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',)]","[('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',)]",True
SPIDER_dev_980,dog_kennels,How many owners temporarily do not have any dogs?,return owners ;return #1 that temporarily do not have dogs ;return number of #2,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),"SELECT COUNT(DISTINCT breeds.breed_name) FROM dogs, breeds WHERE breeds.breed_code = dogs.breed_code","[(3,)]","[(3,)]",True
SPIDER_dev_981,dog_kennels,Find the number of owners who do not own any dogs at this moment.,return owners ;return #1 who own dogs ;return #1 besides #2 ;return number of #3,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),"SELECT COUNT(owners.owner_id) FROM owners WHERE owners.owner_id NOT IN ( SELECT owners.owner_id FROM owners, dogs WHERE owners.owner_id = dogs.owner_id )","[(3,)]","[(3,)]",True
SPIDER_dev_982,dog_kennels,How many professionals did not operate any treatment on dogs?,return professionals ;return #1 that did operate any treatment on dogs ;return #1 besides #2 ;return number of #3,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),"SELECT COUNT(professionals.professional_id) FROM professionals WHERE professionals.professional_id NOT IN ( SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id )","[(7,)]","[(7,)]",True
SPIDER_dev_983,dog_kennels,Find the number of professionals who have not treated any dogs.,return professionals ;return #1 who have treated dogs ;return #1 besides #2 ;return number of #3,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),"SELECT COUNT(professionals.professional_id) FROM professionals WHERE professionals.professional_id NOT IN ( SELECT professionals.professional_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id )","[(7,)]","[(7,)]",True
SPIDER_dev_984,dog_kennels,"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.","return dogs ;return #1 who have been abandoned ;return number of #2 ;return #1 where #3 is 1 ;return #1 where #3 is 0 ;return #4, #5 ;return dog names of #6 ;return ages of #6 ;return weights of #6 ;return #7, #8, #9","SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs WHERE ((dogs.abandoned_yn = 1) OR (dogs.dog_id = 0)) )","[('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]","[('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]",True
SPIDER_dev_985,dog_kennels,"What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.","return dogs ;return #1 that were abandoned ;return dog names of #2 ;return ages of #2 ;return weights of #2 ;return #3, #4, #5","SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","SELECT dogs.name, dogs.age, dogs.weight FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs )","[('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]","[('Kacey', '6', '7.57'), ('Hipolito', '9', '1.72'), ('Mavis', '8', '8.04'), ('Houston', '5', '2.18'), ('Jeffrey', '4', '1.39'), ('Merritt', '9', '9.8'), ('Narciso', '2', '9.48'), ('George', '2', '8.95'), ('Bessie', '4', '3.52'), ('Troy', '9', '8.96'), ('Betty', '3', '8.16'), ('Holden', '8', '6.92'), ('Jesus', '2', '5.16'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]",False
SPIDER_dev_986,dog_kennels,What is the average age of all the dogs?,return dogs ;return ages of #1 ;return average of #2,SELECT avg(age) FROM Dogs,SELECT AVG(dogs.age) FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ),"[(5.066666666666666,)]","[(5.066666666666666,)]",True
SPIDER_dev_987,dog_kennels,Compute the average age of all the dogs.,return dogs ;return ages of #1 ;return average of #2,SELECT avg(age) FROM Dogs,SELECT AVG(dogs.age) FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ),"[(5.066666666666666,)]","[(5.066666666666666,)]",True
SPIDER_dev_988,dog_kennels,What is the age of the oldest dog?,return dogs ;return ages of #1 ;return the highest #2,SELECT max(age) FROM Dogs,SELECT MAX(dogs.age) FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ),"[('9',)]","[('9',)]",True
SPIDER_dev_989,dog_kennels,Tell me the age of the oldest dog.,return dogs ;return ages of #1 ;return the highest #2,SELECT max(age) FROM Dogs,SELECT MAX(dogs.age) FROM dogs WHERE dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs ),"[('9',)]","[('9',)]",True
SPIDER_dev_99,car_1,Find the name of the makers that produced some cars in the year of 1970?,return cars ;return #1 in 1970 ;return makers of #2 ;return names of #3,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,"SELECT car_makers.maker FROM car_makers, cars_data, car_names, model_list WHERE car_names.model = model_list.model AND model_list.maker = car_makers.id AND car_names.makeid = cars_data.id AND car_makers.id IN ( SELECT car_makers.id FROM car_makers, cars_data, car_names, model_list WHERE car_names.model = model_list.model AND model_list.maker = car_makers.id AND car_names.makeid = cars_data.id AND car_names.makeid IN ( SELECT car_names.makeid FROM car_names, cars_data WHERE car_names.makeid = cars_data.id AND cars_data.year = 1970 ) )","[('gm',), ('chrysler',), ('amc',), ('ford',), ('citroen',), ('toyota',), ('nissan',), ('volkswagen',), ('peugeaut',), ('saab',), ('bmw',)]","[('gm',), ('gm',), ('chrysler',), ('amc',), ('ford',), ('ford',), ('gm',), ('chrysler',), ('gm',), ('amc',), ('citroen',), ('gm',), ('ford',), ('chrysler',), ('amc',), ('chrysler',), ('chrysler',), ('ford',), ('gm',), ('gm',), ('toyota',), ('chrysler',), ('amc',), ('ford',), ('nissan',), ('volkswagen',), ('peugeaut',), ('volkswagen',), ('saab',), ('bmw',), ('amc',), ('ford',), ('gm',), ('chrysler',), ('nissan',), ('gm',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('chrysler',), ('gm',), ('ford',), ('amc',), ('gm',), ('gm',), ('ford',), ('chrysler',), ('chrysler',), ('ford',), ('gm',), ('amc',), ('gm',), ('gm',), ('ford',), ('ford',), ('peugeaut',), ('toyota',), ('nissan',), ('volkswagen',), ('chrysler',), ('toyota',), ('chrysler',), ('volkswagen',), ('gm',), ('ford',), ('gm',), ('gm',), ('chrysler',), ('ford',), ('amc',), ('ford',), ('gm',), ('gm',), ('chrysler',), ('amc',), ('gm',), ('ford',), ('chrysler',), ('volkswagen',), ('peugeaut',), ('ford',), ('nissan',), ('toyota',), ('chrysler',), ('toyota',), ('gm',), ('amc',), ('gm',), ('ford',), ('chrysler',), ('ford',), ('gm',), ('ford',), ('chrysler',), ('chrysler',), ('gm',), ('amc',), ('chrysler',), ('gm',), ('amc',), ('ford',), ('chrysler',), ('volkswagen',), ('gm',), ('ford',), ('chrysler',), ('gm',), ('amc',), ('toyota',), ('gm',), ('nissan',), ('ford',), ('ford',), ('gm',), ('gm',), ('volkswagen',), ('chrysler',), ('saab',), ('toyota',), ('gm',), ('chrysler',), ('ford',), ('amc',), ('gm',), ('nissan',), ('ford',), ('toyota',), ('gm',), ('gm',), ('amc',), ('chrysler',), ('ford',), ('gm',), ('chrysler',), ('ford',), ('amc',), ('volkswagen',), ('volkswagen',), ('toyota',), ('nissan',), ('chrysler',), ('chrysler',), ('gm',), ('ford',), ('ford',), ('gm',), ('gm',), ('chrysler',), ('ford',), ('gm',), ('gm',), ('amc',), ('chrysler',), ('gm',), ('gm',), ('ford',), ('toyota',), ('ford',), ('amc',), ('gm',), ('toyota',), ('volkswagen',), ('nissan',), ('ford',), ('volkswagen',), ('amc',), ('volkswagen',), ('peugeaut',), ('saab',), ('ford',), ('chrysler',), ('gm',), ('chrysler',), ('amc',), ('ford',), ('chrysler',), ('gm',), ('ford',), ('amc',), ('gm',), ('gm',), ('volkswagen',), ('chrysler',), ('ford',), ('gm',), ('amc',), ('volkswagen',), ('nissan',), ('toyota',), ('ford',), ('chrysler',), ('peugeaut',), ('toyota',), ('gm',), ('gm',), ('ford',), ('chrysler',), ('gm',), ('chrysler',)]",True
SPIDER_dev_990,dog_kennels,How much does each charge type costs? List both charge type and amount.,"return charge types ;return amounts of #1 ;return #1, #2","SELECT charge_type ,  charge_amount FROM Charges","SELECT charges.charge_type, charges.charge_amount FROM charges WHERE charges.charge_type IN ( SELECT charges.charge_type FROM charges )","[('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]","[('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]",True
SPIDER_dev_991,dog_kennels,List each charge type and its amount.,"return charge types ;return amounts of #1 ;return #1, #2","SELECT charge_type ,  charge_amount FROM Charges","SELECT charges.charge_type, charges.charge_amount FROM charges WHERE charges.charge_type IN ( SELECT charges.charge_type FROM charges )","[('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]","[('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]",True
SPIDER_dev_992,dog_kennels,How much does the most expensive charge type costs?,return charge types ;return how expensive #1 are ;return #1 where #2 is the most expensive ;return the cost of #3,SELECT max(charge_amount) FROM Charges,SELECT charges.charge_amount FROM charges WHERE charges.charge_amount IN ( SELECT charges.charge_amount FROM charges ) ORDER BY charges.charge_type DESC LIMIT 1,"[(640,)]","[(640,)]",True
SPIDER_dev_993,dog_kennels,What is the charge amount of the most expensive charge type?,return charge types ;return most expensive #1 ;return charge amount of #2,SELECT max(charge_amount) FROM Charges,SELECT charges.charge_amount FROM charges WHERE charges.charge_type IN ( SELECT charges.charge_type FROM charges ORDER BY charges.charge_type DESC LIMIT 1 ),"[(640,)]","[(640,)]",True
SPIDER_dev_994,dog_kennels,"List the email, cell phone and home phone of all the professionals.","return professionals ;return email of #1 ;return cell phone of #1 ;return home phone of #1 ;return #2, #3, #4","SELECT email_address ,  cell_number ,  home_phone FROM professionals","SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals )","[('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]","[('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]",True
SPIDER_dev_995,dog_kennels,"What are the email, cell phone and home phone of each professional?","return professionals ;return emails of #1 ;return cell phones of #1 ;return home phones of #1 ;return #2, #3, #4","SELECT email_address ,  cell_number ,  home_phone FROM professionals","SELECT professionals.email_address, professionals.cell_number, professionals.home_phone FROM professionals WHERE professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals )","[('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]","[('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]",True
SPIDER_dev_996,dog_kennels,What are all the possible breed type and size type combinations?,"return breed types ;return sizes of #1 ;return #1, #2 ;return combinations of #3","SELECT DISTINCT breed_code ,  size_code FROM dogs","SELECT breeds.breed_code, sizes.size_code FROM dogs, sizes, breeds WHERE breeds.breed_code = dogs.breed_code AND dogs.size_code = sizes.size_code AND breeds.breed_code IN ( SELECT breeds.breed_code FROM breeds )","[('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]","[('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('ESK', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('BUL', 'MED'), ('ESK', 'SML'), ('BUL', 'MED'), ('HUS', 'MED'), ('BUL', 'LGE'), ('HUS', 'MED'), ('HUS', 'SML'), ('ESK', 'MED'), ('BUL', 'MED')]",True
SPIDER_dev_997,dog_kennels,Find the distinct breed type and size type combinations for dogs.,"return dogs ;return breed types of #1 ;return sizes of #1 ;return distinct #2 ;return distinct #3 ;return #4, #5","SELECT DISTINCT breed_code ,  size_code FROM dogs","SELECT dogs.breed_code, sizes.size_code FROM sizes, dogs WHERE dogs.size_code = sizes.size_code AND dogs.dog_id IN ( SELECT dogs.dog_id FROM dogs )","[('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]","[('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('ESK', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('BUL', 'MED'), ('ESK', 'SML'), ('BUL', 'MED'), ('HUS', 'MED'), ('BUL', 'LGE'), ('HUS', 'MED'), ('HUS', 'SML'), ('ESK', 'MED'), ('BUL', 'MED')]",True
SPIDER_dev_998,dog_kennels,List the first name of all the professionals along with the description of the treatment they have done.,"return professionals ;return first names of #1 ;return treatments of #1 ;return descriptions of #3 ;return #2, #4","SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals, treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) )","[('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Ruben', 'Take for a Walk')]","[('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Karley', 'Vaccination'), ('Monte', 'Take for a Walk'), ('Ruben', 'Take for a Walk')]",True
SPIDER_dev_999,dog_kennels,What are each professional's first name and description of the treatment they have performed?,"return professionals ;return first names of #1 ;return treatments performed of #1 ;return descriptions of #3 ;return #2, #4","SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","SELECT professionals.first_name, treatment_types.treatment_type_description FROM professionals, treatment_types, treatments WHERE treatments.treatment_type_code = treatment_types.treatment_type_code AND professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) AND treatments.treatment_id IN ( SELECT treatments.treatment_id FROM treatments, professionals WHERE professionals.professional_id = treatments.professional_id AND professionals.professional_id IN ( SELECT professionals.professional_id FROM professionals ) )","[('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Ruben', 'Take for a Walk')]","[('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Karley', 'Vaccination'), ('Monte', 'Take for a Walk'), ('Ruben', 'Take for a Walk')]",True
