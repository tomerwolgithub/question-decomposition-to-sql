from db_schema import *


def prepare_db_schema(path, dataset):
    if dataset == "spider":
        return prepare_spider_db(path)
    return prepare_other_db(path, dataset)


def prepare_spider_db(path):
    return DBSchema(path)


def prepare_other_db(path, dataset):
    schema = DBSchema(path)
    # manually add foreign keys that are absent from the original DBs
    if dataset == "academic":
        schema.add_foreign_key('publication', 'pid', 'writes', 'pid')
        schema.add_foreign_key('author', 'aid', 'writes', 'aid')
        schema.add_foreign_key('journal', 'jid', 'publication', 'jid')
        schema.add_foreign_key('conference', 'cid', 'publication', 'cid')
        schema.add_foreign_key('publication', 'pid', 'publication_keyword', 'pid')
        schema.add_foreign_key('keyword', 'kid', 'publication_keyword', 'kid')
        schema.add_foreign_key('author', 'oid', 'organization', 'oid')
        schema.add_foreign_key('author', 'aid', 'domain_author', 'aid')
        schema.add_foreign_key('domain', 'did', 'domain_author', 'did')
        schema.add_foreign_key('domain', 'did', 'domain_publication', 'did')
        schema.add_foreign_key('domain_publication', 'pid', 'publication', 'pid')
        schema.add_foreign_key('cite', 'cited', 'publication', 'pid')
        schema.add_foreign_key('cite', 'citing', 'publication', 'pid')
        schema.add_foreign_key('domain', 'did', 'domain_keyword', 'did')
        schema.add_foreign_key('domain_keyword', 'kid', 'keyword', 'kid')
        schema.add_foreign_key('domain', 'did', 'domain_journal', 'did')
        schema.add_foreign_key('domain_journal', 'jid', 'journal', 'jid')
        schema.add_foreign_key('conference', 'cid', 'domain_conference', 'cid')
        schema.add_foreign_key('domain', 'did', 'domain_conference', 'did')
    elif dataset == "atis":
        schema.add_foreign_key('airport_service', 'city_code', 'city', 'city_code')
        schema.add_foreign_key('airport_service', 'airport_code', 'flight', 'from_airport')
        schema.add_foreign_key('airport_service', 'airport_code', 'flight', 'to_airport')
        schema.add_foreign_key('date_day', 'day_name', 'days', 'day_name')
        schema.add_foreign_key('days', 'days_code', 'flight', 'flight_days')
        schema.add_foreign_key('fare', 'fare_id', 'flight_fare', 'fare_id')
        schema.add_foreign_key('flight', 'flight_id', 'flight_fare', 'flight_id')
        schema.add_foreign_key('fare', 'fare_basis_code', 'fare_basis', 'fare_basis_code')
        schema.add_foreign_key('flight', 'flight_id', 'flight_stop', 'flight_id')
        schema.add_foreign_key('days', 'days_code', 'fare_basis', 'basis_days')
        schema.add_foreign_key('airport_service', 'airport_code', 'flight_stop', 'stop_airport')
        schema.add_foreign_key('city', 'city_code', 'ground_service', 'city_code')
        schema.add_foreign_key('airline', 'airline_code', 'flight', 'airline_code')
        schema.add_foreign_key('airport', 'airport_code', 'airport_service', 'airport_code')
        schema.add_foreign_key('flight', 'meal_code', 'food_service', 'meal_code')
        schema.add_foreign_key('aircraft', 'aircraft_code', 'equipment_sequence', 'aircraft_code')
        schema.add_foreign_key('equipment_sequence', 'aircraft_code_sequence', 'flight', 'aircraft_code_sequence')
        schema.add_foreign_key('city', 'state_code', 'state', 'state_code')
        schema.add_foreign_key('airport', 'airport_code', 'flight', 'to_airport')
        schema.add_foreign_key('airport', 'airport_code', 'ground_service', 'airport_code')
        schema.add_foreign_key('airport', 'airport_code', 'flight', 'from_airport')
        schema.add_foreign_key('airport_service', 'airport_code', 'fare', 'to_airport')
        schema.add_foreign_key('airport_service', 'airport_code', 'fare', 'from_airport')
        schema.add_foreign_key('flight', 'flight_id', 'flight_leg', 'flight_id')
        schema.add_foreign_key('flight', 'flight_id', 'flight_leg', 'leg_flight')
        schema.add_foreign_key('class_of_service', 'booking_class', 'fare_basis', 'booking_class')
        schema.add_foreign_key('airport', 'state_code', 'state', 'state_code')
        schema.add_foreign_key('airport', 'airport_code', 'flight_stop', 'stop_airport')
        schema.add_foreign_key('fare', 'restriction_code', 'restriction', 'restriction_code')
    elif dataset == "geo":
        schema.add_foreign_key('border_info', 'border', 'state', 'state_name')
        schema.add_foreign_key('river', 'traverse', 'state', 'state_name')
        schema.add_foreign_key('city', 'city_name', 'state', 'capital')
        schema.add_foreign_key('border_info', 'state_name', 'state', 'state_name')
        schema.add_foreign_key('city', 'state_name', 'state', 'state_name')
        schema.add_foreign_key('border_info', 'border', 'river', 'traverse')
        schema.add_foreign_key('highlow', 'state_name', 'state', 'state_name')
        schema.add_foreign_key('border_info', 'border', 'border_info', 'state_name')
        schema.add_foreign_key('highlow', 'state_name', 'river', 'traverse')
        schema.add_foreign_key('border_info', 'state_name', 'river', 'traverse')
        schema.add_foreign_key('city', 'state_name', 'river', 'traverse')
        schema.add_foreign_key('border_info', 'border', 'highlow', 'state_name')
        schema.add_foreign_key('border_info', 'border', 'city', 'state_name')
        schema.add_foreign_key('border_info', 'border', 'lake', 'state_name')
    elif dataset == "yelp":
        schema.add_foreign_key('business', 'business_id', 'category', 'business_id')
        schema.add_foreign_key('review', 'user_id', 'user', 'user_id')
        schema.add_foreign_key('business', 'business_id', 'review', 'business_id')
        schema.add_foreign_key('business', 'business_id', 'neighborhood', 'business_id')
        schema.add_foreign_key('tip', 'user_id', 'user', 'user_id')
        schema.add_foreign_key('business', 'business_id', 'tip', 'business_id')
        schema.add_foreign_key('business', 'business_id', 'checkin', 'business_id')
    elif dataset == "imdb":
        schema.add_foreign_key('actor', 'aid', 'cast', 'aid')
        schema.add_foreign_key('cast', 'msid', 'movie', 'mid')
        schema.add_foreign_key('directed_by', 'did', 'director', 'did')
        schema.add_foreign_key('directed_by', 'msid', 'movie', 'mid')
        schema.add_foreign_key('company', 'id', 'copyright', 'cid')
        schema.add_foreign_key('copyright', 'msid', 'movie', 'mid')
        schema.add_foreign_key('keyword', 'id', 'tags', 'kid')
        schema.add_foreign_key('movie', 'mid', 'tags', 'msid')
        schema.add_foreign_key('classification', 'msid', 'movie', 'mid')
        schema.add_foreign_key('made_by', 'pid', 'producer', 'pid')
        schema.add_foreign_key('classification', 'gid', 'genre', 'gid')
        schema.add_foreign_key('movie', 'mid', 'written_by', 'msid')
        schema.add_foreign_key('made_by', 'msid', 'movie', 'mid')
        schema.add_foreign_key('writer', 'wid', 'written_by', 'wid')
        schema.add_foreign_key('copyright', 'msid', 'tv_series', 'sid')
        schema.add_foreign_key('cast', 'msid', 'tv_series', 'sid')
        schema.add_foreign_key('directed_by', 'msid', 'tv_series', 'sid')
        schema.add_foreign_key('made_by', 'msid', 'tv_series', 'sid')
    else:
        raise ValueError("Invalid dataset name: %s" % dataset)
    return schema
